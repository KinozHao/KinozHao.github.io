<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>S7-1200数据处理指令</title>
    <link href="/2022/11/24/S7-1200/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/11/24/S7-1200/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1、抢答器"><a href="#1、抢答器" class="headerlink" title="1、抢答器"></a>1、抢答器</h2><ul><li>在主持人按下起动按钮SB3，5秒内三组选手可以抢答；</li><li>某组抢答成功时显示该组号，同时锁住其他组使其不能抢答。</li><li>若超过5秒，三组选手将无法再进行抢答，同时数码管以0进行秒级闪烁</li><li>主持按人按下复位按钮SB1后，数码管熄灭，等待下一轮抢答。</li></ul><p><img src="https://img-blog.csdnimg.cn/25904c02856a4869bd8253ac03b72a9f.png#pic_center" alt="启动程序"></p><p><img src="https://img-blog.csdnimg.cn/9f7a1f17633c462d9179f1b670b0ad07.png#pic_center" alt="三组选手"></p><p><img src="https://img-blog.csdnimg.cn/9569b8bd6002442696752eac14530cbc.png#pic_center" alt="三组选手的灯和停止按钮"></p><p><img src="https://img-blog.csdnimg.cn/8e180a108b09401db43b519e7b2e0171.png#pic_center" alt="IO分配表"></p><h2 id="2、红绿灯"><a href="#2、红绿灯" class="headerlink" title="2、红绿灯"></a>2、红绿灯</h2><ul><li>按下开始按钮</li><li>东西方向：绿灯亮3秒，闪动2秒后熄灭，接着黄灯亮2秒后熄灭，红灯亮7秒后熄灭；</li><li>与此同时</li><li>南北方向：红灯亮7秒后熄灭，绿灯亮3秒，闪动2秒，接着黄灯亮2秒后熄灭</li><li>如此循环下去。无论何时按下停止按钮，所有的灯都熄灭。</li></ul><h3 id="2-1、比较指令"><a href="#2-1、比较指令" class="headerlink" title="2.1、比较指令"></a>2.1、比较指令</h3><p><img src="https://img-blog.csdnimg.cn/5429c1e323894df8af34444cb3ccb480.png#pic_center" alt="启动停止程序"></p><p><img src="https://img-blog.csdnimg.cn/0a671247b8d44f159bcbdbff9ff748dc.png#pic_center" alt="Q0.0东西绿 Q0.1东西黄 Q0.2东西红"></p><p><img src="https://img-blog.csdnimg.cn/e87f69b494c644de9b831495d1ed5c09.png#pic_center" alt="Q0.3南北绿 Q0.4南北黄 Q0.5南北红"></p><h3 id="2-2、顺序设计法"><a href="#2-2、顺序设计法" class="headerlink" title="2.2、顺序设计法"></a>2.2、顺序设计法</h3><p><img src="https://img-blog.csdnimg.cn/eab873f1926f48b19a86e40caac6bfe1.png#pic_center" alt="启动停止"></p><p><img src="https://img-blog.csdnimg.cn/3376783c700e466aaa42e8d6a654f01e.png#pic_center" alt="东西方向1"></p><p><img src="https://img-blog.csdnimg.cn/68f87e18870e4fcaa10a2162be31dbe3.png#pic_center" alt="东西方向2 程序段6开始 南北方向"></p><p><img src="https://img-blog.csdnimg.cn/c78ba54513da4df09df6b08b5ed59c17.png#pic_center" alt="南北方向1"></p><p><img src="https://img-blog.csdnimg.cn/b39001ebbb694448b0e30588b649aceb.png#pic_center" alt="南北方向2 程序段10 东西方向灯得电"></p><p><img src="https://img-blog.csdnimg.cn/43b825029bbf4ffba77b303e190d5074.png#pic_center" alt="停止，南北方向灯得电"></p><h2 id="4、九秒倒计时"><a href="#4、九秒倒计时" class="headerlink" title="4、九秒倒计时"></a>4、九秒倒计时</h2><ul><li>按下起动SB5按钮后，开始以秒为单位9秒倒计时，倒计时到0停止且进行秒级闪烁。</li><li>按下复位按钮SB1后，数码管熄灭等待下一轮倒计时。</li></ul><h3 id="4-1、比较指令"><a href="#4-1、比较指令" class="headerlink" title="4.1、比较指令"></a>4.1、比较指令</h3><p><img src="https://img-blog.csdnimg.cn/15c0cfce8a5a470bbe6875545172eb73.png#pic_center" alt="启动程序"></p><p><img src="https://img-blog.csdnimg.cn/003caaa36ff34779b07000de430441e5.png#pic_center" alt="主程序块"></p><h3 id="4-2、减法指令"><a href="#4-2、减法指令" class="headerlink" title="4.2、减法指令"></a>4.2、减法指令</h3><p><img src="https://img-blog.csdnimg.cn/4352aec7ebde4318aebc805af98a946d.png#pic_center" alt="启动部分"></p><p><img src="https://img-blog.csdnimg.cn/631ec5b5f89a4a4589dcf0243ded98fa.png#pic_center" alt="注:当MD10=0时候 后面跟M2.0常开 保持0时候的长亮"></p><p><img src="https://img-blog.csdnimg.cn/1d84780743e54096877161799a1ba84e.png#pic_center" alt="在这里插入图片描述"></p><h2 id="5、八盏跑马灯"><a href="#5、八盏跑马灯" class="headerlink" title="5、八盏跑马灯"></a>5、八盏跑马灯</h2><ul><li>若按下开始按钮，指示灯从第1盏灯开始</li><li>以1秒的速度进行左移位，实现8盏灯的循环点亮控制</li><li>无论何时按下停止按钮，指示灯全部熄灭</li></ul><h3 id="5-1-比较指令"><a href="#5-1-比较指令" class="headerlink" title="5.1 比较指令"></a>5.1 比较指令</h3><p><img src="https://img-blog.csdnimg.cn/2bd5ca9167324b6c8b6a3e07d053a9b2.png#pic_center" alt="时间可能为9或者10秒"></p><h3 id="5-2-移位"><a href="#5-2-移位" class="headerlink" title="5.2 移位"></a>5.2 移位</h3><p><img src="https://img-blog.csdnimg.cn/c1bb1af9b9684a42a50f217291111415.png#pic_center" alt="SHL移位"><br><img src="https://img-blog.csdnimg.cn/e660b1ec90844b47b7a5a53291be30b3.png#pic_center" alt="SHL移位"></p><h3 id="5-3-循环移位"><a href="#5-3-循环移位" class="headerlink" title="5.3 循环移位"></a>5.3 循环移位</h3><p><img src="https://img-blog.csdnimg.cn/acbefbde598441dda714ff7c917a9afc.png#pic_center" alt="ROL循环移位"></p><h3 id="5-4-使用函数FC"><a href="#5-4-使用函数FC" class="headerlink" title="5.4 使用函数FC"></a>5.4 使用函数FC</h3><p><img src="https://img-blog.csdnimg.cn/4540423f7cde405a9376190329a891aa.png#pic_center" alt="main程序块"><br><img src="https://img-blog.csdnimg.cn/7e260f22e09443f28aa931a678951fea.jpeg#pic_center" alt="函数块程序"></p><h2 id="6、数码管显示"><a href="#6、数码管显示" class="headerlink" title="6、数码管显示"></a>6、数码管显示</h2><table><thead><tr><th>数码管显示</th><th>二进制数</th></tr></thead><tbody><tr><td>0</td><td>2#111111</td></tr><tr><td>1</td><td>2#110</td></tr><tr><td>2</td><td>2#1011011</td></tr><tr><td>3</td><td>2#1001111</td></tr><tr><td>4</td><td>2#1100110</td></tr><tr><td>5</td><td>2#1101101</td></tr><tr><td>6</td><td>2#1111101</td></tr><tr><td>7</td><td>2#111</td></tr><tr><td>8</td><td>2#1111111</td></tr><tr><td>9</td><td>2#1101111</td></tr></tbody></table><h2 id="7、IO接线图"><a href="#7、IO接线图" class="headerlink" title="7、IO接线图"></a>7、IO接线图</h2><p><strong>！！ IO分配表的数据和实际程序的数据存在不同，自行判定修改 ！！</strong></p><h3 id="7-1-抢答器"><a href="#7-1-抢答器" class="headerlink" title="7.1 抢答器"></a>7.1 抢答器</h3><p><img src="https://img-blog.csdnimg.cn/0337a2cd44c645b3937be7241552d375.jpeg#pic_center" alt="在这里插入图片描述"></p><h3 id="7-2-红绿灯"><a href="#7-2-红绿灯" class="headerlink" title="7.2 红绿灯"></a>7.2 红绿灯</h3><p><img src="https://img-blog.csdnimg.cn/59c0af354b59447c9f100120bcbadad1.jpeg#pic_center" alt="在这里插入图片描述"></p><h3 id="7-3-倒计时"><a href="#7-3-倒计时" class="headerlink" title="7.3 倒计时"></a>7.3 倒计时</h3><p><img src="https://img-blog.csdnimg.cn/5537f4e8ba324f7e9c69ae5d14a43d7e.jpeg#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d31cd937a7ae404c943374a1db430eb0.jpeg#pic_center" alt="在这里插入图片描述"></p><h3 id="7-4-跑马灯"><a href="#7-4-跑马灯" class="headerlink" title="7.4 跑马灯"></a>7.4 跑马灯</h3><p><img src="https://img-blog.csdnimg.cn/8e866ab3c40744d8914138237a0b9bdc.jpeg#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>PLC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>S7-1200位逻辑指令</title>
    <link href="/2022/11/18/S7-1200/%E4%BD%8D%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/11/18/S7-1200/%E4%BD%8D%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><ul><li>按下起动按钮SB1，第一台电动机立即起动，起动后3s，第二台电动机自行起动</li><li>共同工作5秒后，两台电动机同时停止。无论何时按下停止按钮SB2或任一电动机发生过载时两台电动机均同时停止。</li><li>两台电动机均有工作指示和过载指示（指示灯的工作电压为DC24V），过载时要求相对指示灯以1Hz频率闪烁，直至按下停止按钮。<br><img src="https://img-blog.csdnimg.cn/477897bb3a0c4b6eb622e5eedcc73ff3.jpeg#pic_center" alt="主电路，io分配，io接线图"><br><img src="https://img-blog.csdnimg.cn/2e4d7b103bf84c89a4aeee1fc62ff425.jpeg#pic_center" alt="程序逻辑"></li></ul><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ul><li>按下点动按钮SB1电动机点动运行，按下连动按钮SB2电动机连续运行。</li><li>无论何时按下停止按钮SB3或电动机发生过载时电动机均立即停止。</li><li>电动机要有工作指示和过载指示（指示灯的工作电压为DC24V），过载时要求相对指示灯以1Hz频率闪烁，直至按下停止按钮。<br><img src="https://img-blog.csdnimg.cn/443dc0279fff4c0fb0b81ec1d3527ea9.jpeg#pic_center" alt="主电路，io分配，io接线图"><br><img src="https://img-blog.csdnimg.cn/3a0493f01f074fedb7454b4f5a6b5fd0.jpeg#pic_center" alt="程序逻辑"></li></ul><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ul><li>按下起动按钮SB1，第一台电动机立即起动，起动后3s，第二台电动机自行起动</li><li>按下停止按钮SB2，第一台电动机立即停止，3s后第二台电动机自行停止。</li><li>当任一电动机发生过载时两台电动机均同时停止。</li><li>两台电动机均有工作指示和过载指示（指示灯的工作电压为DC24V），过载时要求相对指示灯以2Hz频率闪烁，直至按下停止按钮。<br><img src="https://img-blog.csdnimg.cn/325bd824db884425b9343f276ef95976.jpeg#pic_center" alt="主电路，io分配，io接线图"><br><img src="https://img-blog.csdnimg.cn/b1c94d9caa1b411e8addd994c40f9927.jpeg#pic_center" alt="程序逻辑"></li></ul><h2 id="第四题-正反转"><a href="#第四题-正反转" class="headerlink" title="第四题(正反转)"></a>第四题(正反转)</h2><ul><li>按下正转按钮SB1，电动机正转运行，按下反转按钮SB2电动机反转</li><li>按下急停按钮SB3电动机立即停止。按下延时停止按钮SB4电动机延时3秒后方能停止。</li><li>当电动机发生过载时电动机立即停止。电动机要有工作指示和过载指示（指示灯的工作电压为DC24V），过载时要求相对指示灯以1Hz频率闪烁，直至按下停止按钮。<br><img src="https://img-blog.csdnimg.cn/eba3ed24ca724f368e185f7324006741.jpeg#pic_center" alt="主电路，io分配，io接线图"><br><img src="https://img-blog.csdnimg.cn/dbaa9a843fe1476d94ab4e5565210491.jpeg#pic_center" alt="程序逻辑"></li></ul><h2 id="第五题-CTU函数"><a href="#第五题-CTU函数" class="headerlink" title="第五题(CTU函数)"></a>第五题(CTU函数)</h2><ul><li>在电动机停止状态下必须按下起动按钮SB1两次，电动机方能起动并运行</li><li>在工作过程中，必须按下停止按钮SB2两次，电动机方能停止运行。</li><li>当电动机发生过载时电动机应立即停止。电动机要有工作指示和过载指示（指示灯的工作电压为DC24V），过载时要求相对指示灯以2Hz频率闪烁，直至按下停止按钮。<br><img src="https://img-blog.csdnimg.cn/1c7dedc207174ad3967d4826e57e4f52.jpeg#pic_center" alt="主电路，io分配，io接线图"><br><img src="https://img-blog.csdnimg.cn/59c56967993c440593da151efe4960d2.jpeg#pic_center" alt="程序逻辑"></li></ul><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><ul><li>按下起动按钮SB1，电动机立即起动并运行，工作10秒后自动停止</li><li>在工作过程中，若想提前停止电动机必须按下停止按钮SB2两次，电动机方能停止运行。</li><li>当电动机发生过载时电动机应立即停止。</li><li>电动机要有工作指示和过载指示（指示灯的工作电压为DC24V），过载时要求相对指示灯以1Hz频率闪烁，直至按下停止按钮。<br><img src="https://img-blog.csdnimg.cn/acf014099e1e4d4f87ff00f2b1b1ea7e.jpeg#pic_center" alt="主电路，io分配，io接线图"><br><img src="https://img-blog.csdnimg.cn/d727af52025941188c85737979ea7610.jpeg#pic_center" alt="程序逻辑"></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>PLC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5 | @RequestMapping</title>
    <link href="/2022/10/21/SpringMVC/RequestMapping/"/>
    <url>/2022/10/21/SpringMVC/RequestMapping/</url>
    
    <content type="html"><![CDATA[<h2 id="1-RequestMapping概述"><a href="#1-RequestMapping概述" class="headerlink" title="1.@RequestMapping概述"></a>1.@RequestMapping概述</h2><ol><li>用于将请求和处理请求的控制器关联，建立映射关系</li><li>当SpringMVC接收到请求，就会找来映射关系种对应控制器方法处理此请求</li><li>RequestMapping中一个value只能对应一个映射，否则将报错</li></ol><h2 id="1-1具体位置"><a href="#1-1具体位置" class="headerlink" title="1.1具体位置"></a>1.1具体位置</h2><ol><li>可以写在类和方法上面</li><li>在类上面时，设置映射请求路径的初始信息</li><li>在方法上时，设置映射请求路径的具体信息</li><li>当存在多个具体信息路径相同时，即可以使模块较多时候用类上添加此注解用于做路径区分</li></ol><h2 id="1-2value属性"><a href="#1-2value属性" class="headerlink" title="1.2value属性"></a>1.2value属性</h2><ol><li>value属性通过请求的请求地址匹配请求映射</li><li>value属性是一个字符串类型数组，表示此映射能够匹配多个请求地址对应的请求</li><li>value属性是必须设置的，最少要映射一个请求路径<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &#123;&quot;/test1&quot;,&quot;/test2&quot;&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;valueTest&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test1&#125;&quot;</span>&gt;</span>测试value属性-&gt;test1路径<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test2&#125;&quot;</span>&gt;</span>测试value属性-&gt;test2路径<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="1-3method属性"><a href="#1-3method属性" class="headerlink" title="1.3method属性"></a>1.3method属性</h2><ol><li>通过请求方式来匹配请求映射</li><li>此属性是一个RequestMethod类型的数组，表示请求映射能匹配多种请求方式</li><li>若html文件的请求方式满足，但是method属性请求方式不满足，就会报错405</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试method 指定请求方式</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/methods&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;valueTest&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/methods&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-4params属性"><a href="#1-4params属性" class="headerlink" title="1.4params属性"></a>1.4params属性</h2><ol><li>通过请求参数匹配请求映射</li><li>params属性是一个字符串类型数组</li></ol><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/paramsvalue.png" alt="四种params匹配机制"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/paramsTest&quot;,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;valueTest&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/paramsTest(username=&#x27;root&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试params属性<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-5Ant风格路径"><a href="#1-5Ant风格路径" class="headerlink" title="1.5Ant风格路径"></a>1.5Ant风格路径</h2><ol><li>?代表任意字符</li><li>*代表任意0个或多个字符</li><li>**代表任意一层或多层目录 单独使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a?a/AntI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Ant1</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/a*a/AntII&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Ant2</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/**/AntIII&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Ant3</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-6占位符"><a href="#1-6占位符" class="headerlink" title="1.6占位符"></a>1.6占位符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/PhTest/&#123;id&#125;/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">PhTest</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>String id,<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span>String name)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;id:&quot;</span>+id+<span class="hljs-string">&quot; name:&quot;</span>+name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/PhTest/10086/Tom&#125;&quot;</span>&gt;</span>占位符使用<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--格式/&#123;具体传入参数&#125;--&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-获取参数方式"><a href="#2-获取参数方式" class="headerlink" title="2.获取参数方式"></a>2.获取参数方式</h2><h3 id="2-1通过原生servlet"><a href="#2-1通过原生servlet" class="headerlink" title="2.1通过原生servlet"></a>2.1通过原生servlet</h3><ol><li>创建html对应映射方法,把原生Servlet写入方法形参</li><li>调用getParameter方法,传入html种的属性</li><li>创建html使用thymeleaf设置属性和对应值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/testServletAPI&quot;,params = &#123;&quot;username&quot;,&quot;password&quot;&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index1</span><span class="hljs-params">(ServletRequest req)</span>&#123;<br>    <span class="hljs-comment">//通过原生servlet方法获取前端参数</span><br>    System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>    System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//html配置</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testServletAPI(username=&#x27;Tom&#x27;,password=123456)&#125;&quot;</span>&gt;</span><br>使用servlet api获取参数<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-2通过控制器方法"><a href="#2-2通过控制器方法" class="headerlink" title="2.2通过控制器方法"></a>2.2通过控制器方法</h3><ol><li>创建html对应映射方法</li><li>方法内写入html属性，使用String类型</li><li>创建html使用thymeleaf设置属性和对应值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParams&quot;)</span><br><span class="hljs-comment">//hobby为多个参数,可以使用字符串或字符串数组获取,若使用数组需使用Array.toString</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParams</span><span class="hljs-params">(String username,String password,String hobby)</span>&#123;<br>    System.out.println(username);<br>    System.out.println(password);<br>    System.out.println(hobby);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testParams(username=&#x27;菲力&#x27;,password=123456)&#125;&quot;</span>&gt;</span><br>使用控制器方法形参获取参数<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-3-RequestParam获取"><a href="#2-3-RequestParam获取" class="headerlink" title="2.3@RequestParam获取"></a>2.3@RequestParam获取</h3><ul><li>required代表此参数是否必填,默认为true</li><li>defaultValue代表默认值,若没传参情况下默认获取指定默认值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRps&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRps</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;user_name&quot;,defaultValue = &quot;默认名称&quot;,required = false)</span> String username,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;secret&quot;,defaultValue = &quot;默认密码&quot;,required = true)</span> String password)</span>&#123;<br>    System.out.println(username);<br>    System.out.println(password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRps(user_name=&#x27;Cherry&#x27;,secret=123)&#125;&quot;</span>&gt;</span><br>@RequestParams测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-4实体类获取"><a href="#2-4实体类获取" class="headerlink" title="2.4实体类获取"></a>2.4实体类获取</h3><p>1.创建实体类<br>2.创建html参数名称需要和实体类一直<br>3.创建映射方法,把实体类作为形参<br>4.输出实体类对象测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-comment">//实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><span class="hljs-comment">//及其set,get,constructor,toString</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//控制器方法</span><br><span class="hljs-meta">@RequestMapping(&quot;/POJO&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index2</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-comment">//4.测试获取参数</span><br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;    <br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/POJO&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密  码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交参数&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring5 | MVC基础</title>
    <link href="/2022/10/21/SpringMVC/SpringMVC%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/21/SpringMVC/SpringMVC%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-SpringMVC概述"><a href="#1-SpringMVC概述" class="headerlink" title="1.SpringMVC概述"></a>1.SpringMVC概述</h2><ol><li>Spring的延续，主流JavaEE项目表述层开发的首选方案</li><li>三层架构分为表述层、业务逻辑层、数据访问层、表述层表示前台页面和后台servlet</li></ol><h3 id="1-1特点"><a href="#1-1特点" class="headerlink" title="1.1特点"></a>1.1特点</h3><ol><li>与IOC容器无缝对接</li><li>底层基于原生Servlet，通过强大的DispatherServlet(前端控制器)，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题全方位覆盖，提供全解决方案</li><li>可插拔式组件，需要使用进行配置即可</li></ol><h2 id="2-依赖准备"><a href="#2-依赖准备" class="headerlink" title="2.依赖准备"></a>2.依赖准备</h2><ol><li>SpringMVC项目基于Maven</li><li>除了IOC中提到的核心依赖外，还需要2.1的依赖</li><li>Tomcat的配置根据9和10自行切换依赖jar包，此处搭建环境为Tomcat9</li><li>注:添加打包方式，避免报500或404错误</li></ol><h3 id="2-1Maven依赖"><a href="#2-1Maven依赖" class="headerlink" title="2.1Maven依赖"></a>2.1Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--logback日志--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Tomcat9 servlet api--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Spring5和thymeleaf整合包--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2web-xml"><a href="#2-2web-xml" class="headerlink" title="2.2web.xml"></a>2.2web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在WEB_INF中的web.xml添加前端控制器dispatcherServlet用于对浏览器发送的请求统一处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置SpringMVC配置文件的位置和名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将前端控制器的初始化时间提前到服务器启动时--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- / 代表当前浏览器发送的所用请求,但不包括jsp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3Bean-xml"><a href="#2-3Bean-xml" class="headerlink" title="2.3Bean.xml"></a>2.3Bean.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.注解扫描组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;被扫描包路径&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--2.配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-测试代码"><a href="#3-测试代码" class="headerlink" title="3.测试代码"></a>3.测试代码</h2><h3 id="3-1HTML页面"><a href="#3-1HTML页面" class="headerlink" title="3.1HTML页面"></a>3.1HTML页面</h3><p><strong>主页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--根据Bean文件中配置的thymeleaf视图,创建templates文件夹--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--通过xml解析引入thymeleaf视图--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!--调用thymeleaf通过xml解析配合Bean文件实现页面跳转--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>target页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>target页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--跳转到的页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>target a target<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2Controller类"><a href="#3-2Controller类" class="headerlink" title="3.2Controller类"></a>3.2Controller类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-comment">// &quot;/&quot;--&gt;WEB-INFO/templates/index.html</span><br><br>    <span class="hljs-comment">// 通过springMVC配置文件中的thymeleaf视图来读取中间信息</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&quot;)</span> <span class="hljs-comment">//为这个方法创建映射关系</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">indexMethod</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//返回视图名称</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/target&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toTarget</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpirngMaven依赖</title>
    <link href="/2022/08/02/Spring5/SpringMaven%E4%BE%9D%E8%B5%96/"/>
    <url>/2022/08/02/Spring5/SpringMaven%E4%BE%9D%E8%B5%96/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spirng依赖"><a href="#1-Spirng依赖" class="headerlink" title="1.Spirng依赖"></a>1.Spirng依赖</h2><h3 id="1-1核心依赖"><a href="#1-1核心依赖" class="headerlink" title="1.1核心依赖"></a>1.1核心依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-core--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-beans--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-context--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2DAO依赖"><a href="#1-2DAO依赖" class="headerlink" title="1.2DAO依赖"></a>1.2DAO依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring-jdbc包括了一些如jdbcTemplate的工具类--&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-jdbc--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-tx--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3WEB即MVC依赖"><a href="#1-3WEB即MVC依赖" class="headerlink" title="1.3WEB即MVC依赖"></a>1.3WEB即MVC依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-web--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-webmvc--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--4.继承测试依赖--&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-test--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--注解依赖https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-MySQL依赖"><a href="#2-MySQL依赖" class="headerlink" title="2.MySQL依赖"></a>2.MySQL依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--druid线程池依赖--&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/com.alibaba/druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mysql依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-AspectJ依赖"><a href="#3-AspectJ依赖" class="headerlink" title="3.AspectJ依赖"></a>3.AspectJ依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.springframework/spring-aspects--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-Log4j依赖"><a href="#4-Log4j依赖" class="headerlink" title="4.Log4j依赖"></a>4.Log4j依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-web--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/com.lmax/disruptor--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lmax<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>disruptor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.slf4j/slf4j-api--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.slf4j/slf4j-simple--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spirng5 | AOP基础</title>
    <link href="/2022/07/27/Spring5/AOP%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/27/Spring5/AOP%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-AOP概述"><a href="#1-AOP概述" class="headerlink" title="1.AOP概述"></a>1.AOP概述</h2><ul><li>面向切面编程，在不修改源代码的情况下利用AOP对业务逻辑的各个部分进行隔离，达到低耦合性的效果</li><li>Spring框架一般是基于aspectJ实现AOP操作，Aspectj也是框架，但一般把两者结合进行AOP操作</li></ul><h3 id="1-1切入点表达式"><a href="#1-1切入点表达式" class="headerlink" title="1.1切入点表达式"></a>1.1切入点表达式</h3><ul><li>其作用是为了明确哪个类里面的哪个方法进行增强</li><li>语法结构:execution([权限修饰符][返回值类型][类全路径][方法名称][参数列表])<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以com.aop.Book为例 *代表所有的意思</span><br>excution(* com.aop.Book.add(..))  <span class="hljs-comment">//对此类里面的add方法进行增强</span><br>excution(* com.aop.Book.*(..))  <span class="hljs-comment">//对此类里面的所有方法进行增强</span><br>excution(* com.aop.*.*(..))  <span class="hljs-comment">//对aop包下的所有方法进行增强</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2动态代理"><a href="#1-2动态代理" class="headerlink" title="1.2动态代理"></a>1.2动态代理</h3><ol><li>创建一个接口定义一组方法及它的实现类</li><li>通过Proxy的newProxy方法获取代理类对象</li><li>定义一个类实现InvocationHandler接口</li><li>创建的是谁的对象，把谁传递进来，通过有参构造的方式</li><li>把需要增强的逻辑写在重写的invoke方法里</li><li>返回被增强的方法</li></ol><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//本类加载器</span><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">clr</span> <span class="hljs-operator">=</span> 本类类名称.class.getClassLoader();     <br><br><span class="hljs-comment">//被代理接口</span><br>Class[] interfaces = &#123;UserDao.class&#125;;  <br><br><span class="hljs-comment">//被代理接口实现类               </span><br><span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();       <br><br><span class="hljs-comment">//代理类             </span><br><span class="hljs-type">UserDaoProxy</span> <span class="hljs-variable">udp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao);          <br><br><span class="hljs-comment">//获取接口代理类对象</span><br><span class="hljs-type">UserDao</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (UserDao) Proxy.newProxyInstance(clr, interfaces, udp);<br>System.out.println(<span class="hljs-string">&quot;result:&quot;</span>+result.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p><strong>代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br>    <span class="hljs-comment">//1.把创建的是谁的对象，把谁传递进来</span><br>    <span class="hljs-comment">//有参数构造传递，可以为指定类或Object</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span>&#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-comment">//增强的逻辑写在invoke方法里面</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, </span><br><span class="hljs-params">    Method method, Object[] args)</span>&#123;<br>        <span class="hljs-comment">//返回被增强的方法</span><br>        <span class="hljs-keyword">return</span> method.invoke(obj, args);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3操作术语"><a href="#1-3操作术语" class="headerlink" title="1.3操作术语"></a>1.3操作术语</h3><ul><li>连接点:类中可以增强的方法</li><li>切入点:实际被增强的方法</li><li>通知(增强):实际增强的逻辑部分</li><li>分为:前置、后置、环绕、异常、最终通知</li><li>切面:通知应用到切入点的过程</li></ul><h2 id="2-AOP操作"><a href="#2-AOP操作" class="headerlink" title="2.AOP操作"></a>2.AOP操作</h2><h3 id="2-1通知注解"><a href="#2-1通知注解" class="headerlink" title="2.1通知注解"></a>2.1通知注解</h3><ol><li>有异常也执行(最终通知)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@After(value = &quot;切入点表达式&quot;)</span><br></code></pre></td></tr></table></figure></li><li>有异常就不执行了，方法返回结果后执行(后置通知)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value = &quot;切入点表达式&quot;)</span><br></code></pre></td></tr></table></figure></li><li>有异常时才执行(异常通知)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(value = &quot;切入点表达式)</span><span class="hljs-string">&quot;)</span><br></code></pre></td></tr></table></figure></li><li>配合ProceedingJoinPoint方法(环绕通知)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(value = &quot;切入点表达式&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;环绕前通知&quot;</span>);<br>    <span class="hljs-comment">//代表被增强的方法执行</span><br>    joinPoint.proceed();<br>    System.out.println(<span class="hljs-string">&quot;环绕后通知&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-2基于注解"><a href="#2-2基于注解" class="headerlink" title="2.2基于注解"></a>2.2基于注解</h3><p><strong>配置准备</strong></p><ol><li>创建xml文件引入名称空间</li><li>在xml中开启注解扫描和aspectJ生成代理对象</li><li>创建被增强类与增强类,添加@compment与@Aspect(仅增强类添加)</li><li>在增强类中创建方法,根据需求添加通知注解,并填入切入点表达式</li><li>使用junit进行测试</li></ol><p><strong>xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">//xml文件配置<br>//1.引入名称空间<br>xmlns:context        <br>xmlns:aop<br>//2.开启注解扫描<br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;类路径&quot;</span>/&gt;</span><br>//3.开启aspectJ生成代理对象<br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>实体类配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//被增强类</span><br><span class="hljs-meta">@Compment</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;show方法&#125; <br><span class="hljs-comment">//增强类</span><br><span class="hljs-meta">@Compment</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> UserProxy&#123;<br>        <span class="hljs-comment">//value里面为切入点表达式</span><br>        <span class="hljs-meta">@Before(value = &quot;execution(* com.User.show(..))&quot;)</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-comment">//增强类2 类名上注解同上</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentProxy</span> &#123;<br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.User.show(..))&quot;)</span><br>    <span class="hljs-meta">@Order(0)</span>     <span class="hljs-comment">//此注解设置优先级 数字小等级高</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我使用了order我优先&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>切入点抽取</strong></p><ul><li>当多个通知注解相同时可以使用切入点抽取注解</li><li>在通知注解value填入抽取注解的方法即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//相同的切入点抽取</span><br><span class="hljs-meta">@Pointcut(value =&quot;execution(* com.User.show(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userPoint</span><span class="hljs-params">()</span>&#123;&#125;;<br><br><span class="hljs-comment">//使用切入点抽取方法</span><br><span class="hljs-meta">@After(value = &quot;userPoint()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;最终通知&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@AfterReturning(value = &quot;userPoint()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AfterReturning</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-JDBCTemplete"><a href="#3-JDBCTemplete" class="headerlink" title="3.JDBCTemplete"></a>3.JDBCTemplete</h2><ol><li>org.springframework.jdbc.core.JdbcTemplate类是JDBC核心包中的中心类</li><li>它简化了JDBC的使用，并有助于避免常见的错误</li><li>它执行核心JDBC工作流，留下应用程序代码来提供SQL并提取结果</li></ol><h3 id="3-1依赖准备"><a href="#3-1依赖准备" class="headerlink" title="3.1依赖准备"></a>3.1依赖准备</h3><p><strong>Druid线程池和JDBC的Maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">1.引入名称空间context<br>2.开启组件扫描<br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;包路径&quot;</span>/&gt;</span><br>3.引入数据库连接<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druid&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/bank&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>4.jdbcTemplate对象<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;database&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入DataSource--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druid&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2创表语句"><a href="#3-2创表语句" class="headerlink" title="3.2创表语句"></a>3.2创表语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `book_info` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `money` <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">12</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><h3 id="3-3增加数据"><a href="#3-3增加数据" class="headerlink" title="3.3增加数据"></a>3.3增加数据</h3><p><strong>DAO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br>DAOImpl类<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into book_info values(?,?,?,?)&quot;</span>;<br>    <span class="hljs-type">int</span> add= jdbcTemplate.update(sql, book.getId(), book.getName(), book.getMoney(), book.getPassword());<br>    System.out.println(sql);<br>    System.out.println(<span class="hljs-string">&quot;添加成功:影响行数&quot;</span>+add);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span>        <span class="hljs-comment">//注入DAO</span><br><span class="hljs-keyword">private</span> BookDao bookDao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>&#123;<br>    bookDao.addBook(book);&#125;<br>功能Junit测试<br><span class="hljs-keyword">final</span> <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>book.setId(<span class="hljs-number">8</span>);<br>book.setName(<span class="hljs-string">&quot;背包十年&quot;</span>);<br>book.setMoney(<span class="hljs-number">39.5</span>);<br>book.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>bs.addBook(book);<br></code></pre></td></tr></table></figure><p><strong>读取xml文件建立数据库连接(增删改查都需要)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;druidConfig.xml&quot;</span>);<br><span class="hljs-keyword">final</span> <span class="hljs-type">BookService</span> <span class="hljs-variable">bs</span> <span class="hljs-operator">=</span> <br>context.getBean(<span class="hljs-string">&quot;bookService&quot;</span>, BookService.class);<br></code></pre></td></tr></table></figure><h3 id="3-4删除数据"><a href="#3-4删除数据" class="headerlink" title="3.4删除数据"></a>3.4删除数据</h3><p><strong>DAO 根据id删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">delBook</span><span class="hljs-params">(String id)</span>;<br>DaoImpl类<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delBook</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from book_info where id=?&quot;</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">del</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, id);<br>    System.out.println(<span class="hljs-string">&quot;删除成功:影响行数&quot;</span>+del);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span>    <span class="hljs-comment">//注入DAO</span><br><span class="hljs-keyword">private</span> BookDao bookDao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delBook</span><span class="hljs-params">(String id)</span>&#123;<br>    bookDao.delBook(id);<br>&#125;<br>Junit测试<br>bs.delBook(<span class="hljs-string">&quot;8&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-5修改数据"><a href="#3-5修改数据" class="headerlink" title="3.5修改数据"></a>3.5修改数据</h3><p><strong>DAO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span>;<br>DaoImpl类<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update book_info set name=?,money=?,password=? where id =?&quot;</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, book.getName(), book.getMoney(), book.getPassword(), book.getId());<br>    System.out.println(<span class="hljs-string">&quot;修改成功:影响行数&quot;</span>+update);<br>&#125;<br></code></pre></td></tr></table></figure><p>Service类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span>    <span class="hljs-comment">//注入DAO</span><br><span class="hljs-keyword">private</span> BookDao bookDao;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span>&#123;<br>    bookDao.updateBook(book)<br>&#125;<br>Junit测试<br><span class="hljs-keyword">final</span> <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>book2.setId(<span class="hljs-number">8</span>);<br>book2.setName(<span class="hljs-string">&quot;骆驼祥子&quot;</span>);<br>book2.setMoney(<span class="hljs-number">19.5</span>);<br>book2.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>bs.updateBook(book2);<br></code></pre></td></tr></table></figure><h3 id="3-6查询表记录数"><a href="#3-6查询表记录数" class="headerlink" title="3.6查询表记录数"></a>3.6查询表记录数</h3><p><strong>DAO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">queryCount</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//DAO Impl</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">queryCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from book_info&quot;</span>;<br>    <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryCount</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> bookQuery.queryCount();<br>    System.out.println(<span class="hljs-string">&quot;数据库共存在&quot;</span>+count+<span class="hljs-string">&quot;条数据&quot;</span>);<br>&#125;<br><span class="hljs-comment">//JunitTest</span><br>bs.queryCount();<br></code></pre></td></tr></table></figure><h3 id="3-7查询指定数据"><a href="#3-7查询指定数据" class="headerlink" title="3.7查询指定数据"></a>3.7查询指定数据</h3><p><strong>BeanPropertyRowMapper</strong></p><ol><li>将数据库查询结果转换为Java类对象</li><li>常应用于使用Spring的JdbcTemplate查询数据库</li><li>获取List结果列表，数据库表字段和实体类自动对应</li></ol><p><strong>DAO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询返回对象 根据id</span><br>Book <span class="hljs-title function_">findBookInfo</span><span class="hljs-params">(String id)</span>;<br><span class="hljs-comment">//查询返回集合</span><br>List&lt;Book&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//DAO Impl</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">findBookInfo</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from book_info where id=?&quot;</span>;<br>    <span class="hljs-comment">//RowMapper接口 根据返回值类型 实现类完成数据封装</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <br>    jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);<br>    <span class="hljs-keyword">return</span> book;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from book_info;&quot;</span>;<br>    <span class="hljs-keyword">final</span> List&lt;Book&gt; query = <br>    jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Book.class));<br>    <span class="hljs-keyword">return</span> query;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">findOne</span><span class="hljs-params">(String id)</span>&#123;<br>    <span class="hljs-keyword">return</span> bookQuery.findBookInfo(id);<br>&#125;<br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> bookQuery.findAll();<br>&#125;<br><span class="hljs-comment">//JunitTest</span><br><span class="hljs-comment">//查询返回对象</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">Book</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> bs.findOne(<span class="hljs-string">&quot;2&quot;</span>);<br>System.out.println(one);<br><br><span class="hljs-comment">//查询返回集合(所有数据)</span><br><span class="hljs-keyword">final</span> List&lt;Book&gt; allBook = bs.findAll();<br>allBook.forEach(System.out::println);<br></code></pre></td></tr></table></figure><h2 id="4-事务操纵"><a href="#4-事务操纵" class="headerlink" title="4.事务操纵"></a>4.事务操纵</h2><ol><li>事务的操纵一般写在Service层</li><li>事务的管理操纵分为编程式和声明式</li><li>声明式为常用方式其又分为注解方式和xml方式</li><li>Spring中事务的底层使用AOP原理</li></ol><h3 id="4-1事务API"><a href="#4-1事务API" class="headerlink" title="4.1事务API"></a>4.1事务API</h3><ul><li>提供了一个接口，代表事务管理器</li><li>此接口针对不同框架类型提供了不同的实现类</li><li>针对jdbc使用DataSourceTransactionManager类</li></ul><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/datasourceTransactionManager.png" alt="PlantTransactionManager针对不同数据库提供的管理器"></p><h3 id="4-2基于注解"><a href="#4-2基于注解" class="headerlink" title="4.2基于注解"></a>4.2基于注解</h3><p><strong>Bean文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">//基本配置:名称空间tx,context,aop,druid数据库连接池<br>//1.创建事务管理器<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TransactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    //<span class="hljs-comment">&lt;!--1.1注入数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druid&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>//2.开启事务注解<br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;TransactionManager&quot;</span>/&gt;</span><br>//3.在service层使用@Trasactional注解开启事务<br>//写在类面或方法名上,写在方法名上代表开启此方法事务<br></code></pre></td></tr></table></figure><p><strong>事务java类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-comment">//创建对象</span><br><span class="hljs-meta">@Transactional</span><span class="hljs-comment">//开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3基于xml"><a href="#4-3基于xml" class="headerlink" title="4.3基于xml"></a>4.3基于xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">//基本配置:名称空间tx,context,aop,druid数据库连接池<br>//1.创建事务管理器<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TransactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    //2.注入数据源<br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druid&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>//3.配置通知<br>&lt;tx:adviceid=&quot;txadvice&quot;&gt;<br><span class="hljs-comment">&lt;!--3.1配置事务参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-comment">&lt;!--3.2指定哪种规则的方法上面添加事务--&gt;</span><br>&lt;tx:methodname=&quot;transfer&quot;propagation=&quot;REQUIRED&quot;/&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--4.配置切入点与切面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-comment">&lt;!--4.1切入点--&gt;</span><br>&lt;aop:pointcutid=&quot;cut&quot;expression=&quot;execution(*affairs.service.UserService.*(..))&quot;/&gt;<br><span class="hljs-comment">&lt;!--4.2切面--&gt;</span><br>&lt;aop:advisoradvice-ref=&quot;txadvice&quot;pointcut-ref=&quot;cut&quot;/&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-事务参数配置"><a href="#5-事务参数配置" class="headerlink" title="5.事务参数配置"></a>5.事务参数配置</h2><p>在service添加@Transactional,所有配置都在此注解内</p><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/affairsparamsconfigs.png" alt="6种参数配置"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置使用</span><br><span class="hljs-meta">@Transactional(timeout = -1,propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)</span><br></code></pre></td></tr></table></figure><h3 id="5-1传播行为"><a href="#5-1传播行为" class="headerlink" title="5.1传播行为"></a>5.1传播行为</h3><ul><li>Propagation即为事务的传播行为</li><li>当一个事务方法被另一个事务方法调用时候,这个事务方法如何进行。</li></ul><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/spreadbehavior.png" alt="三种常用传播行为"></p><h3 id="5-2隔离级别"><a href="#5-2隔离级别" class="headerlink" title="5.2隔离级别"></a>5.2隔离级别</h3><ol><li>事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题</li><li>有三个读问题：脏读、不可重复读、虚（幻）读</li><li>脏读：一个未提交事务读取到另一个未提交事务的数据</li><li>不可重复读：一个未提交事务读取到另一提交事务修改数据</li><li>虚读：一个未提交事务读取到另一提交事务添加数据</li><li>解决：通过设置事务隔离级别，解决读问题</li></ol><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/affairsreadlevel.png" alt="隔离级别"></p><h3 id="5-3其他配置"><a href="#5-3其他配置" class="headerlink" title="5.3其他配置"></a>5.3其他配置</h3><p><strong>Timeout</strong><br>事务需要在一段时间内进行提交，如果不提交进行回滚<br>默认值为-1，设置单位为s</p><p><strong>ReadOnly</strong><br>默认为false,可以指定为true代表只读，不可做增删改查</p><p><strong>RollbackFor</strong> 出现哪些异常回滚</p><p><strong>NoRollbackFor</strong> 出现哪些异常不回滚</p><h2 id="6-新特性"><a href="#6-新特性" class="headerlink" title="6.新特性"></a>6.新特性</h2><ol><li>Spring5框架基于JDK8</li><li>自带通用日志封装，官网建议使用log4j2</li><li>@Nullable注解，可用在方法，属性或参数上，表示可为空</li><li>支持函数式风格GenericApplicationContext</li><li>整合Junit测试</li></ol><h3 id="6-1log4j2日志"><a href="#6-1log4j2日志" class="headerlink" title="6.1log4j2日志"></a>6.1log4j2日志</h3><ol><li>导入log4j依赖</li><li>创建log4j2.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输入日志信息到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制台日志输出格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">patternlayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM--dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--定义logger并引入appender,appender才会生效--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-2函数式风格"><a href="#6-2函数式风格" class="headerlink" title="6.2函数式风格"></a>6.2函数式风格</h3><ol><li>创建一个java类</li><li>创建测试方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建GenericApplicationContext对象</span><br><span class="hljs-type">GenericApplicationContext</span> <span class="hljs-variable">cont</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericApplicationContext</span>();<br><span class="hljs-comment">//2.调用cont中的方法对象注册</span><br>cont.refresh();<br><br><span class="hljs-comment">//Lambda表达式</span><br><span class="hljs-comment">//cont.registerBean(Lambda.class,() -&gt; new Lambda());</span><br><br><span class="hljs-comment">//方法引用</span><br>cont.registerBean(<span class="hljs-string">&quot;ltd&quot;</span>,Lambda.class, Lambda::<span class="hljs-keyword">new</span>);<br><span class="hljs-comment">//3.获取spring的注册对象</span><br><span class="hljs-type">Lambda</span> <span class="hljs-variable">ltd</span> <span class="hljs-operator">=</span> (Lambda) cont.getBean(<span class="hljs-string">&quot;ltd&quot;</span>);<br>ltd.info();<br></code></pre></td></tr></table></figure><strong>@Nullable</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示当前方法形参可为空</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">message</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String value)</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="6-3Junit4整合"><a href="#6-3Junit4整合" class="headerlink" title="6.3Junit4整合"></a>6.3Junit4整合</h3><p>通过Junit整合配置Auntowired注解可以减少代码量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="hljs-comment">//单元测试框架</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:Bean1.xml&quot;)</span>  <span class="hljs-comment">//加载配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest4</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService us;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//自动创建对象后直接调用方法</span><br>        us.transfer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-4Junit5整合"><a href="#6-4Junit5整合" class="headerlink" title="6.4Junit5整合"></a>6.4Junit5整合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ExtendWith(SpringExtension.class)//单元测试框架</span><br><span class="hljs-comment">//@ContextConfiguration(&quot;classpath:Bean1.xml&quot;) //加载配置文件</span><br><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:Bean1.xml&quot;)</span>   <span class="hljs-comment">//上面两个注解的结合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest5</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService us;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        us.transfer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring5</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spirng5 | IOC基础</title>
    <link href="/2022/07/21/Spring5/IOC%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/21/Spring5/IOC%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1.Spring概述"></a>1.Spring概述</h2><ol><li>轻量级开源的JavaEE框架</li><li>Spring的两大核心IOC，AOP</li><li>IOC控制反转，把创建对象的过程交给Spring管理</li><li>Aop面向切面，在不修改源代码的基础上增加功能</li><li>使用Spring降低代码的耦合度，简化开发</li></ol><h2 id="2-IOP概述"><a href="#2-IOP概述" class="headerlink" title="2.IOP概述"></a>2.IOP概述</h2><ul><li>控制反转，创建对象及其调用的过程都交给Spring去实现</li><li>常见的两种实现方式为xml解析或注解开发</li></ul><h3 id="2-1底层原理"><a href="#2-1底层原理" class="headerlink" title="2.1底层原理"></a>2.1底层原理</h3><ul><li>IOC思想基于IOC容器,IOC容器的底层就是对象工厂<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.xml配置文件,配置创建的对象</span><br>&lt;bean id=<span class="hljs-string">&quot;flag&quot;</span> class=<span class="hljs-string">&quot;com.User&quot;</span>&gt;&lt;/bean&gt;<br><span class="hljs-comment">//2.创建工厂类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//2.1 xml解析</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">classValue</span> <span class="hljs-operator">=</span> class属性值;<br>    <span class="hljs-comment">//2.2 反射创建对象返回</span><br>    Class&lt;?&gt; aClass = Class.forName(classValue);<br>    <span class="hljs-keyword">return</span> (User) aClass.newInstance();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-2加载配置接口"><a href="#2-2加载配置接口" class="headerlink" title="2.2加载配置接口"></a>2.2加载配置接口</h3><ul><li>ApplicationContext：BeanFactory的子接口，提供更丰富的功能，饿汉式</li><li>BeanFactory：Spring内部使用接口，加载配置文件不会创建对象，获取对象时才创建 懒汉式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//两个接口的主要实现类</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>();<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">acs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;xml文件&quot;</span>);<br><span class="hljs-comment">//获取配置创建的对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> acs.getBean(<span class="hljs-string">&quot;xml中配置的id值&quot;</span>, User.class);<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-Bean管理"><a href="#3-Bean管理" class="headerlink" title="3.Bean管理"></a>3.Bean管理</h2><ul><li>Spring创建对象和spring注入属性构成bean管理</li><li>两种管理方式：基于xml配置文件实现，基于注解方式实现</li></ul><h3 id="3-1xml注入格式"><a href="#3-1xml注入格式" class="headerlink" title="3.1xml注入格式"></a>3.1xml注入格式</h3><p><strong>使用set注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--entity类中属性需提供set方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;类标识&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类路径&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;属性名称&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注入属性值&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>有参构造注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;类标识&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类路径&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;属性名称&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注入属性值&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>通过P标签注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在头文件里引入p标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;Orders&quot;</span> <span class="hljs-attr">p:属性名称</span>=<span class="hljs-string">&quot;注入属性值&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--属性注入null值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;orderName&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入含有特殊符号的值:固定写法&lt;![CDATA[这里写值]]&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;orderAddress&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;南京&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2外部Bean"><a href="#3-2外部Bean" class="headerlink" title="3.2外部Bean"></a>3.2外部Bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;类标识&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;类路径&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">    name属性:类里面属性名称</span><br><span class="hljs-comment">    ref属性:userDao对象bean标签id值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.dao.UserDaoImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3内部Bean"><a href="#3-3内部Bean" class="headerlink" title="3.3内部Bean"></a>3.3内部Bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ltd.Staff&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--在当前对象内部引入另外一个对象的属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ltd.Department&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;人事部&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>级联赋值</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ltd.Staff&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;汤姆&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--通过ref引入外部bean直接进行赋值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--优先使用内部标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ltd.Department&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;研发部&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4注入属性集合"><a href="#3-4注入属性集合" class="headerlink" title="3.4注入属性集合"></a>3.4注入属性集合</h3><p><strong>集合与数组类型注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--数组与集合参数注入格式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;类中属性名称&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">数组用array</span> <span class="hljs-attr">集合用list或set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>属性值<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    &lt;/array|list|set&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Map集合书写格式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Subject&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;爬虫&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Python&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>引用数据类型注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courseList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过ref标签引入course对象 可多个--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;fen1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fen1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collection.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;course_Name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;线性代数&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>提取集合注入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--名称空间为util xmlns和xsi下都需要添加--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util </span></span><br><span class="hljs-string"><span class="hljs-tag"> http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.提取集合注入部分--&gt;</span><br><span class="hljs-comment">&lt;!--需要在配置中引入名称空间--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>国富论<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>挪威的森林<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--2.提取list集合类型属性注入使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collection.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4.作用域"></a>4.作用域</h2><ul><li>默认bean创建为单例模式</li><li>若需设置为多实例模式只需在bean标签中，添加scope属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;略&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;略&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;填4.1中的四种值&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-1Scope值"><a href="#4-1Scope值" class="headerlink" title="4.1Scope值"></a>4.1Scope值</h3><ol><li>singleton，单例，表示通过Spring容器获取的对象是唯一的，是默认值</li><li>prototype，原型，表示通过Spring容器获取的对象是不同的</li><li>request，请求，表示在异常HTTP请求内有效</li><li>session，会话，表示在一个用户会话内有效</li></ol><h3 id="4-2使用场景"><a href="#4-2使用场景" class="headerlink" title="4.2使用场景"></a>4.2使用场景</h3><ul><li>request和session一般用于web项目</li><li>singleton模式下，只要加载IOC容器，不管是否从IOC种取出bean,配置文件中的bean都会被创建，而且只会创建一个对象</li><li>prototype模式下，如果不从IOC中取出bean,则不创建对象，取一次bean,就会创建一个对象</li></ul><h2 id="5-外部属性文件"><a href="#5-外部属性文件" class="headerlink" title="5.外部属性文件"></a>5.外部属性文件</h2><ol><li>以数据库线程池druid为例</li><li>首先配置名称空间context</li><li>通过名称空间获取配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;配置文件&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--bean文件中的propertiy的value格式为$&#123;配置文件中属性名称&#125;--&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="5-1properties文件"><a href="#5-1properties文件" class="headerlink" title="5.1properties文件"></a>5.1properties文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">druid.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/bank</span><br><span class="hljs-attr">druid.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">druid.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h3 id="5-2xml配置文件"><a href="#5-2xml配置文件" class="headerlink" title="5.2xml配置文件"></a>5.2xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;properties文件&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidII&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.driverClassName&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;druid.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-生命周期"><a href="#6-生命周期" class="headerlink" title="6.生命周期"></a>6.生命周期</h2><ol><li>通过构造器创建bean实例</li><li>为bean的属性设置值和对其他bean引入(设置set方法)</li><li>把bean实例传给bean后置处理器的方法postProcessBeforeInitalization</li><li>调用bean的初始方法</li><li>把bean实例传给bean后置处理器的方法postProcessAfterInitalization</li><li>对象获取到，bean可以使用</li><li>容器关闭时，调用bean的销毁方法(销毁方法需进行配置)</li></ol><h3 id="6-1后置处理器"><a href="#6-1后置处理器" class="headerlink" title="6.1后置处理器"></a>6.1后置处理器</h3><ol><li>让一个类实现BeanPostProcessor接口，重写里面的方法就得到了一个后置处理器</li><li>postProcessBeforeInitalization方法在初始化前执行</li><li>postProcessAfterInitalization方法在初始化后执行</li></ol><h2 id="7-注解注入"><a href="#7-注解注入" class="headerlink" title="7.注解注入"></a>7.注解注入</h2><ul><li>Spring针对bean管理中创建对象提供注解</li><li>四个注解功能一样，都可以用来创建bean实例</li><li>@Component    @Service</li><li>@Controller @Repository</li></ul><h3 id="7-1对象注入"><a href="#7-1对象注入" class="headerlink" title="7.1对象注入"></a>7.1对象注入</h3><ol><li>beans标签中引用名称空间context</li><li>开启组件扫描,可以使用上级目录,或用逗号隔开<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;context:component-scanbase-package=&quot;com&quot;/&gt;<br></code></pre></td></tr></table></figure></li><li>在需要创建对象的类上面添加四种注解任意一种</li><li>注解中value值可不写默认为类名(首字母会小写)</li><li>使用junit测试使用可以运行成功</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--两者等价--&gt;</span> <br>@Repository(value = &quot;helloSpring&quot;) <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloSpring&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.class1.HelloSpring&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--了解内容--&gt;</span><br><span class="hljs-comment">&lt;!--设置组件扫面仅包含指定注解 自己配置filter--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--设置组件扫面不扫描包含指定注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2属性注入"><a href="#7-2属性注入" class="headerlink" title="7.2属性注入"></a>7.2属性注入</h3><ul><li>@Autowired 根据属性类型进行自动装配</li><li>@Qualifier 根据属性名称进行注入</li><li>@Resource 两者皆可注入</li><li>注:@Resource和以上两者不同在于它为javax包下,若不存在需手动导入包或maven依赖</li></ul><p>entity实现类及其接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;&#125;<br><span class="hljs-comment">//接口实现类1</span><br><span class="hljs-meta">@Component(value = &quot;student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>;<br><span class="hljs-comment">//接口实现类2</span><br><span class="hljs-meta">@Component(value = &quot;userDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>;<br></code></pre></td></tr></table></figure><p>属性注入使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据类型注入使用注解无需使用set方法</span><br><span class="hljs-comment">//Qualifier需搭配Autowired使用 一个接口存在多个实现类用于指定具体实现类</span><br><span class="hljs-meta">@Autowired</span>                        <br><span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span>  <br><span class="hljs-keyword">private</span> UserDao userDao;<br><br><span class="hljs-comment">//相当于autowired和qualifier结合 指定name情况下根据属性名称 不指定情况下根据类型</span><br><span class="hljs-meta">@Resource(name = &quot;student&quot;)</span>        <br><span class="hljs-keyword">private</span> UserDao student;<br></code></pre></td></tr></table></figure><p>普通属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;窗前明月光,疑是地上霜&quot;)</span>       <br><span class="hljs-keyword">private</span> String line_chinese;<br></code></pre></td></tr></table></figure><h3 id="7-3完全注解开发"><a href="#7-3完全注解开发" class="headerlink" title="7.3完全注解开发"></a>7.3完全注解开发</h3><p>通过创建一个java类添加注解文件来实现替代掉XML文件</p><p>基于xml开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;helloSpring&quot;</span> class=<span class="hljs-string">&quot;类路径&quot;</span>/&gt;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">acs</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;xxx.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>完全基于注解开发效果同上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;指定包路径&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;&#125;<br><br><span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring5</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Web会话层</title>
    <link href="/2022/07/12/JavaWeb/%E4%BC%9A%E8%AF%9D%E5%B1%82%E9%9D%A2/"/>
    <url>/2022/07/12/JavaWeb/%E4%BC%9A%E8%AF%9D%E5%B1%82%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-会话概述"><a href="#1-会话概述" class="headerlink" title="1.会话概述"></a>1.会话概述</h2><p>用户打开浏览器，点击了很多个url，访问了多个web资源，关闭浏览器，这个过程就是会话</p><h3 id="1-1网站怎么证明你来过"><a href="#1-1网站怎么证明你来过" class="headerlink" title="1.1网站怎么证明你来过"></a>1.1网站怎么证明你来过</h3><ul><li>Cookie服务端会给客户端发一个<code>信件</code> 客户端下次再访问服务端携带<code>信件</code>即可</li><li>Session服务端对客户端做标记，下次客户端再访问，通过标记即可匹配<br><img src="https://img-blog.csdnimg.cn/0838e3d393774a799ba7bec40a5e8d91.png#pic_center"></li></ul><h3 id="1-2Cookie和session区别"><a href="#1-2Cookie和session区别" class="headerlink" title="1.2Cookie和session区别"></a>1.2Cookie和session区别</h3><ul><li>Cookie把数据写给用户的浏览器保存(可保存多个)</li><li>Session把数据写给用户自己独有的SessionId</li><li>Server保存(保存重要的信息,减少Server资源浪费),Session由服务器创建</li><li>Cookie的构造器只能携带String类型参数,而Session可携带Object类型参数</li></ul><h2 id="2-Cookie"><a href="#2-Cookie" class="headerlink" title="2.Cookie"></a>2.Cookie</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.传给客户端一个cookie</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;携带参数&quot;</span>);<br><span class="hljs-comment">//设置cookie有效期 单位/s</span><br>cookie.setMaxAge(<span class="hljs-number">600</span>);<br>resp.addCookie(cookie);<br><br><span class="hljs-comment">//2.从客户端获取cookie</span><br>Cookie[] cookies = req.getCookies();<br><br><span class="hljs-comment">//3.获取客户端cookie里携带的参数</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br><span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>)&#123;<br>    out.write(cookie.getValue());<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    out.write(<span class="hljs-string">&quot;cookie 不存在&quot;</span>);<br>&#125;<br><span class="hljs-comment">//需要强制停止cookie时候,只需新建一个实现了servlet的类</span><br><span class="hljs-comment">//再响应一个setMaxAge为0的cookie到客户端即可</span><br><span class="hljs-comment">//两个cookie的构造器形参要相同</span><br></code></pre></td></tr></table></figure><h2 id="3-Session"><a href="#3-Session" class="headerlink" title="3.Session"></a>3.Session</h2><p><strong>session创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取一个session</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br><span class="hljs-comment">//session可以携带Object类型</span><br>session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBean</span>(<span class="hljs-string">&quot;李华&quot;</span>,<span class="hljs-number">29</span>));<br><br><span class="hljs-comment">//每个session都有自己唯一的sessionID</span><br><span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> session.getId();<br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br><br><span class="hljs-comment">//通过inNew()判断此session的新旧</span><br><span class="hljs-keyword">if</span> (session.isNew())&#123;<br>    writer.print(<span class="hljs-string">&quot;create success!&quot;</span>+id);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    writer.print(<span class="hljs-string">&quot;session is already!&quot;</span>+id);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取session</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//把获取的数据响应到前端页面</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>out.print(name)<br></code></pre></td></tr></table></figure><p><strong>停止session</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.手动停止(新建一个类调用invalidate方法)</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br><span class="hljs-comment">//移除session参数</span><br>session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>session.invalidate();<br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>out.print(<span class="hljs-string">&quot;&lt;H1&gt;session remove success please refresh&lt;/H1&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">//2.通过xml<br><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置session的失效时间 单位/min--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-Filter"><a href="#4-Filter" class="headerlink" title="4.Filter"></a>4.Filter</h2><ul><li>过滤器实际上就是对web资源进行拦截，做一些处理后再交给下一个过滤器或servlet处理。</li><li>通常都是用来拦截request进行处理的，也可以对返回的response进行拦截处理</li><li>应用场景：自动登录，统一设置编码格式，访问权限控制，敏感字符过滤等<br><img src="https://img-blog.csdnimg.cn/e948552787ec4c808a37ef3fad4499f9.png#pic_center"></li></ul><h3 id="4-1统一编码"><a href="#4-1统一编码" class="headerlink" title="4.1统一编码"></a>4.1统一编码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一个类实现了Filter且实现它的方法就成了一个过滤器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterBasic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span>&#123;<br>        <span class="hljs-comment">//会在服务器启动的同时触发</span><br>        System.out.println(<span class="hljs-string">&quot;web server init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//主要是对request和response进行一些处理</span><br>    <span class="hljs-comment">//然后交给下一个过滤器或Servlet处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain fc)</span>&#123;<br>        <span class="hljs-comment">//解决乱码问题</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">//后面可能会有其他的过滤器，保过滤器继续同行</span><br>        fc.doFilter(req,resp);<br>    &#125;<br><br>    <span class="hljs-comment">//当服务器关闭过滤器即销毁</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;filter destroyed&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//此类需要在web.xml中进行注册</span><br><span class="hljs-comment">//&lt;filter&gt;和&lt;filter-Mapping&gt;标签</span><br><span class="hljs-comment">//&lt;url-patterns&gt;下写需要过滤的路径</span><br></code></pre></td></tr></table></figure><h2 id="5-MVC整体结构"><a href="#5-MVC整体结构" class="headerlink" title="5.MVC整体结构"></a>5.MVC整体结构</h2><p><img src="https://img-blog.csdnimg.cn/abd91e9359db4287949a66876b4ebad6.png#pic_center" alt="MVC架构图"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb基础</title>
    <link href="/2022/07/12/JavaWeb/JavaWeb%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/12/JavaWeb/JavaWeb%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-ServletContext"><a href="#1-ServletContext" class="headerlink" title="1.ServletContext"></a>1.ServletContext</h2><ol><li>web容器在启动时候，它为每个web程序都创建了一个对应的ServletContext对象。</li><li>ServletContext对象代表了当前的web应用。</li><li>通过ServletContext接口做如下操作,此外还有很多见源码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-comment">//共享资源</span><br>context.getAttribute();<br><span class="hljs-comment">//读取资源文件</span><br>context.getResourceAsStream();<br><span class="hljs-comment">//请求转发</span><br>context.getRequestDispatcher();<br><span class="hljs-comment">//获取初始化参数</span><br>context.getInitParameter();<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-1共享数据"><a href="#1-1共享数据" class="headerlink" title="1.1共享数据"></a>1.1共享数据</h3><p><strong>共享类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.this调用ServletContext对象用于设置各种资源</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;李晓明&quot;</span>;<br><span class="hljs-comment">//设置义一个属性以键值对的方式，作为共享资源</span><br>con.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br></code></pre></td></tr></table></figure><p><strong>接收共享类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.同样获取ServletContext对象</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-comment">//2.通过键获取值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) con.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-comment">//3.把数据在网页输出</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>out.println(username);<br></code></pre></td></tr></table></figure><h3 id="1-2读取资源文件"><a href="#1-2读取资源文件" class="headerlink" title="1.2读取资源文件"></a>1.2读取资源文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">sct</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-comment">//1.通过context获取一个流对象，指定配置文件在web中的路径</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> sct.getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/jdbc.properties&quot;</span>);<br><span class="hljs-comment">//2.读取流文件</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.load(in);<br><span class="hljs-comment">//3.输出到前端页面</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>out.println(prop.getProperty(<span class="hljs-string">&quot;driverClassName&quot;</span>));<br>out.println(prop.getProperty(<span class="hljs-string">&quot;username&quot;</span>));<br>out.println(prop.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="1-3请求转发-常用"><a href="#1-3请求转发-常用" class="headerlink" title="1.3请求转发(常用)"></a>1.3请求转发(常用)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取Context对象</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">sct</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-comment">//2.转发的请求路径</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> sct.getRequestDispatcher(<span class="hljs-string">&quot;/指定路径文件&quot;</span>);<br><span class="hljs-comment">//3.发出上面的指令,通过本类会直接跳到/指定路径资源页面下 &#x27;/&#x27; 代表当前工程！</span><br>rd.forward(req,resp);<br><span class="hljs-comment">//另外一种方式直接使用doGet/doPost里面的请求形参</span><br>req.getRequestDispatcher(<span class="hljs-string">&quot;/指定路径文件&quot;</span>).forward(req,resp);<br></code></pre></td></tr></table></figure><h3 id="1-4获取初始化参数-了解"><a href="#1-4获取初始化参数-了解" class="headerlink" title="1.4获取初始化参数(了解)"></a>1.4获取初始化参数(了解)</h3><p><strong>获取类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取context对象</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">sct</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><span class="hljs-comment">//2.获取xml中配置的初始参数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">ipr</span> <span class="hljs-operator">=</span> sct.getInitParameter(<span class="hljs-string">&quot;xml中的标识&quot;</span>);<br><span class="hljs-comment">//3.输出数据到网页</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>out.println(ipr);<br></code></pre></td></tr></table></figure><p><strong>xml参数</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>一个标识<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>具体参数<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-Response"><a href="#2-Response" class="headerlink" title="2.Response"></a>2.Response</h2><p><strong>简单的文件下载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.两种方式获得文件路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">localPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;文件绝对路径 taget下!&quot;</span>;<br><span class="hljs-comment">//通过context获取的路径在tomcat包下，并非我们的web目录下！</span><br><span class="hljs-comment">//String localPath = this.getServletContext().getRealPath(&quot;/中国代码.jpg&quot;);</span><br>System.out.println(<span class="hljs-string">&quot;控制台:获取文本路径&quot;</span>+localPath);<br><br><span class="hljs-comment">//2.下载的文件名是啥 通过String方法截取</span><br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> localPath.substring(localPath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>)+<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//3.让浏览器支持(Content-Disposition)我们要下载的东西,使用URLEncoder设置文件名称不乱码</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename,<span class="hljs-string">&quot;utf-8&quot;</span>));<br><br><span class="hljs-comment">//4.下载文件的输入流</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fsm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(localPath);<br><br><span class="hljs-comment">//5.获取输出流对象</span><br><span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">serverOSM</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br><br><span class="hljs-comment">//6.缓冲区</span><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">//把文件写入缓冲区，使用输出流把数据发送到客户端</span><br><span class="hljs-keyword">while</span> ((len = fsm.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>serverOSM.write(bytes,<span class="hljs-number">0</span>,len);<br>&#125;<br><span class="hljs-comment">//7.释放流[略]</span><br></code></pre></td></tr></table></figure><h2 id="3-Request"><a href="#3-Request" class="headerlink" title="3.Request"></a>3.Request</h2><h3 id="3-1前后端交互"><a href="#3-1前后端交互" class="headerlink" title="3.1前后端交互"></a>3.1前后端交互</h3><p>后端 处理数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.处理请求</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">pass</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-comment">//处理多数据,如前端的checkbox 使用数组元素</span><br>String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobbies&quot;</span>);<br><br><span class="hljs-comment">//2.反馈信息到前端</span><br><span class="hljs-comment">//方式1.重定向</span><br><span class="hljs-comment">//resp.sendRedirect(&quot;/rt/success.jsp&quot;);</span><br><span class="hljs-comment">//方式2.通过请求转发 /就代表当前项目无需再写具体路径</span><br>req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);<br></code></pre></td></tr></table></figure><p>前端 登录页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span><br>    &lt;%--这里提交的路径，需要寻找到项目的类路径--%&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        爱好<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Girls&quot;</span>&gt;</span>Girls<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Code&quot;</span>&gt;</span>Code<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Math&quot;</span>&gt;</span>Math<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Tinnies&quot;</span>&gt;</span>Tinnies<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--success.jsp页面可以随便写一句话--&gt;</span><br></code></pre></td></tr></table></figure><p>后端在xml中的配置 前端读取url-pattern</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>qingqiu.LoginCdx<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2重定向和转发"><a href="#3-2重定向和转发" class="headerlink" title="3.2重定向和转发"></a>3.2重定向和转发</h3><p><strong>两者都可以实现跳转页面</strong></p><p><strong>重定向</strong></p><ol><li>就是通过各种方法将各种网络请求重新定个方向转到其它位置</li><li>由浏览器端进行的页面跳转</li><li>重定向的时候，url栏会发生变化 302</li><li>resp.sendRedirect(“具体路径”);</li></ol><p><strong>转发</strong></p><ol><li>由服务器端进行的页面跳转。</li><li>请求转发：一种在服务器内部的资源跳转方式。</li><li>请求转发时候，url栏不产生变化 307</li><li>req.getRequestDispatcher(“具体路径”).forward(req,resp)</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文件上传功能</title>
    <link href="/2022/07/12/JavaWeb/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/07/12/JavaWeb/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="1-实现原理图"><a href="#1-实现原理图" class="headerlink" title="1.实现原理图"></a>1.实现原理图</h2><p><img src="https://img-blog.csdnimg.cn/9fa4ce2cb28f4fd08a99e08d5d5a2d18.jpeg#pic_center"></p><h2 id="2-依赖jar包"><a href="#2-依赖jar包" class="headerlink" title="2.依赖jar包"></a>2.依赖jar包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--若导入不成功,可去Maven repo中搜索--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-后端代码"><a href="#3-后端代码" class="headerlink" title="3.后端代码"></a>3.后端代码</h2><ul><li>实现HttpServlet且重写doPost的Java类,放入如下代码</li><li>不用doGet因为Get仅能携带很小的数据</li><li>功能测试基于Tomcat9，Tomcat10部署存在路径问题</li></ul><h3 id="3-1判断且创建目录"><a href="#3-1判断且创建目录" class="headerlink" title="3.1判断且创建目录"></a>3.1判断且创建目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断上传的文件普通表单还是带文件的表单</span><br><span class="hljs-comment">// 上传文件使用post 不限制文件大小</span><br><span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;<br>    <span class="hljs-keyword">return</span>;<span class="hljs-comment">//终止方法运行,说明这是一个普通的表单,直接返回</span><br>&#125;<br><br><span class="hljs-comment">//创建上传文件的保存路径,建议在WEB-INF路径下,安全,用户无法直接访间上传的文件;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uploadPath</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">uploadFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadPath);<br><span class="hljs-keyword">if</span> (!uploadFile.exists())&#123;<br>    uploadFile.mkdir(); <span class="hljs-comment">//创建这个目录</span><br>&#125;<br><br><span class="hljs-comment">// 创建上传文件的保存路径，建议在WEB-INF路径下，安全，用户无法直接访问上传的文件</span><br><span class="hljs-type">String</span> <span class="hljs-variable">tmpPath</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/tmp&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(tmpPath);<br><span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>    file.mkdir();<span class="hljs-comment">//创建临时目录</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2处理上传文件"><a href="#3-2处理上传文件" class="headerlink" title="3.2处理上传文件"></a>3.2处理上传文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一般都需要通过流来获取,常用request, getInputstream(),原生态的文件上传流获取,十分麻烦</span><br><span class="hljs-comment">// 建议使用 Apache的文件上传组件来实现, common-fileupload,commons-io组件;</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 创建DiskFileItemFactory对象，处理文件路径或者大小限制</span><br>    <span class="hljs-type">DiskFileItemFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> getDiskFileItemFactory(file);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * //通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件 factory.setSizeThreshold(1024 *</span><br><span class="hljs-comment">        * 1024); //缓存区大小为1M factory.setRepository (file);//临时目录的保存目录,需要一个File</span><br><span class="hljs-comment">        */</span><br><br>    <span class="hljs-comment">// 2、获取ServletFileUpload</span><br>    <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">upload</span> <span class="hljs-operator">=</span> getServletFileUpload(factory);<br><br>    <span class="hljs-comment">// 3、处理上传文件</span><br>    <span class="hljs-comment">// 把前端请求解析，封装成FileItem对象，需要从ServletFileUpload对象中获取</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> uploadParseRequest(upload, request, uploadPath);<br><br>    <span class="hljs-comment">// Servlet请求转发消息</span><br>    System.out.println(msg);<br>    <span class="hljs-keyword">if</span>(msg == <span class="hljs-string">&quot;文件上传成功!&quot;</span>) &#123;<br>        <span class="hljs-comment">// Servlet请求转发消息</span><br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,msg);<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;info.jsp&quot;</span>).forward(request, response);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        msg =<span class="hljs-string">&quot;请上传文件&quot;</span>;<br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,msg);<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;info.jsp&quot;</span>).forward(request, response);<br>    &#125;<br><br>&#125; <span class="hljs-keyword">catch</span> (FileUploadException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3封装类"><a href="#3-3封装类" class="headerlink" title="3.3封装类"></a>3.3封装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DiskFileItemFactory <span class="hljs-title function_">getDiskFileItemFactory</span><span class="hljs-params">(File file)</span> &#123;<br>    <span class="hljs-type">DiskFileItemFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>();<br>    <span class="hljs-comment">// 通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件中;</span><br>    factory.setSizeThreshold(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<span class="hljs-comment">// 缓冲区大小为1M</span><br>    factory.setRepository(file);<span class="hljs-comment">// 临时目录的保存目录,需要一个file</span><br>    <span class="hljs-keyword">return</span> factory;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServletFileUpload <span class="hljs-title function_">getServletFileUpload</span><span class="hljs-params">(DiskFileItemFactory factory)</span> &#123;<br>    <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">upload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(factory);<br>    <span class="hljs-comment">// 监听上传进度</span><br>    upload.setProgressListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressListener</span>() &#123;<br><br>        <span class="hljs-comment">// pBYtesRead:已读取到的文件大小</span><br>        <span class="hljs-comment">// pContextLength:文件大小</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">long</span> pBytesRead, <span class="hljs-type">long</span> pContentLength, <span class="hljs-type">int</span> pItems)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;总大小：&quot;</span> + pContentLength + <span class="hljs-string">&quot;已上传：&quot;</span> + pBytesRead);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 处理乱码问题</span><br>    upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">// 设置单个文件的最大值</span><br>    upload.setFileSizeMax(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>);<br>    <span class="hljs-comment">// 设置总共能够上传文件的大小</span><br>    <span class="hljs-comment">// 1024 = 1kb * 1024 = 1M * 10 = 10м</span><br><br>    <span class="hljs-keyword">return</span> upload;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">uploadParseRequest</span><span class="hljs-params">(ServletFileUpload upload, HttpServletRequest request, String uploadPath)</span><br>        <span class="hljs-keyword">throws</span> FileUploadException, IOException &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// 把前端请求解析，封装成FileItem对象</span><br>    List&lt;FileItem&gt; fileItems = upload.parseRequest(request);<br>    <span class="hljs-keyword">for</span> (FileItem fileItem : fileItems) &#123;<br>        <span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;<span class="hljs-comment">// 判断上传的文件是普通的表单还是带文件的表单</span><br>            <span class="hljs-comment">// getFieldName指的是前端表单控件的name;</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> fileItem.getFieldName();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">// 处理乱码</span><br>            System.out.println(name + <span class="hljs-string">&quot;: &quot;</span> + value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 判断它是上传的文件</span><br><br>            <span class="hljs-comment">// ============处理文件==============</span><br><br>            <span class="hljs-comment">// 拿到文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">uploadFileName</span> <span class="hljs-operator">=</span> fileItem.getName();<br>            System.out.println(<span class="hljs-string">&quot;上传的文件名: &quot;</span> + uploadFileName);<br>            <span class="hljs-keyword">if</span> (uploadFileName.trim().equals(<span class="hljs-string">&quot;&quot;</span>) || uploadFileName == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 获得上传的文件名/images/girl/paojie.png</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 获得文件的后缀名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileExtName</span> <span class="hljs-operator">=</span> uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                * 如果文件后缀名fileExtName不是我们所需要的 就直按return.不处理,告诉用户文件类型不对。</span><br><span class="hljs-comment">                */</span><br><br>            System.out.println(<span class="hljs-string">&quot;文件信息[件名: &quot;</span> + fileName + <span class="hljs-string">&quot; ---文件类型&quot;</span> + fileExtName + <span class="hljs-string">&quot;]&quot;</span>);<br>            <span class="hljs-comment">// 可以使用UID（唯一识别的通用码),保证文件名唯</span><br>            <span class="hljs-comment">// 0UID. randomUUID(),随机生一个唯一识别的通用码;</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">uuidPath</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>            <span class="hljs-comment">// ================处理文件完毕==============</span><br><br>            <span class="hljs-comment">// 存到哪? uploadPath</span><br>            <span class="hljs-comment">// 文件真实存在的路径realPath</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> uploadPath + <span class="hljs-string">&quot;/&quot;</span> + uuidPath;<br>            <span class="hljs-comment">// 给每个文件创建一个对应的文件夹</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">realPathFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(realPath);<br>            <span class="hljs-keyword">if</span> (!realPathFile.exists()) &#123;<br>                realPathFile.mkdir();<br>            &#125;<br>            <span class="hljs-comment">// ==============存放地址完毕==============</span><br><br><br>            <span class="hljs-comment">// 获得文件上传的流</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> fileItem.getInputStream();<br>            <span class="hljs-comment">// 创建一个文件输出流</span><br>            <span class="hljs-comment">// realPath =真实的文件夹;</span><br>            <span class="hljs-comment">// 差了一个文件;加上翰出文件的名产&quot;/&quot;+uuidFileName</span><br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(realPath + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br><br>            <span class="hljs-comment">// 创建一个缓冲区</span><br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<br>            <span class="hljs-comment">// 判断是否读取完毕</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 如果大于0说明还存在数据;</span><br>            <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>                fos.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            <span class="hljs-comment">// 关闭流</span><br>            fos.close();<br>            inputStream.close();<br><br>            msg = <span class="hljs-string">&quot;文件上传成功!&quot;</span>;<br>            fileItem.delete(); <span class="hljs-comment">// 上传成功,清除临时文件</span><br>            <span class="hljs-comment">//=============文件传输完成=============</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-前端代码"><a href="#4-前端代码" class="headerlink" title="4.前端代码"></a>4.前端代码</h2><h3 id="4-1登录界面"><a href="#4-1登录界面" class="headerlink" title="4.1登录界面"></a>4.1登录界面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$Title$<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/uploads.do&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>      上传用户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2跳转后页面"><a href="#4-2跳转后页面" class="headerlink" title="4.2跳转后页面"></a>4.2跳转后页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        &lt;%=request.getAttribute(&quot;msg&quot;)%&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3web-xml配置"><a href="#4-3web-xml配置" class="headerlink" title="4.3web.xml配置"></a>4.3web.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.servlet.FileServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/uploads.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装使用</title>
    <link href="/2022/07/04/JavaWeb/Maven%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/04/JavaWeb/Maven%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Maven配置"><a href="#1-Maven配置" class="headerlink" title="1.Maven配置"></a>1.Maven配置</h2><h3 id="1-1操作步骤"><a href="#1-1操作步骤" class="headerlink" title="1.1操作步骤"></a>1.1操作步骤</h3><ol><li><a href="https://maven.apache.org/">Apache Maven Download</a></li><li><a href="https://maven.apache.org/">Apache Maven Repository</a></li><li>解压zip文件到指定目录下</li><li>修改conf目录下的setting.xml</li><li>添加本地仓库地址用于存储类库</li><li>添加阿里云镜像快速下载类库</li><li>添加Maven到环境变量,cmd运行mvn -v跳出版本号配置成功</li></ol><h3 id="1-2修改setting-xml"><a href="#1-2修改setting-xml" class="headerlink" title="1.2修改setting.xml"></a>1.2修改setting.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--阿里云镜像--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-comment">&lt;!--本地仓库地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>仓库文件夹<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3创建Maven工程"><a href="#1-3创建Maven工程" class="headerlink" title="1.3创建Maven工程"></a>1.3创建Maven工程</h3><ol><li>IDEA中左边选择maven项目</li><li>右边勾选create from archetype</li><li>选择maven-archetype-webapp使用模板创建web工程</li><li>Groupid组名一般由公司和域名组成</li><li>Artifactid项目表示名</li><li>Version版本号默认即可</li><li>选择maven路径和seeting.xml以及repository路径</li></ol><h3 id="1-4pom-xml"><a href="#1-4pom-xml" class="headerlink" title="1.4pom.xml"></a>1.4pom.xml</h3><p>在Maven工程下pom作为当前工程的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--头文件信息默认不动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>top.kinoz<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Maven_Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--子模块--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>子模块名字<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-comment">&lt;!--里面一般写依赖jar包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>配置信息一般去Maven仓库找<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--因为Maven默认jdk1.5,指定jdk版本便于识别--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>当前jdk版本<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>当前jdk版本<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-Tomcat配置"><a href="#2-Tomcat配置" class="headerlink" title="2.Tomcat配置"></a>2.Tomcat配置</h2><h3 id="2-2操作步骤"><a href="#2-2操作步骤" class="headerlink" title="2.2操作步骤"></a>2.2操作步骤</h3><ol><li><a href="https://tomcat.apache.org/">Apache Tomcat Download</a></li><li>解压zip文件到指定目录下</li><li>在bin目录下双击startup.bat即可启动</li><li>浏览器访问localhost:8080端口即成功</li></ol><h3 id="2-2部署到IDEA"><a href="#2-2部署到IDEA" class="headerlink" title="2.2部署到IDEA"></a>2.2部署到IDEA</h3><p><strong>配置页面</strong><br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/Tomcatconfig1.jpg"></p><p><strong>部署web项目</strong><br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/Tomcatconfig2.jpg"></p><h3 id="2-3Maven依赖"><a href="#2-3Maven依赖" class="headerlink" title="2.3Maven依赖"></a>2.3Maven依赖</h3><ol><li>Tomcat10.0开始jar包和之前做了区别</li><li>10以前:import javax.servlet.http.HttpServlet;</li><li>10以后:import jakarta.servlet.http.HttpServlet;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--以下为10以后的依赖，10以前可以去Maven仓库--&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-servlet-api--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jsp-api--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-4web-xml"><a href="#2-4web-xml" class="headerlink" title="2.4web.xml"></a>2.4web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--搭配tomcat服务器最新的web配置环境--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;5.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC安装使用</title>
    <link href="/2022/06/30/MySQL/JDBC%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/30/MySQL/JDBC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JDBC概述"><a href="#1-JDBC概述" class="headerlink" title="1.JDBC概述"></a>1.JDBC概述</h2><ol><li>是Java和数据库之间的一个桥梁</li><li>是一个规范而不是一个实现，能够执行SQL语句</li><li>它由一组用Java语言编写的类和接口组成</li><li>各种不同类型的数据库都有相应的实现的</li></ol><h2 id="2-配置JDBC"><a href="#2-配置JDBC" class="headerlink" title="2.配置JDBC"></a>2.配置JDBC</h2><p><a href="https://downloads.mysql.com/archives/c-j/">JDBC-Connector下载地址</a>，若MySQL版本为8以上，则下载版本为8以上的驱动</p><p>导入IDEA的Global Libraries每个Moudles使用时只需调用即可<br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/globallibraries.jpg" alt="GLOBAL LIBRARIES"><br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/ideajdbcmodules.jpg" alt="Modules目录下"></p><h2 id="3-建立连接"><a href="#3-建立连接" class="headerlink" title="3.建立连接"></a>3.建立连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.通过反射加载驱动</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2.连接需要提供的三件套</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/数据库名称?userUnicode=true&amp;characterEncoding=字符集&amp;useSSL=true&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;用户名&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">pass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;密码&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3.建立数据库连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, name, pass);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 4. 获取sql对象 此对象用于对sql数据的操纵</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> con.createStatement();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 5.sql查询语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这里写sql语句&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 6.通过statement读取sql语句转换为java对象</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 7.数据调用输出</span><br><span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>    System.out.println(resultSet.getXxx(<span class="hljs-string">&quot;字段名&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 8.释放资源</span><br>resultSet.close();<br>statement.close();<br>con.close();<br></code></pre></td></tr></table></figure><h2 id="4-Utils类"><a href="#4-Utils类" class="headerlink" title="4.Utils类"></a>4.Utils类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>,<span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>,<span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//静态代码块 随着类的加载而加载</span><br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">//存在异常，需TryCatch</span><br>    <span class="hljs-comment">//1.通过类的加载器获取配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> 本类类名.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;配置文件名.properties&quot;</span>);<br>    <span class="hljs-comment">//2.读取配置文件</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">pis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    pis.load(in);<br>    <span class="hljs-comment">//2.1加载登录参数</span><br>    driver = pis.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>    url = pis.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>    username = pis.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>    password = pis.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-comment">//2.2驱动只用加载一次</span><br>    Class.forName(driver);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.创建连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//4.关闭流</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">CloseConnection</span><span class="hljs-params">(Connection con, Statement sta, ResultSet rst)</span>&#123;<br>    <span class="hljs-comment">//最好判断一下每个资源是否为null</span><br>    con.close();<br>    sta.close();<br>    rst.close(); <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-SQL注入"><a href="#5-SQL注入" class="headerlink" title="5.SQL注入"></a>5.SQL注入</h2><ol><li>Statement主要用于向数据库发送sql语句</li><li>增删改使用excute update </li><li>查询使用excute query</li><li>excute以上都可，执行时间会增长</li></ol><ul><li>PreparedStatement和statement的区别</li><li>前者更安全不会被sql注入，后者则相反</li><li>同时前者继承了后者</li></ul><h3 id="5-1Statement使用"><a href="#5-1Statement使用" class="headerlink" title="5.1Statement使用"></a>5.1Statement使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loginTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//user_login(&quot;Cherry&quot;,&quot;123456&quot;);</span><br>    <span class="hljs-comment">//sql注入问题 通过特殊的字符串拼接盗取所有数据</span><br>    user_login(<span class="hljs-string">&quot; &#x27;or &#x27; 1=1&quot;</span>,<span class="hljs-string">&quot;&#x27;or &#x27; 1=1&quot;</span>);<br>&#125;<br><span class="hljs-comment">//用户校验</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">user_login</span><span class="hljs-params">(String name,String pass)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> JDBC_Util.getConnection();<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> con.createStatement();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from 数据库.表名 where 字段名 =&#x27;&quot;</span>+name+<span class="hljs-string">&quot;&#x27; and 字段名=&#x27;&quot;</span>+pass+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rss</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>    <span class="hljs-keyword">while</span> (rss.next())&#123;<br>        System.out.println(rss.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));<br>        System.out.println(rss.getObject(<span class="hljs-string">&quot;PASSWORD&quot;</span>));<br>    &#125;<br>    JDBC_Util.CloseConnection(con,statement,rss);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2PreparedStatement使用"><a href="#5-2PreparedStatement使用" class="headerlink" title="5.2PreparedStatement使用"></a>5.2PreparedStatement使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 安全的用户校验</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">user_login</span><span class="hljs-params">(String name,String password)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> JDBC_Util.getConnection();<br>    <span class="hljs-comment">//使用PreparedStatement可以很好的避免Sql注入</span><br>    <span class="hljs-comment">//会把传入进来的参数当作字符,假设其中存在转义字符,会被直接转义</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from jdbcstudy.users where name =? and password=?&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<br>    <span class="hljs-comment">//1代表第一个?后面以此类推</span><br>    pst.setString(<span class="hljs-number">1</span>,name);<br>    pst.setString(<span class="hljs-number">2</span>,password);<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rst</span> <span class="hljs-operator">=</span> pst.executeQuery();<br>    <span class="hljs-keyword">if</span> (rst.next())&#123;<br>        System.out.println(rst.getObject(<span class="hljs-string">&quot;NAME&quot;</span>));<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;检验失败，请重新核对你的信息！！！&quot;</span>);<br>    &#125;<br><br>    JDBC_Util.CloseConnection(con,pst,rst);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-DCBP连接池"><a href="#6-DCBP连接池" class="headerlink" title="6.DCBP连接池"></a>6.DCBP连接池</h2><ol><li>DBCP是Apche提供的一个数据库连接池</li><li>我们在连接数据库时直接设置好配置文件</li><li>通过对应的三个jar包中提供的类和方法直接调用即可</li><li><a href="https://archive.apache.org/dist/commons/dbcp/binaries/">commons-dbcp</a>、<a href="https://commons.apache.org/proper/commons-logging/download_logging.cgi">commons-logging</a> 、commons-pool</li><li>导入方式和开头提及的JDBC导入方式相似</li></ol><h3 id="6-1DCBP工具类"><a href="#6-1DCBP工具类" class="headerlink" title="6.1DCBP工具类"></a>6.1DCBP工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在Util的基础上做出相应改变</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">dse</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">//1.通过类的加载器获取配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> 本类类名.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;配置文件名.properties&quot;</span>);<br>    <span class="hljs-comment">//2.读取配置文件</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">pis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    pis.load(in);<br>    <span class="hljs-comment">//2.1加载登录参数</span><br>    dse = BasicDataSourceFactory.createDataSource(pis);<br>&#125;<br><br><span class="hljs-comment">//3.创建连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-keyword">return</span> dse.getConnection()<br>&#125;<br><span class="hljs-comment">//4.关闭流</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">CloseConnection</span><span class="hljs-params">(Connection con, Statement sta, ResultSet rst)</span>&#123;<br>    <span class="hljs-comment">//最好判断一下每个资源是否为null</span><br>    con.close();<br>    sta.close();<br>    rst.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2properties文件"><a href="#6-2properties文件" class="headerlink" title="6.2properties文件"></a>6.2properties文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml">#连接设置<br>driverClassName=com.mysql.jdbc.Driver<br>url=jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true<br>username=root<br>password=123456<br><br>#<span class="hljs-comment">&lt;!-- 初始化连接 --&gt;</span><br>initialSize=10<br><br>#最大连接数量<br>maxActive=50<br><br>#<span class="hljs-comment">&lt;!-- 最大空闲连接 --&gt;</span><br>maxIdle=20<br><br>#<span class="hljs-comment">&lt;!-- 最小空闲连接 --&gt;</span><br>minIdle=5<br><br>#<span class="hljs-comment">&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span><br>maxWait=60000<br>#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：【属性名=property;】<br>#注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。<br>connectionProperties=useUnicode=true;characterEncoding=UTF8<br><br>#指定由连接池所创建的连接的自动提交（auto-commit）状态。<br>defaultAutoCommit=true<br><br>#driver default 指定由连接池所创建的连接的只读（read-only）状态。<br>#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）<br>defaultReadOnly=<br><br>#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。<br>#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE<br>defaultTransactionIsolation=READ_UNCOMMITTED<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础 | Others</title>
    <link href="/2022/06/30/MySQL/MySQL%E5%85%B6%E4%BB%96/"/>
    <url>/2022/06/30/MySQL/MySQL%E5%85%B6%E4%BB%96/</url>
    
    <content type="html"><![CDATA[<h2 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h2><ul><li>要么都成功要么都失败</li><li>A给B转钱要确定B能收到，A的钱同时减少</li><li>mysql默认开启事务</li></ul><h3 id="1-1AOID原则"><a href="#1-1AOID原则" class="headerlink" title="1.1AOID原则"></a>1.1AOID原则</h3><ol><li>原子性Atomicity、事务里的操作要么全做，要么全不做</li><li>一致性Consistency、数据无论怎么去操作最终的数据要保持一致</li><li>独立性Isolation、并发的事务之间不存在互相干扰</li><li>持久性Durablity、一但事务提交，他所做的修改会永远保存在数据库上，出现宏机也不会丢失</li></ol><h3 id="1-2并发控制"><a href="#1-2并发控制" class="headerlink" title="1.2并发控制"></a>1.2并发控制</h3><p>独立性所导致的问题：</p><ol><li><p>脏读：指一个事务读取另外一个事务未提交的数据.</p></li><li><p>不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同.（这个不一定是错误，只是某些场合不对）.</p></li><li><p>虚读（幻读）：是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致.</p></li></ol><h3 id="1-3事务代码层"><a href="#1-3事务代码层" class="headerlink" title="1.3事务代码层"></a>1.3事务代码层</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 事务操纵</span><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 关闭自动提交</span><br><span class="hljs-keyword">start</span> transaction;  <span class="hljs-comment">-- 开启一个事务</span><br><span class="hljs-comment">-- 事务里面操纵的数据(原子性)</span><br><span class="hljs-comment">--1减少50元</span><br><span class="hljs-keyword">update</span> cusinfo <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money<span class="hljs-number">-50</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-comment">--2增加50元</span><br><span class="hljs-keyword">update</span> cusinfo <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money<span class="hljs-operator">+</span><span class="hljs-number">50</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>;<br><br><span class="hljs-keyword">commit</span>; <span class="hljs-comment">-- 提交(持久性)</span><br><span class="hljs-keyword">rollback</span>; <span class="hljs-comment">-- 回滚(恢复操作前数据)</span><br><br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 开启自动提交</span><br></code></pre></td></tr></table></figure><h2 id="2-索引"><a href="#2-索引" class="headerlink" title="2.索引"></a>2.索引</h2><ul><li>索引是帮助MySQL高效获取数据的数据结构</li><li>小量数据体验不到索引的作用，大量数据使用索引的效率会大幅度提升</li><li>索引并不是越多越好,不要对进程变动数据加索引</li><li>小数据量的表不要加索引,索引一般加在常用字段上</li></ul><h3 id="2-1索引分类"><a href="#2-1索引分类" class="headerlink" title="2.1索引分类"></a>2.1索引分类</h3><ol><li>主键索引(PRIMARY KEY)、唯一的标识，主键不可重复，只能有一个列作为主键</li><li>唯一索引(UNIQUE KEY)、避免出现重复的列，唯一索引可以重复，多个列都可以标识位唯一索引</li><li>常规索引(KEY&#x2F;INDEX)、默认的，index，key关键词来设置</li><li>全文索引(FULLTEXT)、MYSIAM引擎下才有，快速定位数据</li></ol><h3 id="2-2创建方式"><a href="#2-2创建方式" class="headerlink" title="2.2创建方式"></a>2.2创建方式</h3><p>一、创建表时创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>  `StudentNo` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;学号&#x27;</span>,<br>  `IdentityCard` <span class="hljs-type">varchar</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br>  <span class="hljs-comment">-- 添加索引</span><br>  <span class="hljs-keyword">PRIMARY</span> KEY (`StudentNo`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `IdentityCard` (`IdentityCard`),<br>  KEY `Email` (`Email`)<br>) ENGINE<span class="hljs-operator">=</span>MyISAM <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><p>二、通过ALTER语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 数据库.表 <span class="hljs-keyword">ADD</span> 索引类型 INDEX `索引名` (`列名`);<br></code></pre></td></tr></table></figure><p>三、通过CREATE INDEX语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX `索引名` <span class="hljs-keyword">ON</span> 表名 (`列名`);<br></code></pre></td></tr></table></figure><h2 id="3-用户与备份"><a href="#3-用户与备份" class="headerlink" title="3.用户与备份"></a>3.用户与备份</h2><p><strong>用户操作语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建用户</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> 用户名 identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br><br><span class="hljs-comment">-- 设置指定用户密码</span><br><span class="hljs-keyword">set</span> password <span class="hljs-keyword">for</span> 用户名 <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;密码&#x27;</span>);<br><br><span class="hljs-comment">-- 设置当前用户密码</span><br><span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;密码&#x27;</span>);<br><br><span class="hljs-comment">-- 重命名用户名</span><br>RENAME <span class="hljs-keyword">USER</span> 旧用户名 <span class="hljs-keyword">TO</span> 新用户名;<br><br><span class="hljs-comment">-- 给用户赋予最高权限除GRANT</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> 用户名;<br><br><span class="hljs-comment">-- 查看用户权限</span><br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> 用户名;<br><br><span class="hljs-comment">-- 撤销权限 撤销哪些权限 在哪个库撤销 给谁撤</span><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 用户名;<br><br><span class="hljs-comment">-- 删除指定用户</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> 用户名;<br></code></pre></td></tr></table></figure><p><strong>备份语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 除了以下语句或指令集操作外，还可使用SQLyog等可视化工具完成</span><br><span class="hljs-comment">-- 备份</span><br><span class="hljs-comment">-- 备份指定数据库下的表</span><br>mysqldump <span class="hljs-operator">-</span>h主机名 <span class="hljs-operator">-</span>u用户名 <span class="hljs-operator">-</span>p密码 数据库 表<span class="hljs-number">1</span> 表<span class="hljs-number">2</span> 表<span class="hljs-number">3</span> <span class="hljs-operator">&gt;</span>物理磁盘位置<span class="hljs-operator">/</span>名称.<span class="hljs-keyword">sql</span><br><span class="hljs-comment">-- 备份整个数据库</span><br>mysqldump <span class="hljs-operator">-</span>h主机名 <span class="hljs-operator">-</span>u用户名 <span class="hljs-operator">-</span>p密码 数据库 <span class="hljs-operator">&gt;</span>物理磁盘位置<span class="hljs-operator">/</span>名称.<span class="hljs-keyword">sql</span><br><br><span class="hljs-comment">-- 恢复在sql语句种操作</span><br><span class="hljs-comment">-- 先登录</span><br>mysql <span class="hljs-operator">-</span>u <span class="hljs-operator">-</span>p<br><span class="hljs-comment">-- 选择要恢复到的数据库下面</span><br>use db<br><span class="hljs-comment">-- 恢复</span><br>source 盘符:<span class="hljs-operator">/</span>备份文件<br></code></pre></td></tr></table></figure><h2 id="4-规范设计"><a href="#4-规范设计" class="headerlink" title="4.规范设计"></a>4.规范设计</h2><ol><li>DB的设计是软硬件结合，技术与管理的界面就是干件</li><li>DB的设计需和应用系统相结，整个设计过程中结构(数据)设计和行为(处理)设计即使分别进行的，又是密不可的</li><li>DB的设计涉及多学科，当构建一个大型数据库时其开发周期长，耗资多，风险大</li></ol><h3 id="4-1规范与性能"><a href="#4-1规范与性能" class="headerlink" title="4.1规范与性能"></a>4.1规范与性能</h3><ul><li>阿里开发手册 关联的表不能超过三张</li><li>考虑商业化需求和目的，数据库的性能更重要</li><li>规范性能问题时候，需适当考虑规范性</li><li>故意给某些表增加一些冗余的字段(从多表查询到单表查询)</li><li>故意增加一些计算列(大数据量降为小数据量的查询:索引)</li></ul><h3 id="4-2三大范式"><a href="#4-2三大范式" class="headerlink" title="4.2三大范式"></a>4.2三大范式</h3><ul><li>1NF：满足原子性:保证每一列不可再分</li><li>2NF：满足1NF，且每张表只做一件事情</li><li>3NF：满足1NF和2NF，且确保数据库中的每一列数据都和主键直接关联，而不是间接关联</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础 | DQL</title>
    <link href="/2022/06/27/MySQL/MYSQLDQL/"/>
    <url>/2022/06/27/MySQL/MYSQLDQL/</url>
    
    <content type="html"><![CDATA[<h2 id="1-DQL概述"><a href="#1-DQL概述" class="headerlink" title="1.DQL概述"></a>1.DQL概述</h2><ul><li>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE</li><li>子句组成的查询块：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">&lt;</span>字段名表<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表或视图名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>查询条件<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-基本查询"><a href="#2-基本查询" class="headerlink" title="2.基本查询"></a>2.基本查询</h2><h3 id="2-1查询语法"><a href="#2-1查询语法" class="headerlink" title="2.1查询语法"></a>2.1查询语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 书写格式</span><br><span class="hljs-keyword">SELECT</span> 字段名,...,字段名 <span class="hljs-keyword">FROM</span> 表名;<br><br><span class="hljs-comment">-- 基本表中所有数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名;<br><br><span class="hljs-comment">-- 给字段以及表设置别名查询</span><br><span class="hljs-keyword">SELECT</span> 字段名 <span class="hljs-keyword">AS</span> 别名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">AS</span> 表别名;<br><br><span class="hljs-comment">-- 使用函数 CONCAT连接字符</span><br><span class="hljs-keyword">SELECT</span> CONCAT(<span class="hljs-string">&#x27;大&#x27;</span>,gradeid) <span class="hljs-keyword">AS</span> 学校人数占比情况 <span class="hljs-keyword">FROM</span>  SUBJECT; <br><br><span class="hljs-comment">-- 去重使用DISTINCT关键词</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> studentno <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br></code></pre></td></tr></table></figure><h3 id="2-2表达式"><a href="#2-2表达式" class="headerlink" title="2.2表达式"></a>2.2表达式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询系统版本</span><br><span class="hljs-keyword">SELECT</span> VERSION();<br><span class="hljs-comment">-- 计算</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-number">3</span><span class="hljs-number">-1</span> <span class="hljs-keyword">AS</span> a;<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@ATUO</span>_INCREMENT_INCREMENT <span class="hljs-comment">-- 查询自增的步长(变量)</span><br><br><span class="hljs-comment">-- 实现studentresult字段的所有成绩都+1</span><br><span class="hljs-keyword">SELECT</span> studentno <span class="hljs-keyword">AS</span> 学号,studentresult<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> 成绩 <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span>;<br></code></pre></td></tr></table></figure><h3 id="2-3WHERE语句"><a href="#2-3WHERE语句" class="headerlink" title="2.3WHERE语句"></a>2.3WHERE语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- WHERE语句搭配逻辑运算符使用</span><br><br><span class="hljs-comment">-- 查询成绩在此范围内的数据</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> <br><span class="hljs-keyword">WHERE</span> studentresult <span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span> <span class="hljs-keyword">AND</span> studentresult <span class="hljs-operator">&lt;=</span><span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 除了学号1000以外所有学生的成绩</span><br><span class="hljs-keyword">SELECT</span> studentno,studentresult <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">result</span> <br><span class="hljs-keyword">WHERE</span> studentno <span class="hljs-operator">!=</span><span class="hljs-number">1001</span>;<br></code></pre></td></tr></table></figure><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/mysqllogicsz.png" alt="三种逻辑运算符"></p><h2 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3.模糊查询"></a>3.模糊查询</h2><h3 id="3-1LIKE"><a href="#3-1LIKE" class="headerlink" title="3.1LIKE"></a>3.1LIKE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- LIKE需结合 %代表所有字符 _代表一个字符</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;值%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%值%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;值_&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="3-2IN"><a href="#3-2IN" class="headerlink" title="3.2IN"></a>3.2IN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- IN具体的一个或多个值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> studentno <span class="hljs-keyword">IN</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,.....,值n);<br><br><span class="hljs-comment">-- IS null 显示指定字段为null的所有数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 字段 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- NOT null 显示指定字段非null的所有数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 字段 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- BETWEEN AND闭区间内的数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 字段 <span class="hljs-keyword">BETWEEN</span> 值 <span class="hljs-keyword">AND</span> 值;<br></code></pre></td></tr></table></figure><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/mysqlyunsuanfu.png" alt="五种运算符"></p><h2 id="4-联表查询"><a href="#4-联表查询" class="headerlink" title="4.联表查询"></a>4.联表查询</h2><h3 id="4-1内外连接"><a href="#4-1内外连接" class="headerlink" title="4.1内外连接"></a>4.1内外连接</h3><ul><li>内链接指的是把两个表关联起来后，只有当两个表中共同有的数据才进行显示，内链接是最普通的联表查询</li><li>外链接可以分为左外链接和右外链接，其实这两种方式在本质上是相同的。</li><li>如果说内链接是两个表都有数据时才会显示，那么外链接就是主表中有数据就显示，而不管从表。</li><li>对于左外链接来说，from后面紧跟着的表就是主表。</li><li>而对于右外链接来说，则正好相反，join后面紧跟着的表是主表。</li></ul><h3 id="4-2核心步骤"><a href="#4-2核心步骤" class="headerlink" title="4.2核心步骤"></a>4.2核心步骤</h3><ol><li>确定要查询的数据 SELECT 字段1,字段2,…字段n</li><li>从哪几个表中去查 FROM 表名称 XXX JOIN 连接的表 ON 交叉条件</li><li>若需要进行多张表查询时，一步一步来，从两张表查开始<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.确定要查询的字段</span><br><span class="hljs-keyword">SELECT</span> s.字段<span class="hljs-number">1</span>,...,字段n<br><span class="hljs-comment">-- 2.确定使用的联表类型</span><br><span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> r<br><span class="hljs-comment">-- 3.判断条件两个表里面具有两个相同的字段</span><br><span class="hljs-keyword">ON</span> s.相同字段 <span class="hljs-operator">=</span> r.相同字段;<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> 表n <span class="hljs-keyword">AS</span> n<br>............<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-3自连接"><a href="#4-3自连接" class="headerlink" title="4.3自连接"></a>4.3自连接</h3><p>一个表具有连个表的属性时，需要把一张表拆分为两张表，通过子夫字段的关系来进行判断(使用较少)</p><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/mysqlselfconnect.png" alt="测试表"></p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.`字段名<span class="hljs-number">1</span>` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;father&#x27;</span>,b.`字段名<span class="hljs-number">1</span>` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;son&#x27;</span> <br><span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> a , 表<span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> b<br><span class="hljs-keyword">WHERE</span> a.`子字段` <span class="hljs-operator">=</span> b.`父字段`;<br></code></pre></td></tr></table></figure><h3 id="4-4子查询"><a href="#4-4子查询" class="headerlink" title="4.4子查询"></a>4.4子查询</h3><p>当数据查询的条件依赖于其他查询结果时，子查询提供了较好的查询方式</p><p><strong>带IN嵌套</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询高等数学-1分数大于80的学号和姓名</span><br><span class="hljs-keyword">select</span> StudentNo,StudentName <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> studentno <span class="hljs-keyword">in</span> (<br>    <span class="hljs-keyword">select</span> StudentNo <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">where</span> StudentResult <span class="hljs-operator">&gt;=</span> <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> SubjectNo <span class="hljs-keyword">in</span>(<br>    <span class="hljs-keyword">select</span> SubjectNo <span class="hljs-keyword">from</span> subject <span class="hljs-keyword">where</span> SubjectName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;高等数学-1&#x27;</span><br>  )<br>)<br></code></pre></td></tr></table></figure><p><strong>带比较运算符</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询高等数学-1排行前五的学生信息</span><br><span class="hljs-comment">-- 1.确定查询字段</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> a.`StudentNo`,`StudentName`,`StudentResult`<br><span class="hljs-comment">-- 2.连表查询</span><br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> a<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">as</span> b<br><span class="hljs-keyword">on</span> a.StudentNo <span class="hljs-operator">=</span> b.StudentNo<br><span class="hljs-comment">-- 3.子查询</span><br><span class="hljs-keyword">WHERE</span> b.SubjectNo <span class="hljs-operator">=</span>(<br>    <span class="hljs-keyword">select</span> SubjectNo <span class="hljs-keyword">from</span> subject<br>    <span class="hljs-keyword">where</span> SubjectName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;高等数学-1&#x27;</span><br>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> StudentResult <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h2 id="5-分页排序"><a href="#5-分页排序" class="headerlink" title="5.分页排序"></a>5.分页排序</h2><ul><li>分页的作用是为了缓解数据库的压力</li><li>文章一般使用分页，图片一般使用瀑布流处理</li><li>排序ASC代表降序 DESC代表升序</li></ul><p><strong>分页公式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">第<span class="hljs-number">1</span>页 LIMIT <span class="hljs-number">0</span>,pagesize  (<span class="hljs-number">1</span><span class="hljs-number">-1</span>)<span class="hljs-operator">*</span>pagesize <br>第n页 LIMIT n<span class="hljs-number">-1</span>,pagesize  (n<span class="hljs-number">-1</span>)<span class="hljs-operator">*</span>pagesize <br><span class="hljs-comment">-- Pagezie 页面大小</span><br><span class="hljs-comment">-- (n-1)*pagesize  起始值</span><br><span class="hljs-comment">-- n ： 当前值</span><br><span class="hljs-comment">-- 数据总数/页面大小 =总页数</span><br></code></pre></td></tr></table></figure><p><strong>排序格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `字段名称` <span class="hljs-keyword">ASC</span> 或 <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 两个表以上的查询</span><br><span class="hljs-comment">-- 参加考试的同学信息 (学号，姓名，课程名称，分数) 升序排序 每页显示5条记录</span><br><span class="hljs-keyword">SELECT</span> stu.studentno,studentname,subjectname,studentresult<br><span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">AS</span> stu<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">AS</span> res<br><span class="hljs-keyword">ON</span> stu.studentno <span class="hljs-operator">=</span> res.studentno<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> `subject` sjt<br><span class="hljs-keyword">ON</span> res.subjectno <span class="hljs-operator">=</span> sjt.subjectno<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `studentresult` <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h2><p>MySQL提供了一系列函数用于基本的逻辑运算，可参考官方文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 聚合函数(一般用于统计计算数值)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-string">&#x27;studentno&#x27;</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>;  <span class="hljs-comment">-- 忽略所有的null值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>;        <span class="hljs-comment">-- 不忽略null值 本质是计算行数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>;        <span class="hljs-comment">-- 不忽略null值 本质也是计算行数</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(StudentResult) <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(StudentResult) <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(StudentResult) <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(StudentResult) <span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span>;<br></code></pre></td></tr></table></figure><p><strong>分组概念</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询不同课程的平均分 最高分 最低分 平均分&gt;10</span><br><span class="hljs-keyword">select</span> subjectname,<span class="hljs-built_in">avg</span>(StudentResult) <span class="hljs-keyword">as</span> avg_score,<span class="hljs-built_in">max</span>(StudentResult),<span class="hljs-built_in">min</span>(StudentResult)<br><span class="hljs-keyword">from</span> <span class="hljs-keyword">result</span> <span class="hljs-keyword">as</span> r<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> subject  <span class="hljs-keyword">as</span> sub<br><span class="hljs-keyword">on</span> r.SubjectNo <span class="hljs-operator">=</span> sub.SubjectNo<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> r.SubjectNo    <span class="hljs-comment">-- 通过什么字段分组</span><br><span class="hljs-keyword">having</span> avg_score <span class="hljs-operator">&gt;</span> <span class="hljs-number">10</span>  <span class="hljs-comment">-- 筛选条件</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> avg_score <span class="hljs-keyword">DESC</span> <span class="hljs-comment">-- 排序条件</span><br>LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;              <span class="hljs-comment">-- 分页</span><br></code></pre></td></tr></table></figure><p><strong>MD5加密</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- MD5()加密函数</span><br>use user_secret;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> secret;<br><span class="hljs-comment">-- 插入一条md5加密数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> secret (PLATFORM, ACCOUNTS, PASSWORD, NOTES) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;JetBrain&#x27;</span>,<span class="hljs-string">&#x27;kinozhao0715@gmail.com&#x27;</span>,md5(<span class="hljs-string">&#x27;密码&#x27;</span>),<span class="hljs-string">&#x27;javaide平台&#x27;</span>);<br><span class="hljs-comment">-- 校验</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> secret <span class="hljs-keyword">where</span> NUMS<span class="hljs-operator">=</span><span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">and</span> PASSWORD <span class="hljs-operator">=</span> md5(<span class="hljs-string">&#x27;密码&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础 | DML</title>
    <link href="/2022/06/25/MySQL/MySQL%E6%93%8D%E7%BA%B5/"/>
    <url>/2022/06/25/MySQL/MySQL%E6%93%8D%E7%BA%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-DML概述"><a href="#1-DML概述" class="headerlink" title="1.DML概述"></a>1.DML概述</h2><ul><li>数据操纵语言（Data Manipulation Language, DML）是用于数据库操作</li><li>对数据库其中的对象和数据运行访问工作的编程语句</li><li>通常是数据库专用编程语言之中的一个子集，例如在信息软件产业通行标准的SQL语言中</li><li>以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入(意指新增或创建)、更新(修改)与删除(销毁)</li></ul><h2 id="2-INSERT语句"><a href="#2-INSERT语句" class="headerlink" title="2.INSERT语句"></a>2.INSERT语句</h2><ol><li>字段可以为多个或单个</li><li>每个VALUE必须对应一样的字段</li><li>字段可以省略但对应的值需要相对应<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法格式</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `表名称` (`字段<span class="hljs-number">1</span>`,....,`字段n`)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;值&#x27;</span>,....,<span class="hljs-string">&#x27;值&#x27;</span>);<br><span class="hljs-comment">-- 实例</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `personal_info`(`name`,`sex`,`email`,`classnum`,`address`)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;管某&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;8818@qq.com&#x27;</span>,<span class="hljs-string">&#x27;460211&#x27;</span>,<span class="hljs-string">&#x27;宿迁市&#x27;</span>),<br>(<span class="hljs-string">&#x27;陈某&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;32423428@qq.com&#x27;</span>,<span class="hljs-string">&#x27;460211&#x27;</span>,<span class="hljs-string">&#x27;淮安市&#x27;</span>),<br>(<span class="hljs-string">&#x27;王某&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;252468@qq.com&#x27;</span>,<span class="hljs-string">&#x27;423213&#x27;</span>,<span class="hljs-string">&#x27;长春市&#x27;</span>),<br>(<span class="hljs-string">&#x27;谭某&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;986826@qq.com&#x27;</span>,<span class="hljs-string">&#x27;460211&#x27;</span>,<span class="hljs-string">&#x27;娄底市&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-UPDATE语句"><a href="#2-UPDATE语句" class="headerlink" title="2.UPDATE语句"></a>2.UPDATE语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语句格式</span><br><span class="hljs-keyword">UPDATE</span> `表名称` <span class="hljs-keyword">SET</span> `字段名称` <span class="hljs-keyword">WHERE</span> 判断条件与操作符构成<br><span class="hljs-comment">-- 带判断条件 仅改变 id=6的name字段为王菲</span><br><span class="hljs-keyword">UPDATE</span> `personal_info` <span class="hljs-keyword">SET</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;王菲&#x27;</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br><span class="hljs-comment">-- 不带判断条件 若执行所有name字段全部改为王菲 慎用！</span><br><span class="hljs-keyword">UPDATE</span> `personal_info` <span class="hljs-keyword">SET</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;王菲&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="2-1-操作符"><a href="#2-1-操作符" class="headerlink" title="2.1 操作符"></a>2.1 操作符</h3><ul><li>通常搭配WHERE使用，完成一系列的判定条件</li></ul><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/optioncharactersql.png"></p><h2 id="3-DELETE语句"><a href="#3-DELETE语句" class="headerlink" title="3.DELETE语句"></a>3.DELETE语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--语句格式</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `表名称` <span class="hljs-keyword">WHERE</span> 判断条件<br><span class="hljs-comment">--带判断条件</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `grade_info` <span class="hljs-keyword">WHERE</span> `gradeid`<span class="hljs-operator">=</span><span class="hljs-number">25</span>;<br><span class="hljs-comment">--不带判断条件,相当于清空表 慎用！</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `grade_info`;<br><br><span class="hljs-comment">--清空表,并重置自增量</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> `grade_info`;<br></code></pre></td></tr></table></figure><h3 id="3-1DELETE和TRUNCATE的区别"><a href="#3-1DELETE和TRUNCATE的区别" class="headerlink" title="3.1DELETE和TRUNCATE的区别"></a>3.1DELETE和TRUNCATE的区别</h3><ul><li>DELETE保留自增量</li><li>TRUNCATE重设自增量，计数器归零，不影响事务</li><li>注:若重启数据库类型使用INNODB时候，重启MYSQL服务器，此时使用DELETE之后自增量仍然会重置，因为INNODB类型是保存在内存中的，使用MYISAM则不会</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础 | OVERVIEW</title>
    <link href="/2022/06/23/MySQL/MySQL%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/06/23/MySQL/MySQL%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1.数据库概述"></a>1.数据库概述</h2><h3 id="1-1两种类型"><a href="#1-1两种类型" class="headerlink" title="1.1两种类型"></a>1.1两种类型</h3><p><strong>关系型数据库</strong></p><p>MySQL、sqlServer等，通过表和表之间、行和行之间的关系进行数据库连接</p><p><strong>非关系型数据库</strong></p><p>Redi、MongDB等,对象存储、通过对象自身的属性来决定</p><h3 id="1-2DB-x2F-DBS-x2F-DBMS三者关系"><a href="#1-2DB-x2F-DBS-x2F-DBMS三者关系" class="headerlink" title="1.2DB&#x2F;DBS&#x2F;DBMS三者关系"></a>1.2DB&#x2F;DBS&#x2F;DBMS三者关系</h3><ol><li>DBS包括DB和DBMS。数据库系统是一个通称，包括数据库、数据库管理系统、数据库管理人员等的统称，是最大的范畴。</li><li>DBMS和DB：DBMS是一种操纵和管理数据库的大型软件，是用于建立、使用和维护数据库（DB）。它对数据库进行统一的管理和控制，以保证数据库的安全性和完整性。用户通过DBMS访问数据库（DB）中的数据。</li><li>DBS和DB：数据库系统DBS是一个实际可运行的存储、维护和应用系统提供数据的软件系统，是存储介质、处理对象和管理系统的集合体。它通常由软件、数据库（DB）和数据管理员组成。</li></ol><h3 id="1-3基本语句"><a href="#1-3基本语句" class="headerlink" title="1.3基本语句"></a>1.3基本语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">刷新权限 flush privileges;<br>查询数据库 <span class="hljs-keyword">show</span> databases;<br>查询表 <span class="hljs-keyword">show</span> tables;<br>切换数据库 Use 数据库名称;<br>显示数据库表中所有表信息 <span class="hljs-keyword">describe</span> 表名称;<br>创建数据库 creat database 数据库名称;<br>退出数据库 exit;<br>单行注释 <span class="hljs-comment">-- 注释内容;</span><br>多行注释 <span class="hljs-comment">/*和Java写法一样*/</span><br>更改密码 <br><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span><span class="hljs-keyword">and</span> Host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="1-4字段属性"><a href="#1-4字段属性" class="headerlink" title="1.4字段属性"></a>1.4字段属性</h3><ul><li>Unsigned：无符号的整数,声明了该列不可声明为负数</li><li>Zerofill：不足的位数用0来补充 int(3) 5-005</li><li>自增：自动在上一条记录上+1,通常用于设置唯一的主键 index,必须是整数类型,可在高级选项中自定义设置主键自增和起始步长</li><li>非空：设置为非空，若不赋值就会报错,不设置不写的情况下，默认显示(NULL)</li></ul><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/sqlfield.png" alt="SQLyog示意图"></p><h3 id="1-5数据类型"><a href="#1-5数据类型" class="headerlink" title="1.5数据类型"></a>1.5数据类型</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/a309e1c7b8f04deda8cc5e98df3a7ada.png" alt="数据类型表"></p><h3 id="1-6表类型"><a href="#1-6表类型" class="headerlink" title="1.6表类型"></a>1.6表类型</h3><ul><li>MYISAM 节约空间，速度更快</li><li>INNODB 主流类型，安全性高，事务的处理，多表用户操作</li><li>在物理空间的位置，数据库文件都存在在data目录下，一个文件对应一个数据库</li><li>两者在物理上的区别</li></ul><ol><li>INNODB生产为frm结尾的文件，及上级目录ibdata1文件</li><li>MYISAM生产三个文件</li><li>.frm表结构定义文件</li><li>.MYD 数据文件(data)</li><li>.MYI 索引文件(index)</li></ol><h2 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h2><h3 id="2-1创建数据库"><a href="#2-1创建数据库" class="headerlink" title="2.1创建数据库"></a>2.1创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建</span><br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> 数据库名称<br><span class="hljs-comment">-- 删除</span><br><span class="hljs-keyword">DROP</span> DATABASE 数据库名称<br><span class="hljs-comment">-- 如果和关键词冲突需加  `</span><br><span class="hljs-comment">-- 使用数据库</span><br>USE `school`<br></code></pre></td></tr></table></figure><h3 id="2-2创建表"><a href="#2-2创建表" class="headerlink" title="2.2创建表"></a>2.2创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 格式 []代表为可选项</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>  `表名`（<br>`字段名` 列类型(位数) [属性] [索引] [注释] ,<br>............<br>`字段名` 列类型(位数) [属性] [索引] [注释] <br>）ENGINE<span class="hljs-operator">=</span>数据表类型 <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>字符集<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `student`(<br> `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;jsei_id&#x27;</span>,<br> `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;name&#x27;</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY(`id`)<br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><span class="hljs-comment">-- CHARSET=XXX 为设置此表的字符集</span><br></code></pre></td></tr></table></figure><h3 id="2-3查询指令"><a href="#2-3查询指令" class="headerlink" title="2.3查询指令"></a>2.3查询指令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 显示创建这张表/数据库使用的语句</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> jsei_info<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE school<br><span class="hljs-comment">-- 显示表的结构</span><br><span class="hljs-keyword">DESC</span> `表名称`<br></code></pre></td></tr></table></figure><h3 id="2-4修改删除表"><a href="#2-4修改删除表" class="headerlink" title="2.4修改删除表"></a>2.4修改删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表名称</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 RENAME <span class="hljs-keyword">AS</span> 新名称<br><span class="hljs-comment">-- 添加属性</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">ADD</span> `字段名称` 数据类型(<span class="hljs-number">100</span>)<br><span class="hljs-comment">-- 修改约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 MODIFY `字段名称` 数据类型(<span class="hljs-number">3</span>)<br><span class="hljs-comment">-- 修改字段名</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 CHANGE `旧的字段名` `新的字段名` <span class="hljs-type">CHAR</span>(<span class="hljs-number">3</span>)<br><span class="hljs-comment">-- 删除表字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">DROP</span> `字段名称`<br><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> 表名称 <br><span class="hljs-comment">-- 保留表格式 清除全部数据</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> `表名称`<br></code></pre></td></tr></table></figure><ul><li>MODIFY只能修改字段的数据类型</li><li>CHANGE能修改字段名和数据类型</li></ul><h2 id="3-外键理解"><a href="#3-外键理解" class="headerlink" title="3.外键理解"></a>3.外键理解</h2><h3 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h3><ul><li>两种方式都为物理外键，看懂即可基本不用</li><li>数据库作为单纯的表，存储数据只有行和列</li><li>阿里开发手册:不得使用外键与级联，一切外键概念必须在应用层解决</li></ul><h3 id="3-2注意事项"><a href="#3-2注意事项" class="headerlink" title="3.2注意事项"></a>3.2注意事项</h3><ul><li>删除有外键关系的表的时候</li><li>必须要删除引用别人的表(从表)</li><li>再删除被引用的表(主表)</li></ul><h3 id="3-3创表时增加"><a href="#3-3创表时增加" class="headerlink" title="3.3创表时增加"></a>3.3创表时增加</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--主表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `表名称` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;jsei_id&#x27;</span>,<br>  `gradeid` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年纪代号&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-comment">-- 设置约束 `FK_字段名`为默认格式</span><br>  KEY `FK_gradeid` (`gradeid`),<br>  <span class="hljs-comment">--REFERENCES后面代表引用的表和表里面的引用列</span><br>  <span class="hljs-keyword">CONSTRAINT</span> `FK_gradeid` <span class="hljs-keyword">FOREIGN</span> KEY (`gradeid`) <span class="hljs-keyword">REFERENCES</span> `grade` (`gradeid`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><span class="hljs-comment">-- 被引用表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `grade`(<br> `gradeid` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) COMMENT <span class="hljs-string">&#x27;年纪代号&#x27;</span>,<br> `gradename` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;名字&#x27;</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`gradeid`)<br>)ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span>  <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><h3 id="3-2使用ALTER"><a href="#3-2使用ALTER" class="headerlink" title="3.2使用ALTER"></a>3.2使用ALTER</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `表名称`<br><span class="hljs-keyword">ADD</span> CONSTRAIN `FK_字段名` <span class="hljs-keyword">FOREIGN</span> KEY (`字段名`) <span class="hljs-keyword">REFERENCES</span> `被引用表名称`(`被引用表字段`)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装使用</title>
    <link href="/2022/06/22/MySQL/MySQL%E5%AE%89%E8%A3%85/"/>
    <url>/2022/06/22/MySQL/MySQL%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1-配置准备"><a href="#1-配置准备" class="headerlink" title="1.配置准备"></a>1.配置准备</h2><p><a href="https://mysql.com/">MySQL 官网</a></p><p>建议选择5.0以上和JDK8类似是主流的开发版本号<br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/sqldownloadpage.jpg" alt="下载界面"></p><p><a href="https://webyog.com/product/sqlyog/">可视化IDE: SQLyog</a></p><h2 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h2><p>1.解压mysql安装包 根目录新建my.ini文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[mysqld]<br>#端口<br>port<span class="hljs-operator">=</span><span class="hljs-number">3306</span><br>#数据库位置<br>basedir<span class="hljs-operator">=</span>D:\MySQL<span class="hljs-number">-5.7</span><span class="hljs-number">.20</span>\<br>#数据库data目录<br>datadir<span class="hljs-operator">=</span>D:\MySQL<span class="hljs-number">-5.7</span><span class="hljs-number">.20</span>\data\<br>#<span class="hljs-keyword">skip</span><span class="hljs-operator">-</span><span class="hljs-keyword">grant</span><span class="hljs-operator">-</span>tables<br></code></pre></td></tr></table></figure><p>2.使用CMD进入MySQL根目录 执行mysqlid -install语句(需管理员模式)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">PS C:\Users\admin<span class="hljs-operator">&gt;</span> CD D:\MySQL<span class="hljs-number">-5.7</span><span class="hljs-number">.20</span><br>mysqlid <span class="hljs-operator">-</span>install<br></code></pre></td></tr></table></figure><p>3.初始化数据文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqld --initialize-insecure --user=mysql<br></code></pre></td></tr></table></figure><p>4.重启mysql,进入mysql页面</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#启动mysql<br><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br>#停止mysql<br><span class="hljs-built_in">net</span> stop mysql<br>#进入mysql 默认没有密码<br>mysql -uroot -p<br></code></pre></td></tr></table></figure><p>5.进入mysql后，执行如下修改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> mysql.user <span class="hljs-keyword">set</span> authentication_string<span class="hljs-operator">=</span>password(<span class="hljs-string">&#x27;要修改的密码&#x27;</span>) <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span><span class="hljs-keyword">and</span> Host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-comment">-- 刷新权限</span><br>flush privileges;<br></code></pre></td></tr></table></figure><p>6.修改my.ini</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#注释掉如下就无需每次登录输入密码<br>skip-grant-tables<br></code></pre></td></tr></table></figure><p>7.重启MySQL安装完毕<br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/sqlsuccess.jpg" alt="登录成功进入sql指令集"></p><h2 id="3-SQLyog安装"><a href="#3-SQLyog安装" class="headerlink" title="3.SQLyog安装"></a>3.SQLyog安装</h2><ol><li>解压,傻瓜式安装</li><li>建立新连接对照MySQL的配置输入,点击连接即可进入界面</li></ol><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/sqlyogviews.jpg" alt="SQLyog登录视图"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | Reflex</title>
    <link href="/2022/06/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/Reflex/"/>
    <url>/2022/06/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/Reflex/</url>
    
    <content type="html"><![CDATA[<h2 id="1-反射概述"><a href="#1-反射概述" class="headerlink" title="1.反射概述"></a>1.反射概述</h2><ol><li>反射机制是在运行状态中，被视为动态语言的关键</li><li>对于任意类或对象，都能够获取他们的内部成员</li><li>这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</li><li>通过class文件对象，去使用该文件中的属性 构造器 方法等一切成员变量</li></ol><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/normalandrefelx.png" alt="反射示例图"></p><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/reflexfunction.png" alt="反射提供的功能"></p><h3 id="1-1创建对象"><a href="#1-1创建对象" class="headerlink" title="1.1创建对象"></a>1.1创建对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取指定对象赋给Class类</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> ReData.class;<br><br><span class="hljs-comment">//1.调用指定的构造器创建对象</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">gzq</span> <span class="hljs-operator">=</span> file.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> gzq.newInstance(<span class="hljs-string">&quot;Haryy&quot;</span>, <span class="hljs-number">28</span>);<br><span class="hljs-type">ReData</span> <span class="hljs-variable">rfd</span> <span class="hljs-operator">=</span> (ReData)obj;<br>System.out.println(rfd);<br><br><span class="hljs-comment">//2.调用指定的属性</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> file.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br><span class="hljs-comment">//设置为true时，可调用私有的类的成员;</span><br>age.set(rfd,<span class="hljs-number">10</span>);<br>System.out.println(rfd);<br><br><span class="hljs-comment">//3.调用指定的方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> file.getDeclaredMethod(<span class="hljs-string">&quot;info&quot;</span>);<br>info.invoke(rfd);<br><br><span class="hljs-comment">//4.通过反射调用私有方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">secretInfo</span> <span class="hljs-operator">=</span> file.getDeclaredMethod(<span class="hljs-string">&quot;secretInfo&quot;</span>, String.class);<br>secretInfo.setAccessible(<span class="hljs-literal">true</span>);<br>secretInfo.invoke(rfd,<span class="hljs-string">&quot;中国人中国魂儿.&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="1-2反射与封装"><a href="#1-2反射与封装" class="headerlink" title="1.2反射与封装"></a>1.2反射与封装</h3><p>正常情况下new对象的方式即可当不确定new哪个对象的时候，就使用反射</p><p>一个类若私有了某个成员，说明这个成员是封装写好的直接调用即可</p><p>但若需要必须使用反射来进行更改，故反射和封装不存在冲突</p><h3 id="1-3类的加载机制"><a href="#1-3类的加载机制" class="headerlink" title="1.3类的加载机制"></a>1.3类的加载机制</h3><ol><li>程序经过javac.exe后 会生产一或多个.class文件</li><li>使用java.exe进行对其中某一个解释运行,相当于</li><li>把某个字节码文件加载到内存中,这个过程就为类的加载机制</li><li>加载到内存中的类，称为运行时类，此时它就作为Class的一个实例</li><li>Class的实例就对应着一个运行时类</li><li>加载到内存中的运行时类，会缓存一定时间</li><li>此时就可以通过不同方式来获取此运行时类</li></ol><h3 id="1-4四种创建方式"><a href="#1-4四种创建方式" class="headerlink" title="1.4四种创建方式"></a>1.4四种创建方式</h3><p>方式一 调用运行时类的属性.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> ReData.class;<br>System.out.println(c1);<br></code></pre></td></tr></table></figure><p>方式二 通过运行时类对象，调用getClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ReData</span> <span class="hljs-variable">reData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReData</span>();<br>Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReData</span>&gt; c2 = reData.getClass();<br>System.out.println(c2);<br></code></pre></td></tr></table></figure><p>方式三 使用Class类的forName()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt; c3 = Class.forName(<span class="hljs-string">&quot;ReData&quot;</span>);<br>System.out.println(c3);<br><br>System.out.println(c1 == c2);<br>System.out.println(c1 == c3);<br></code></pre></td></tr></table></figure><p>方式四 使用类的加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cloader</span> <span class="hljs-operator">=</span> 此类类名称.class.getClassLoader();<br>Class&lt;?&gt; c4 = cloader.loadClass(<span class="hljs-string">&quot;ReData&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;系统加载器&quot;</span>+cloader);<br>System.out.println(c1 == c4);<br></code></pre></td></tr></table></figure><h3 id="1-5动态性理解"><a href="#1-5动态性理解" class="headerlink" title="1.5动态性理解"></a>1.5动态性理解</h3><ul><li>有时候我们造对象是不确定的</li><li>此时就可以通过反射的动态性在运行时候可以根据某些条件改变自身结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DyTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i&lt;<span class="hljs-number">100</span>;i++) &#123;<br>    <span class="hljs-comment">//2.获取0-2随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">locate</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">switch</span> (num)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                locate =<span class="hljs-string">&quot;java.util.Date&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                locate =<span class="hljs-string">&quot;java.lang.Object&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                locate =<span class="hljs-string">&quot;Test.Calculator&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//3.此时我们造的对象是不确定的</span><br>        <span class="hljs-comment">//(通过动态性就可以很好的解决这个问题)</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> getInstance(locate);<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//1.指定一个具体的实例使用反射创建</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String classpath)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    Class&lt;?&gt; cls = Class.forName(classpath);<br>    <span class="hljs-keyword">return</span> cls.newInstance();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-成员获取"><a href="#2-成员获取" class="headerlink" title="2.成员获取"></a>2.成员获取</h2><h3 id="2-1构造器"><a href="#2-1构造器" class="headerlink" title="2.1构造器"></a>2.1构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> ReData.class;<br><span class="hljs-comment">//获取运行时类所有public构造器(不包括父类)</span><br>Constructor[] cons = clz.getConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor : cons)&#123;<br>    System.out.println(constructor);<br>&#125;<br><br><span class="hljs-comment">//获取运行时类所有权限构造器(不包括父类)</span><br>Constructor[] dcs = clz.getDeclaredConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor1 : dcs)&#123;<br>    System.out.println(constructor1);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2属性方法"><a href="#2-2属性方法" class="headerlink" title="2.2属性方法"></a>2.2属性方法</h3><p>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取当前运行时类及父类public的属性</span><br>Class&lt;ReData&gt; dt = ReData.class;<br>Field[] fields = dt.getFields();<br><span class="hljs-keyword">for</span> (Field f : fields)&#123;<br>    System.out.println(f);<br>&#125;<br><span class="hljs-comment">//当前运行时类的所有属性(无父类属性)</span><br>Field[] dfs = dt.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field f1 : dfs)&#123;<br>    System.out.println(f1);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可获取运行时类及父类的public方法</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">ct</span> <span class="hljs-operator">=</span> ReData.class;<br>Method[] methods = ct.getMethods();<br><span class="hljs-keyword">for</span> (Method m : methods)&#123;<br>    System.out.println(m);<br>&#125;<br><br><span class="hljs-comment">//获取运行时类所有权限的方法(不包括父类)</span><br>Method[] methods1 = ct.getDeclaredMethods();<br><span class="hljs-keyword">for</span> (Method m1 : methods1)&#123;<br>    System.out.println(m1);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3接口泛型-重点"><a href="#2-3接口泛型-重点" class="headerlink" title="2.3接口泛型(重点)"></a>2.3接口泛型(重点)</h3><p>1.获取运行时类的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不带泛型</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> ReData.class;<br><span class="hljs-type">Class</span> <span class="hljs-variable">scs</span> <span class="hljs-operator">=</span> clz.getSuperclass();<br>System.out.println(scs);<br><span class="hljs-comment">//带泛型</span><br><span class="hljs-type">Type</span> <span class="hljs-variable">gsc</span> <span class="hljs-operator">=</span> clz.getGenericSuperclass();<br>System.out.println(gsc);<br></code></pre></td></tr></table></figure><p>2.获取运行时类带泛型的父类的泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">paramType</span> <span class="hljs-operator">=</span> (ParameterizedType)gsc;<br>Type[] type = paramType.getActualTypeArguments();<br>System.out.println(type[<span class="hljs-number">0</span>].getTypeName());<br><span class="hljs-comment">//对type强转为Class类型 调用getName方法</span><br>System.out.println(((Class)type[<span class="hljs-number">0</span>]).getName());<br></code></pre></td></tr></table></figure><p>3.获取运行时类的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">InterfaceTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//1.获取运行时类的接口</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;re_basic.ReData&quot;</span>);<br>    Class[] interfaces = clz.getInterfaces();<br>    System.out.println(interfaces[<span class="hljs-number">0</span>].getName());<br><br>    Type[] gifs = clz.getGenericInterfaces();<br>    System.out.println(gifs[<span class="hljs-number">0</span>].getTypeName());<br><br>    <span class="hljs-comment">//2.获取运行时类父类实现的接口</span><br>    Class[] fathers = clz.getSuperclass().getInterfaces();<br>    <span class="hljs-keyword">for</span> (Class c : fathers)&#123;<br>        System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4动态代理"><a href="#2-4动态代理" class="headerlink" title="2.4动态代理"></a>2.4动态代理</h3><ul><li>动态代理是在程序运行时根据需要动态的去创建目标类的代理对象</li><li>主要用于调试，远程方法调用</li><li>相对于静态代理，抽象类或接口中所声明的方法，都被转移到调用处理器一个集中的方法进行处理，可以更灵活的管理多个方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynimProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//被代理类对象</span><br>        <span class="hljs-type">SuperMan</span> <span class="hljs-variable">superMan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMan</span>();<br>        <span class="hljs-comment">//代理类对象</span><br>        <span class="hljs-type">Human</span> <span class="hljs-variable">human</span> <span class="hljs-operator">=</span> (Human)ProxyFactory.getProxyInstance(superMan);<br>        System.out.println(human.getBelief());<br>        human.eat(<span class="hljs-string">&quot;美国M9牛排&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Human</span>&#123;<br>    String <span class="hljs-title function_">getBelief</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(String food)</span>;<br>&#125;<br><br><span class="hljs-comment">//被代理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Human</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBelief</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;相信世界&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(String food)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我喜欢吃&quot;</span>+food);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span>&#123;<br>    <span class="hljs-comment">//1.调用此方法返回一个代理类对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">(Object obj)</span>&#123;<br>        <span class="hljs-type">MyIHR</span> <span class="hljs-variable">ihr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyIHR</span>();<br>        ihr.bind(obj);<br><br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), ihr);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIHR</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(Object obj)</span>&#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-comment">//通过代理类对象调用方法a时,就会自动盗用如下invoke()</span><br>    <span class="hljs-comment">//把被代理类要执行的方法a就声明在invoke()里</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        <span class="hljs-comment">//此method即为代理对象调用的方法,也作为被代理对象要调用的方法</span><br>        <span class="hljs-comment">//obj:被代理类的对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>        <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | NetCode</title>
    <link href="/2022/06/17/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/NetCode/"/>
    <url>/2022/06/17/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/NetCode/</url>
    
    <content type="html"><![CDATA[<h2 id="1-网络编程概述"><a href="#1-网络编程概述" class="headerlink" title="1.网络编程概述"></a>1.网络编程概述</h2><ul><li>作为网络语言，java提供了对网络应用程序的支持</li><li>提供了一系列网络类库java.net库，实现网络的连接</li><li>通过网络协议直接或间接的实现计算机的数据交换，通讯</li><li>网络编程的主要问题，如何精准定位网络上一或多台主机，或者主机上的特定的应用，确定主机后如何精准的进行数据传输。</li></ul><h2 id="2-通讯要素"><a href="#2-通讯要素" class="headerlink" title="2.通讯要素"></a>2.通讯要素</h2><h3 id="2-1IP概述"><a href="#2-1IP概述" class="headerlink" title="2.1IP概述"></a>2.1IP概述</h3><ol><li>IP作为计算的唯一标识,分为IPV4和IPV6</li><li>地址又分为公网地址和私有地址</li><li>使用inetAddress类表示Ip</li><li>本机回路地址：127.0.0.1 对应名称localhost</li></ol><h3 id="2-2Port概述"><a href="#2-2Port概述" class="headerlink" title="2.2Port概述"></a>2.2Port概述</h3><ol><li>端口号对应计算机上运行的进程,每个进程的端口号都不相同</li><li>公认端口 例如FTP为21 Telnet为23</li><li>注册端口 例如Tomcat8080 MySQL3306</li><li>动态私有端口 49152-65535</li><li>端口与IP进行组合得出网络套接字Socket</li></ol><h3 id="2-3网络通讯协议"><a href="#2-3网络通讯协议" class="headerlink" title="2.3网络通讯协议"></a>2.3网络通讯协议</h3><ul><li>OSI参考模型:模型过于理想化，未能在Internet进行广泛推广</li><li>TCP&#x2F;IP参考模型:事实上的国际化标准</li></ul><h3 id="2-4通讯协议图"><a href="#2-4通讯协议图" class="headerlink" title="2.4通讯协议图"></a>2.4通讯协议图</h3><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AEtcpudp.png" alt="通讯协议图"></p><h3 id="2-5InetAddress类"><a href="#2-5InetAddress类" class="headerlink" title="2.5InetAddress类"></a>2.5InetAddress类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//getByName中可以写IP也可以写域名</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">ipadd</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.kinozspace.top&quot;</span>);<br>System.out.println(ipadd);<br><br><span class="hljs-comment">//获取本机的IP地址</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">localHost</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>System.out.println(localHost);<br><br><span class="hljs-comment">//获取Host IP或者域名</span><br>System.out.println(ipadd.getHostAddress());<br>System.out.println(ipadd.getHostName());<br></code></pre></td></tr></table></figure><h2 id="3-传输层"><a href="#3-传输层" class="headerlink" title="3.传输层"></a>3.传输层</h2><ul><li>TCP&#x2F;IP协议簇</li><li>传输层两个重要协议TCP和UDP</li><li>TCP为传输控制协议</li><li>IP则为网络互连协议</li></ul><h3 id="3-1TCP协议"><a href="#3-1TCP协议" class="headerlink" title="3.1TCP协议"></a>3.1TCP协议</h3><ol><li>使用前，需建立TCP连接，形成数据传输通道</li><li>传输前进行”三次握手”方式，点对点通讯，是可靠的</li><li>进行通讯的两个应用进程 客户端 服务端</li><li>连接中可进行大量数据传输，类似于打电话</li><li>传输完毕，需释放已建立的连接，效率低</li></ol><p><strong>TCP us at java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一、客户端</span><br><span class="hljs-comment">//1.创建Socket对象 指明ip和端口号</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">ids</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;192.168.10.31&quot;</span>);<br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(ids, <span class="hljs-number">8899</span>);<br><br><span class="hljs-comment">//2.通过输出流发送数据</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">opsm</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>opsm.write(<span class="hljs-string">&quot;我是云南的，云南怒江的！&quot;</span>.getBytes());<br><span class="hljs-comment">//3.释放流资源</span><br><br><br><span class="hljs-comment">//二、服务器端</span><br><span class="hljs-comment">//1.创建服务器端serverSocket，指明客户端端口号</span><br><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">sst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8899</span>);<br><span class="hljs-comment">//2.接收客户端的数据</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">sk</span> <span class="hljs-operator">=</span> sst.accept();<br><span class="hljs-comment">//3.获取流输入</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">ism</span> <span class="hljs-operator">=</span> sk.getInputStream();<br><br><span class="hljs-comment">//4.相当于把获取到的所有字符存放在一个数组中</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = ism.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>    bais.write(buffer,<span class="hljs-number">0</span>,len);<br>&#125;<br><br><span class="hljs-comment">//5.通过toString方法把字节转换为字符串输出</span><br>System.out.println(bais.toString());<br>System.out.println(<span class="hljs-string">&quot;client ip:&quot;</span>+sk.getInetAddress());<br><span class="hljs-comment">//6.释放流资源</span><br></code></pre></td></tr></table></figure><h3 id="3-2UDP协议"><a href="#3-2UDP协议" class="headerlink" title="3.2UDP协议"></a>3.2UDP协议</h3><ol><li>无需建立连接，把数据源目的封装为数据包</li><li>数据包的大小限制在64kb内</li><li>发送不管对方是否准备好，接收方收到也不确定，是不可靠的</li><li>可广播发送,类似于发短信</li><li>发送数据结束时，无需释放资源，开销小，速度快</li><li>UDP是无需握手的,不管对面服务器是否存在直接发送一条数据过去</li></ol><p><strong>UDP us at java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一、发送端</span><br><span class="hljs-comment">//1.创建DSocket对象</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">sock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><span class="hljs-comment">//2.要发送的数据</span><br><span class="hljs-type">String</span>  <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;发送端发送了一条信息&quot;</span>;<br><span class="hljs-type">byte</span>[] bs = str.getBytes();<br><span class="hljs-comment">//3.数据封装为数据包</span><br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bs,bs.length, InetAddress.getLocalHost(),<span class="hljs-number">9090</span>);<br><span class="hljs-comment">//4.把数据发出</span><br>sock.send(data);<br><span class="hljs-comment">//5.流的释放</span><br>sock.close();<br><br><span class="hljs-comment">//二、接收端</span><br><span class="hljs-comment">//1.确定发送端端口号</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9090</span>);<br><span class="hljs-comment">//2.接收到数据</span><br><span class="hljs-type">byte</span>[] bt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">100</span>];<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bt,<span class="hljs-number">0</span>,bt.length);<br>socket.receive(data);<br><span class="hljs-comment">//3.数据转换为String输出</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data.getData(),<span class="hljs-number">0</span>,data.getLength()));<br><span class="hljs-comment">//4.流的释放</span><br>socket.close();<br></code></pre></td></tr></table></figure><h2 id="4-URL类"><a href="#4-URL类" class="headerlink" title="4.URL类"></a>4.URL类</h2><ul><li>通过URL类可以实现对网络资源的获取</li><li>是单线程的一种体现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取资源URL</span><br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;https://www.runoob.com/wp-content/uploads/2013/06/image-icon.png&quot;</span>);<br><span class="hljs-comment">//2.进行网络的连接</span><br><span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">ucn</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>ucn.connect();<br><br><span class="hljs-comment">//3.把网络资源存放在本地</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">IN</span> <span class="hljs-operator">=</span> ucn.getInputStream();<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;icon.png&quot;</span>);<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">byte</span>[] bt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span> ((len = IN.read(bt)) != -<span class="hljs-number">1</span>)&#123;<br>    fos.write(bt,<span class="hljs-number">0</span>,len);<br>&#125;<br><span class="hljs-comment">//4.释放流资源</span><br>IN.close();<br>fos.close();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | IOStream</title>
    <link href="/2022/06/05/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/IOStream/"/>
    <url>/2022/06/05/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/IOStream/</url>
    
    <content type="html"><![CDATA[<h2 id="1-IO流概述"><a href="#1-IO流概述" class="headerlink" title="1.IO流概述"></a>1.IO流概述</h2><ol><li>IO流是用来处理设备之间的数据传输</li><li>对数组的操作是流方式</li><li>对于流的操作的类都在IO包中</li><li>按流分为输出类 输入流</li><li>按角色分为节点流 处理流</li><li>按数据类型分为字节流 字符流</li><li>流的异常需使用try catch finally处理</li></ol><h3 id="1-1流的体系图"><a href="#1-1流的体系图" class="headerlink" title="1.1流的体系图"></a>1.1流的体系图</h3><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/io_picb.png" alt="IO体系结构"></p><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/io_pic1.png" alt="抽象基类实现类"></p><h2 id="2-字符流"><a href="#2-字符流" class="headerlink" title="2.字符流"></a>2.字符流</h2><ul><li>字符流主要用于处理纯文本文件</li><li>FileReader和FileWriter设计最常用的类</li></ul><h3 id="2-1FileReader"><a href="#2-1FileReader" class="headerlink" title="2.1FileReader"></a>2.1FileReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1:提供File对象</span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br><span class="hljs-comment">//2:提供流对象对File操纵</span><br>FileReader fr= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br><span class="hljs-comment">//3.数据的读入</span><br><span class="hljs-comment">//read()返回读入的一个字符,如果达到文件末尾，返回-1</span><br><span class="hljs-type">int</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> fr.read();<br><span class="hljs-keyword">while</span>(data!=-<span class="hljs-number">1</span>)&#123;<br>System.out.print((<span class="hljs-type">char</span>)data);<br>data=fr.read();<br>&#125;<br><span class="hljs-comment">//4.流的释放操作</span><br>fr.close();<br></code></pre></td></tr></table></figure><h3 id="2-2FileWriter"><a href="#2-2FileWriter" class="headerlink" title="2.2FileWriter"></a>2.2FileWriter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*写入操作若文件不存在会默认把文件创建出来</span><br><span class="hljs-comment">若文件存在，构造器append参数为true就是追加</span><br><span class="hljs-comment">若为false就是覆盖原有数据*/</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br><span class="hljs-comment">//append参数为true添加数据 为false覆盖原有数据</span><br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file,<span class="hljs-literal">true</span>);<br>fw.write(<span class="hljs-string">&quot;zh:这是一个txt类型的文件\n&quot;</span>);<br>fw.write(<span class="hljs-string">&quot;en:this is a file end with .txt\n&quot;</span>);<br>fw.close();<br></code></pre></td></tr></table></figure><h2 id="3-字节流"><a href="#3-字节流" class="headerlink" title="3.字节流"></a>3.字节流</h2><ul><li>字节流主要用于处理非文本文件</li><li>当只读取数据的时候字节流也可以处理文本文</li></ul><h3 id="3-1FileInputStream"><a href="#3-1FileInputStream" class="headerlink" title="3.1FileInputStream"></a>3.1FileInputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建流对象获取文件</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">lyo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br><br><span class="hljs-comment">//2.读取数据</span><br><span class="hljs-type">byte</span>[] bt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-comment">//循环判断如果读取的字节数据不为-1就执行</span><br><span class="hljs-keyword">while</span> ((len=lyo.read(bt)) != -<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//输出为数组</span><br>    <span class="hljs-comment">/*for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="hljs-comment">        System.out.print(bt[i]+&quot; &quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//输出为字符</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bt, <span class="hljs-number">0</span>, len);<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-comment">//3.释放流</span><br>lyo.close();<br></code></pre></td></tr></table></figure><h3 id="3-2FileOutputStream"><a href="#3-2FileOutputStream" class="headerlink" title="3.2FileOutputStream"></a>3.2FileOutputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IOAnnotation(&quot;字节流适用于除文本文件外文件的复制操作&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unTestCopy</span><span class="hljs-params">(String beginPath,String endPath)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>    <span class="hljs-comment">//1.创建流对象获取文件</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">pic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(beginPath);<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">cop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(endPath);<br><br>    <span class="hljs-comment">//2.读取数据(大型文件通常数组为1024个字节)</span><br>    <span class="hljs-type">byte</span>[] bt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = pic.read(bt)) != -<span class="hljs-number">1</span>)&#123;<br>        cop.write(bt,<span class="hljs-number">0</span>,len);<br>    &#125;<br><br>    <span class="hljs-comment">//3.释放流</span><br>    pic.close();<br>    cop.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-处理流"><a href="#4-处理流" class="headerlink" title="4.处理流"></a>4.处理流</h2><ol><li>处理流就是在原本流的基础上增加功能</li><li>处理流也是装配设计模式在Java语言中的体现</li></ol><h3 id="4-1缓冲流"><a href="#4-1缓冲流" class="headerlink" title="4.1缓冲流"></a>4.1缓冲流</h3><ol><li>缓冲流的内部提供了一个缓冲区域</li><li>可以使得数据的读写传输速度更快</li><li>在流的体系图中带有Buffered的即为缓冲流</li></ol><p><strong>字节流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">io_Copy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//1.创建字符流包装到缓冲流中  </span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;E:\\Videos\\滑板.mp4&quot;</span>);<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;board.mp4&quot;</span>);<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(origin);<br>    <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(after);<br><br>    <span class="hljs-comment">//2.数据的读写</span><br>    <span class="hljs-type">byte</span>[] bt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = bis.read(bt)) != -<span class="hljs-number">1</span>)&#123;<br>        bos.write(bt,<span class="hljs-number">0</span>,len);<br>    &#125;<br><br>    <span class="hljs-comment">//3.释放流(只释放外层即可)</span><br>    bis.close();<br>    bos.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>字符流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-comment">//</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rw_Copy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1.创建字符流包装到缓冲流中</span><br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>));<br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;my.txt&quot;</span>));<br><br>    <span class="hljs-comment">//2.方式一 使用char数组</span><br>    <span class="hljs-comment">/*char[] cr = new char[5];</span><br><span class="hljs-comment">    int len;</span><br><span class="hljs-comment">    while ((len = br.read(cr)) != -1)&#123;</span><br><span class="hljs-comment">        bw.write(cr,0,len);</span><br><span class="hljs-comment">        bw.flush();//刷新缓冲区,后台会默认做无需手动实现</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//2.方式二 使用String以及readLine方法</span><br>    String num;<br>    <span class="hljs-keyword">while</span> ((num = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>        bw.write(num+<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//3.释放流(只释放外层即可)</span><br>    br.close();<br>    bw.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2转换流"><a href="#4-2转换流" class="headerlink" title="4.2转换流"></a>4.2转换流</h3><ol><li>实现字节流与字符流之间的转换</li><li>InputStreamReader 字节-&gt;字符 相当于解码的过程</li><li>OutputStreamWriter 字符-&gt;字节 相当于编码的过程<br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/chartobyte.png" alt="两者的转换图"></li></ol><p><strong>解码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//InputStreamReader把字节转换为字符</span><br><span class="hljs-comment">//1.获取流对象,添加进转换流中</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">files</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br><span class="hljs-comment">//可以指定字符格式为gbk,也可以不写即为默认</span><br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(files,<span class="hljs-string">&quot;gbk&quot;</span>);<br><br><span class="hljs-comment">//2.读取数据</span><br><span class="hljs-type">int</span> len;<br><span class="hljs-type">char</span>[] cr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">while</span> ((len = isr.read(cr)) != -<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//通过String把数据通过控制台打印</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cr, <span class="hljs-number">0</span>, len);<br>    System.out.print(data);<br>&#125;<br><span class="hljs-comment">//3.关闭流</span><br>isr.close();<br><br></code></pre></td></tr></table></figure><p><strong>编码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//相当于编码操作</span><br><span class="hljs-comment">//1.创建转换流以及流对象 确定转换的字符集</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;my.txt&quot;</span>);<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;my_utf8.txt&quot;</span>);<br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">gbk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(origin, <span class="hljs-string">&quot;gbk&quot;</span>);<br><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">utf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(after, <span class="hljs-string">&quot;utf-8&quot;</span>);<br><br><span class="hljs-comment">//2.数据读写操作</span><br><span class="hljs-type">int</span> len;<br><span class="hljs-type">char</span>[] cr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">while</span> ((len = gbk.read(cr)) != -<span class="hljs-number">1</span>)&#123;<br>    utf.write(cr,<span class="hljs-number">0</span>,len);<br>&#125;<br><br><span class="hljs-comment">//3.关闭流</span><br>gbk.close();<br>utf.close();<br></code></pre></td></tr></table></figure><h3 id="4-3对象流"><a href="#4-3对象流" class="headerlink" title="4.3对象流"></a>4.3对象流</h3><ol><li>用于存储和读取基本数据类型或对象</li><li>可以把Java对象写入数据源中||从数据源恢复</li><li>对象流不能操纵被static和transient修饰的成员变量</li><li>反序列化ObjectInputStream</li><li>序列化ObjectOutputStream</li></ol><p><strong>自定义类序列化</strong></p><ol><li>实现serializable接口</li><li>提供serialVersionId常量</li><li>类中的所有属性也必须是序列化的</li></ol><p><strong>对文件的操纵</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-comment">//序列化过程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">OOS</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myText.dat&quot;</span>));<br><br>    <span class="hljs-comment">//添加对象到流文件中</span><br>    oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;this is a secret file&quot;</span>));<br>    oos.flush();<br>    oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjData</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-number">12.3</span>));<br>    oos.flush();<br><br>    oos.close();<br>&#125;<br><br><span class="hljs-meta">@Test</span><span class="hljs-comment">//反序列化过程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">OIS</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;myText.dat&quot;</span>));<br><br>    <span class="hljs-comment">//获取到数据强转为String输出</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String)obj;<br><br>    <span class="hljs-comment">//自定义类</span><br>    <span class="hljs-type">ObjData</span> <span class="hljs-variable">oda</span> <span class="hljs-operator">=</span> (ObjData)ois.readObject();<br><br>    <span class="hljs-comment">//获取到序列化文件中数据并输出</span><br>    System.out.println(str);<br>    System.out.println(oda);<br><br>    ois.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4其他流"><a href="#4-4其他流" class="headerlink" title="4.4其他流"></a>4.4其他流</h3><p><strong>标准输入输出流</strong></p><ul><li>System.in 标准输入流</li><li>System.out 标准输出流</li></ul><p><strong>打印流</strong></p><ul><li>PrintStream PrintWriter</li><li>java最基本的输出语句就使用到了打印流</li></ul><p><strong>数据流</strong></p><ul><li>DataInputStream DataOutPutStream</li><li>用于读取写出基本数据类型的变量或字符串</li></ul><h3 id="4-5-RAF"><a href="#4-5-RAF" class="headerlink" title="4.5 RAF"></a>4.5 RAF</h3><ul><li>RandomAccessFile声明在IO中但直接继承Object</li><li>即可作为输出流也可作为输入流</li><li>实现了DataInput DataOutput接口</li><li>创建以后需指定mode参数[r rw rwd rws]说明查看API</li><li>作为输入流时会对原本文件内容进行从头覆盖</li><li>若使用了seek( )则在指定光标位置插入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建流对象,传入文件</span><br><span class="hljs-type">File</span> <span class="hljs-variable">fl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;1.jpg&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">nfl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;2.jpg&quot;</span>);<br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">raf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(fl,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(nfl,<span class="hljs-string">&quot;rw&quot;</span>);<br><br><span class="hljs-comment">//2.读写</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = raf.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>    rag.write(bytes,<span class="hljs-number">0</span>,len);<br>&#125;<br><span class="hljs-comment">//3.释放流</span><br>raf.close();<br>rag.close();<br><br><span class="hljs-comment">//若需处理字符文件可以通过seek方法指定索引位置</span><br></code></pre></td></tr></table></figure><h2 id="5-File类"><a href="#5-File类" class="headerlink" title="5.File类"></a>5.File类</h2><ol><li>在java中对文件和文件目录路径的抽象表示形式</li><li>File在这里应该理解为路径，文件路径或文件夹路径</li><li>File类提供了对文件操作的基本方法,但没提供修改相关操作，需读写就需要使用IO流</li><li>File类对象会作为参数传入IO流中</li></ol><p>相对路径:指相较于某个路径下所指明的路径</p><p>绝对路径:指包含盘符的所有路径</p><h3 id="5-1常用方法"><a href="#5-1常用方法" class="headerlink" title="5.1常用方法"></a>5.1常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">createNewFile    创建指定类型文件<br>mkdir            创建文件夹<br>mkdirs           创建文件夹,若父类文件夹不存在,也会自动生成<br><span class="hljs-type">File</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;Go.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;Java.txt&quot;</span>);<br><span class="hljs-comment">//路径相同的情况下,进行换名,如果不同就是剪贴和改名</span><br>System.out.println(a.renameTo(b)); <br>a.delete() 删除文件不走回收站<br><br>判断方法<br>isDirectory    判断是不是一个根目录<br>isFile         判断是不是一个文件<br>canRead        判断文件可不可读<br>canWrite       判断文件可不可写<br>isHidden       判断是不是隐藏文件<br><br>获取方法<br>String <span class="hljs-title function_">getAbsolutePath</span><span class="hljs-params">()</span>;  获取绝对路径<br>String  <span class="hljs-title function_">getPath</span><span class="hljs-params">()</span>;         获取路径<br>String  <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;         获取名称<br><span class="hljs-type">long</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>;             获取长度字节数<br><span class="hljs-type">long</span> <span class="hljs-title function_">lastModified</span><span class="hljs-params">()</span>;       获取最后一次修改时间,毫秒值<br>获取指定目录下的所有文件或文件夹的名称数组<br>String[] list();<br>获取指定目录下的所有文件或文件夹的File数组           <br>File[] listFiles();        <br></code></pre></td></tr></table></figure><h3 id="5-2构造器"><a href="#5-2构造器" class="headerlink" title="5.2构造器"></a>5.2构造器</h3><p>根据一个路径得到File对象<br>File(String pathname):</p><p>根据一个目录和一个子文件&#x2F;目录得到File对象<br>File(String parent,String child):</p><p>根据一个父file对象和一个子文件&#x2F;目录得到File对象<br>File(File parent,String child):</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | Collection</title>
    <link href="/2022/05/23/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/JavaCollection/"/>
    <url>/2022/05/23/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/JavaCollection/</url>
    
    <content type="html"><![CDATA[<h2 id="1-集合概述"><a href="#1-集合概述" class="headerlink" title="1.集合概述"></a>1.集合概述</h2><p>为了方便多个对象操作，需要对它们进行存储</p><p>相对于数组来说集合就相当于数组的升级版</p><p>集合就像是一个容器，可以动态的把多个对象放在容器中</p><p>同时Collection接口也是单例模式的体现</p><h3 id="1-1集合与数组对比"><a href="#1-1集合与数组对比" class="headerlink" title="1.1集合与数组对比"></a>1.1集合与数组对比</h3><p><strong>数组</strong> </p><p>基本&#x2F;引用数据类型都OK<br>长度固定 不能自动增长，有序 可重复<br>用于元素固定的情况<br>提供的方法有限，很多功能需要我们自己去定义</p><p><strong>集合</strong> </p><p>基本(指包装类)&#x2F;引用数据类型都OK<br>长度可变  根据元素增长而增长，可以有序可以无序<br>用于元素不固定的情况<br>提供了丰富的方法，使用时直接调用即可</p><h3 id="1-2体系图"><a href="#1-2体系图" class="headerlink" title="1.2体系图"></a>1.2体系图</h3><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/javacollections.jpg" alt="集合接口和各种实例类之间的关系图"></p><h2 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2.Collection接口"></a>2.Collection接口</h2><h3 id="2-1通用方法"><a href="#2-1通用方法" class="headerlink" title="2.1通用方法"></a>2.1通用方法</h3><p>适用于常用的List Set Map接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加元素</span><br>s.add(<span class="hljs-string">&quot;ho&quot;</span>);<br><span class="hljs-comment">//删除其中指定字符</span><br>s.remove(<span class="hljs-string">&quot;oooo&quot;</span>);<br><span class="hljs-comment">//判断是否包含</span><br>s.contains(<span class="hljs-string">&quot;aaa&quot;</span>)<br><span class="hljs-comment">//判断是否为空字符串</span><br>s.isEmpty()<br><span class="hljs-comment">//判断字符长度</span><br>s.size()<br><span class="hljs-comment">//清空集合元素</span><br>s.clear();<br><br><span class="hljs-comment">//cl1所有元素添加到cl2集合</span><br>cl1.addAll(cl2);<br><span class="hljs-comment">//把集合a和b的差集删除</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">boo</span> <span class="hljs-operator">=</span> a.removeAll(b);<br><span class="hljs-comment">//判断c1是否包含c2</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">boo</span> <span class="hljs-operator">=</span> c1.containsAll(c2);<br><span class="hljs-comment">//取交集,最终的结果赋给了c1</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">boo</span> <span class="hljs-operator">=</span> c1.retainAll(c2);<br><span class="hljs-comment">//比较两个元素</span><br>a.equals(b);<br><span class="hljs-comment">//获取hash码</span><br>c1.hashCode()<br></code></pre></td></tr></table></figure><h3 id="2-2数组转换"><a href="#2-2数组转换" class="headerlink" title="2.2数组转换"></a>2.2数组转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//集合--&gt;数组</span><br><span class="hljs-comment">//使用collection下的通用方法toArray()</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>arr.add(<span class="hljs-string">&quot;H&quot;</span>);<br>arr.add(<span class="hljs-string">&quot;i&quot;</span>);<br>Object[] obj = arr.toArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; obj.length; i++) &#123;<br>    System.out.print(obj[i]+<span class="hljs-string">&quot;、&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//数组--&gt;集合</span><br>使用Arrays的方法asList()<br><span class="hljs-type">List</span> <span class="hljs-variable">asList</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;);<br>System.out.println(asList);<br></code></pre></td></tr></table></figure><h3 id="2-3迭代器"><a href="#2-3迭代器" class="headerlink" title="2.3迭代器"></a>2.3迭代器</h3><ol><li>iterator用于遍历集合，同时也是设计模式的一种</li><li>通过提供一种方法去访问容器对象中的元素</li><li>这样做，不会去暴漏该对象的内部细节</li><li>hashNext和next是最常用的方法</li><li>iterator不是容器，实际的容器是集合对象</li><li>iterator只负责对集合中的元素进行条件迭代<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//迭代器遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">IteratorTravers</span><span class="hljs-params">(Collection c)</span>&#123;<br>    <span class="hljs-comment">//迭代器初始化调用collection下的iterator方法</span><br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">ddq</span> <span class="hljs-operator">=</span> c.iterator();<br>    <span class="hljs-comment">//判断是否还有下一个元素</span><br>    <span class="hljs-keyword">while</span> (ddq.hasNext())&#123;<br>        <span class="hljs-comment">//next让指针下移，下移以后集合位置上的元素返回</span><br>        System.out.println(ddq.next());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//foreach遍历 JDK5+</span><br><span class="hljs-keyword">for</span> (集合元素类型 局部变量:集合对象)&#123;<br>    System.out.print(要遍历的结构名称+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-List接口"><a href="#3-List接口" class="headerlink" title="3.List接口"></a>3.List接口</h2><p>相同点都实现了List，存储有序的，可重复的</p><p><strong>三者的异同</strong></p><p>ArrayList JDK1.2 线程不安全  作为List主要的实现类</p><p>Vector JDK1.0 线程安全 已经接近于Deprecated</p><p>LinkedList JDK1.2 底层为双向链表 频繁插入，删除操作，使用更多</p><h3 id="3-1通用方法"><a href="#3-1通用方法" class="headerlink" title="3.1通用方法"></a>3.1通用方法</h3><ul><li>collection接口方法通用</li><li>添加元素所属类一定要重equals方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取指定索引元素</span><br>elements.get(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//2.指定元素首次出现或末尾出现索引值(可重复性)</span><br>elements.indexOf(<span class="hljs-number">2262</span>)<br>elements.lastIndexOf(<span class="hljs-number">2262</span>)<br><span class="hljs-comment">//3.包括头不包括尾[左闭右开]</span><br>elements.subList(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2ArrayList"><a href="#3-2ArrayList" class="headerlink" title="3.2ArrayList"></a>3.2ArrayList</h3><p><strong>JDK7类似饿汉式</strong></p><ol><li>底层默认创建了长度为10的Object类型数组</li><li>如果add的元素超过默认长度，就会自动扩容</li><li>默认扩容为原数组容量的1.5倍，原有的自动赋值到新数组中</li><li>若元素固定，建议使用带参构造器</li></ol><p><strong>JDK8类似懒汉式</strong></p><ol><li>底层数组的初始化是{ },并没有创建长度为10的数组</li><li>当调用add方法时，才会创建长度为10的数组</li><li>后续和7基本一致</li></ol><h3 id="3-3LinkedList"><a href="#3-3LinkedList" class="headerlink" title="3.3LinkedList"></a>3.3LinkedList</h3><p>底层为双向链表可以很方便的头尾插入删除的数据</p><ol><li>创建一个LinkedlList对象后，底层创建了两个Node类型的属性</li><li>属性为next和prev，此时默认的值为null</li><li>调用add方法后把元素封装到Node中，此时创建了Node对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Node的定义</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-Set接口"><a href="#4-Set接口" class="headerlink" title="4.Set接口"></a>4.Set接口</h2><p>相同点都实现了Set，存储无序的，不可重复的</p><p>Set没定义新的方法，都使用Collection接口的方法</p><p><strong>三者的异同</strong></p><ol><li><p>HashSet 底层数组+链表(8之后改为HashMap)</p></li><li><p>HashSet  set接口的主要实现类，线程不安全，可存放null值</p></li><li><p>LinkedHashSet  HashSet的子类 底层为双向链表 根据数据排序</p></li><li><p>有序为假象 因为存储的数据同时维护了两个引用用链接前后数据</p></li><li><p>TreeSet 底层红黑树 可按照添加对象的指定属性，进行排序</p></li></ol><h3 id="4-1无序性"><a href="#4-1无序性" class="headerlink" title="4.1无序性"></a>4.1无序性</h3><p>以HashSet为例 不等同于随机性</p><p>所存储元素在底层数组中不是按照索引排列添加</p><p>而是按照哈希值来决定具体的顺序</p><h3 id="4-2不可重复"><a href="#4-2不可重复" class="headerlink" title="4.2不可重复"></a>4.2不可重复</h3><p>添加的元素按照equals判断时，不可返回true</p><p>即，相同的元素只能添加一个</p><h3 id="4-3HashSet"><a href="#4-3HashSet" class="headerlink" title="4.3HashSet"></a>4.3HashSet</h3><p><strong>存储过程</strong></p><p>add元素a，会调用元素a类中的hashCode( )，计算哈希值</p><p>哈希值通过算法计算出在HashSet底层数组中存放位置(即索引)</p><p>判断数组这个索引位置有没有值</p><p>若无就添加成功，若有单个或多个链表形式的元素，比较哈希值</p><p>若哈希值不同添加成功，若相同，继续调用元素a类中的equals方法</p><p>返回true添加失败 返回false添加成功</p><p>添加元素所属类一定要重写hashCode和equals且尽可能保持一致</p><p><strong>七上八下</strong><br>Jdk7 元素a放在数组中，指向原来索引<br>JDK8 原来元素放在数组中，指向元素a</p><h3 id="4-4TreeSet"><a href="#4-4TreeSet" class="headerlink" title="4.4TreeSet"></a>4.4TreeSet</h3><p>底层 红黑树 可按照添加对象的指定属性，进行排序</p><p>TreeSet中添加的元素类型必须为相同类</p><p>和比较器一样提供了两种排序方法 自然排序和定制排序</p><p>定制排序把排序参数放在TreeSet构造器中即可不影响自然排序</p><p>其实就是对Comparable和Comparator的具体使用</p><h2 id="5-Map接口"><a href="#5-Map接口" class="headerlink" title="5.Map接口"></a>5.Map接口</h2><ul><li>JDK7以前为 数组+链表</li><li>JDK8开始为 数组+链表+红黑树</li><li>Map双列数据 存储为key-value对的数据</li><li>底层都是由哈希算法实现的</li></ul><p><strong>三者异同处</strong></p><ol><li>HashMap Map主要实现类 线程不安全 可存放null的键值对</li><li>LinkedHashMap ↖子类 可根据数据添加顺序排序 底层双向链表</li><li>Hashtable 线程安全  不可存放null的键值对 基本弃用</li><li>Properties ↖子类 常用于处理配置文件 键值对都为String类型</li><li>TreeMap 按照键值对中键进行排序 实现排序遍历 底层红黑树</li></ol><h3 id="5-1键值对理解"><a href="#5-1键值对理解" class="headerlink" title="5.1键值对理解"></a>5.1键值对理解</h3><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/keyvalues.png" alt="键值对数据结构图形"></p><ul><li>key是无序的 不可重复的  使用set存储</li><li>value是无序的 可重复的 使用collection存储</li><li>key和value构成entry对象</li><li>entry特点：无序的 不可重复的 使用set存储所有entry</li><li>HashMap 若key为自定义类，必须重写equals和hashCode</li><li>TreeMap 需考虑比较器的问题</li></ul><h3 id="5-2通用方法"><a href="#5-2通用方法" class="headerlink" title="5.2通用方法"></a>5.2通用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;Ho&quot;</span>,<span class="hljs-number">15333</span>); <span class="hljs-comment">//添加</span><br>map.putAll(map2);     <span class="hljs-comment">//添加一个map到另外一个map</span><br>map.remove(<span class="hljs-string">&quot;Po&quot;</span>,<span class="hljs-number">13</span>); <span class="hljs-comment">//删除</span><br>map.size();          <span class="hljs-comment">//键值对的数量</span><br>map.clear();         <span class="hljs-comment">//清楚</span><br>map.containsKey(<span class="hljs-string">&quot;A&quot;</span>);   <span class="hljs-comment">//是否包含指定key</span><br>map.containsValue(<span class="hljs-string">&quot;2333&quot;</span>);  <span class="hljs-comment">//是否包含指定value</span><br><br>map.isEmpty();  <span class="hljs-comment">//判断是否为空</span><br>map.equals(map2);  <span class="hljs-comment">//判断两个map元素是否全部相等</span><br>map.values();   <span class="hljs-comment">//获取所有value</span><br>map.keySet();   <span class="hljs-comment">//获取所有key</span><br>in.entrySet();  <span class="hljs-comment">//用于遍历</span><br>Entry.getKey();  <span class="hljs-comment">//Entry接口方法获取key</span><br>Entry.getValue(); <span class="hljs-comment">//Entry接口方法获取value</span><br></code></pre></td></tr></table></figure><h3 id="5-3Map遍历"><a href="#5-3Map遍历" class="headerlink" title="5.3Map遍历"></a>5.3Map遍历</h3><p><strong>分别遍历</strong></p><ol><li>values方法获取所有value元素</li><li>keySet方法获取所有key元素</li><li>通过Collection或Set存放</li><li>使用迭代器或foreach进行遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;河南&quot;</span>,<span class="hljs-number">41</span>);<br>map.put(<span class="hljs-string">&quot;江苏&quot;</span>,<span class="hljs-number">32</span>);<br>map.put(<span class="hljs-string">&quot;山东&quot;</span>,<span class="hljs-number">34</span>);<br>map.put(<span class="hljs-string">&quot;浙江&quot;</span>,<span class="hljs-number">33</span>);<br><span class="hljs-type">Collection</span> <span class="hljs-variable">mapV</span> <span class="hljs-operator">=</span> map.values();<br><span class="hljs-keyword">for</span> (Object obj : mapV) &#123;<br>    System.out.println(obj);<br>&#125;<br><br><span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;河南&quot;</span>,<span class="hljs-number">41</span>);<br>map.put(<span class="hljs-string">&quot;江苏&quot;</span>,<span class="hljs-number">32</span>);<br>map.put(<span class="hljs-string">&quot;山东&quot;</span>,<span class="hljs-number">34</span>);<br>map.put(<span class="hljs-string">&quot;浙江&quot;</span>,<span class="hljs-number">33</span>);<br><span class="hljs-type">Set</span> <span class="hljs-variable">mapS</span> <span class="hljs-operator">=</span> map.keySet();<br><span class="hljs-keyword">for</span> (Object obj : mapS) &#123;<br>    System.out.println(obj);<br>&#125;<br></code></pre></td></tr></table></figure><strong>组合遍历</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一:通过key获取value</span><br>Map&lt;String,Integer&gt; datas = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>datas.put(<span class="hljs-string">&quot;Po&quot;</span>,<span class="hljs-number">13</span>);<br>datas.put(<span class="hljs-string">&quot;Lo&quot;</span>,<span class="hljs-number">14</span>);<br>datas.put(<span class="hljs-string">&quot;Ho&quot;</span>,<span class="hljs-number">15</span>);<br>Set&lt;String&gt; sets = datas.keySet();<br>Iterator&lt;String&gt; iterator = sets.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>    <span class="hljs-comment">//key值</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>    <span class="hljs-comment">//通过key获取value</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> datas.get(key);<br>    System.out.println(key+<span class="hljs-string">&quot;--&gt;&quot;</span>+value);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式二:使用EntrySet方法</span><br><span class="hljs-comment">//1.通过entrySet获取一个Set类型的变量</span><br>Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = datas.entrySet();<br><span class="hljs-comment">//2.调用迭代器</span><br>Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entries.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>    <span class="hljs-comment">//3.把iterator转换为Entry类型</span><br>    Map.Entry&lt;String, Integer&gt; entryData = iterator.next();<br>    <span class="hljs-comment">//4.调用Entry中方法，完成key_value的遍历</span><br>    System.out.println(entryData.getKey()+<span class="hljs-string">&quot;-&gt;&quot;</span>+entryData.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式三:使用foreach</span><br><span class="hljs-comment">//foreach遍历 需确定泛型</span><br>HashMap&lt;String,Integer&gt; datas = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String,Integer&gt; Entry :datas.entrySet())&#123;<br>    System.out.println(Entry.getKey()+<span class="hljs-string">&quot;=&quot;</span>+Entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-4HashMap"><a href="#5-4HashMap" class="headerlink" title="5.4HashMap"></a>5.4HashMap</h3><p><strong>实现原理JDK7</strong></p><ul><li>实例化结束默认创建16位的数组Entry[] table 并Put一个键值对</li><li>首先会调用key所在类的hashCode()计算哈希码 </li><li>通过算法得到在Entry数组中的位置</li><li>若位置为空 key-value存放成功</li><li>若位置不为空 比较key和已经存在数据的哈希值</li><li>若哈希值也不相同 key-value存放成功 情况2</li><li>若和某一个数据哈希值相同 使用key所在类的equals继续比较</li><li>返回false key-value存放成功 情况3</li><li>返回true 添加的替换掉已有的</li><li>情况2和3 此时的key-value和原有数据都是用链表存放</li><li>当超出临界值(12,并要存放位置非空)默认扩容量：初始化的2倍</li></ul><p><strong>JDK8以后变化</strong></p><ul><li>只有调用put方法时 才会创建16位的数组 名称由Entry改为Node</li><li>底层的结构增加了红黑树 主要为了提高查找效率</li><li>当数组上有一索引位置上元素以链表存储个数 &gt;8 &amp;&amp; 数组length&gt;64</li><li>此时索引位置上存储结构改为红黑树</li></ul><h3 id="5-5TreeMap"><a href="#5-5TreeMap" class="headerlink" title="5.5TreeMap"></a>5.5TreeMap</h3><ul><li>底层 红黑树 按照键值对中键进行排序 实现排序遍历</li><li>key必须为同一个类创建的对象</li><li>和TreeSet一样分自然排序和定制排序</li><li>和比较器一样提供了两种排序方法 自然排序和定制排序</li><li>定制排序把排序参数放在TreeSet构造器中即可不影响自然排序</li><li>其实就是对Comparable和Comparator的具体使用</li></ul><h3 id="5-6LinkedHashMap"><a href="#5-6LinkedHashMap" class="headerlink" title="5.6LinkedHashMap"></a>5.6LinkedHashMap</h3><ul><li>频繁遍历可多使用LinkedHashMap</li><li>通过它的可得知继承 了HashMap类中的Node方法</li><li>同时多了before和after两个指针用于记录添加元素的先后顺序</li><li>最终达到遍历时有序的一种效果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HashMap.Node subclass for normal LinkedHashMap entries.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>.Node&lt;K,V&gt; &#123;<br>    Entry&lt;K,V&gt; before, after;<br>    Entry(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-built_in">super</span>(hash, key, value, next);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-7Properties"><a href="#5-7Properties" class="headerlink" title="5.7Properties"></a>5.7Properties</h3><p>主要用于一些配置文件的获取</p><p>具体使用到JDBC会提起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-comment">//1.加载配置文件</span><br>p.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d_Collections/jdbc.properties&quot;</span>));<br><span class="hljs-comment">//2.通过key获取配置文件value</span><br>p.getProperty(<span class="hljs-string">&quot;name&quot;</span>);<br>p.getProperty(<span class="hljs-string">&quot;age&quot;</span>);<br>p.getProperty(<span class="hljs-string">&quot;school&quot;</span>);<br><span class="hljs-comment">//3.输出</span><br>System.out.println(p);<br></code></pre></td></tr></table></figure><h2 id="6-Collections类"><a href="#6-Collections类" class="headerlink" title="6.Collections类"></a>6.Collections类</h2><ol><li>和Arrays相同提供了Collection和Map通用的静态方法</li><li>为线程不安全的类提供了相对应的安全方法</li></ol><h3 id="6-1常用方法"><a href="#6-1常用方法" class="headerlink" title="6.1常用方法"></a>6.1常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.sort(data); <span class="hljs-comment">//排序 默认自然排序</span><br>Collections.shuffle(data);  <span class="hljs-comment">//打乱集合元素</span><br>Collections.swap(dataB,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//交换指定索引位置</span><br>Collections.binarySearch(al,<span class="hljs-string">&quot;g&quot;</span>); <span class="hljs-comment">//二分查找</span><br><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[al.size()]);<br>Collections.copy(list,al); <span class="hljs-comment">//赋值集合1全部元素到集合2</span><br>Collections.frequency(al, <span class="hljs-string">&quot;c&quot;</span>); <span class="hljs-comment">//相同元素出现的次数</span><br></code></pre></td></tr></table></figure><h3 id="6-2线程安全相关"><a href="#6-2线程安全相关" class="headerlink" title="6.2线程安全相关"></a>6.2线程安全相关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//synchronizedXxx xxx即对应集合接口的方法</span><br><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> Collections.synchronizedList(arr);<br><span class="hljs-type">Collection</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> Collections.synchronizedCollection(arr2);<br><span class="hljs-type">Map</span> <span class="hljs-variable">newmap</span> <span class="hljs-operator">=</span> Collections.synchronizedMap(map);<br><span class="hljs-type">Set</span> <span class="hljs-variable">sets</span> <span class="hljs-operator">=</span> Collections.synchronizedSet(arr3);<br></code></pre></td></tr></table></figure><h2 id="7-优选文献"><a href="#7-优选文献" class="headerlink" title="7.优选文献"></a>7.优选文献</h2><ol><li><a href="https://blog.csdn.net/luowei201711/article/details/79982595?spm=1001.2014.3001.5506">CSDN luowei201711 简易理解集合</a></li><li><a href="https://blog.csdn.net/feiyanaffection/article/details/81394745?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165335195416781483784188%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165335195416781483784188&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-81394745-null-null.142%5Ev10%5Econtrol,157%5Ev8%5Econtrol&utm_term=java%E9%9B%86%E5%90%88&spm=1018.2226.3001.4187">CSDN phial03 高赞高浏览 细谈集合</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用类 | Others</title>
    <link href="/2022/05/18/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2022/05/18/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-比较器"><a href="#1-比较器" class="headerlink" title="1.比较器"></a>1.比较器</h2><ol><li>对象正常只能&#x3D;&#x3D;、!&#x3D;比较，但不能使用 &lt; 和 &gt;</li><li>真实开发中，有时候需要对多个对象进行排序，就需要比较对象大小</li><li>Comparable自然排序 用于类继承长期使用</li><li>Comparator定制排序 用于临时比较,不影响原本排序规则</li></ol><h3 id="1-1Comparable"><a href="#1-1Comparable" class="headerlink" title="1.1Comparable"></a>1.1Comparable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.实现Comparable接口(属性/set/get方法略)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span> &#123;<br><span class="hljs-comment">//2.按照价格从低到高，产品名称从高到低</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span>&#123;<br>    <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Goods)&#123;<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">goods</span> <span class="hljs-operator">=</span> (Goods)o;<br>        <span class="hljs-comment">//3.当前对象大于形参 输出正数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.price &gt; goods.price)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//4.当前对象小于形参 输出负数</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.price &lt; goods.price)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//若存在相同价钱 用名称字母进行比较来排序</span><br>            <span class="hljs-comment">//默认为从低到高进行排序 加个-就是反向操作</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-built_in">this</span>.name.compareTo(goods.name);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;类型不一致&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//具体实现可以新建Goods数组对象</span><br><span class="hljs-comment">//然后通过Arrays的sort和toString方法对它进行遍历</span><br></code></pre></td></tr></table></figure><h3 id="1-2Comparator"><a href="#1-2Comparator" class="headerlink" title="1.2Comparator"></a>1.2Comparator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//书写格式</span><br><span class="hljs-type">Comparator</span> <span class="hljs-variable">bjq</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>    &#125;<br>&#125;    <br><span class="hljs-comment">//使用体现</span><br><span class="hljs-comment">//按照产品名称从低到高，再按照价格从高到低</span><br><span class="hljs-comment">//1.sort为排序，new Comparator里面为排序规则(匿名接口)</span><br>Arrays.sort(goods,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> Goods &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Goods)&#123;<br>            <span class="hljs-type">Goods</span> <span class="hljs-variable">goods1</span> <span class="hljs-operator">=</span> (Goods)o1;<br>            <span class="hljs-type">Goods</span> <span class="hljs-variable">goods2</span> <span class="hljs-operator">=</span> (Goods)o2;<br>            <span class="hljs-comment">//1若商品名称相同</span><br>            <span class="hljs-keyword">if</span> (goods1.getName().equals(goods2.getName()))&#123;<br>                <span class="hljs-comment">//2商品价格从高到低排列</span><br>                <span class="hljs-keyword">return</span> -Double.compare(goods1.getPrice(),goods2.getPrice());<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//3名称不同时，商品价格从高到低</span><br>                <span class="hljs-keyword">return</span> goods1.getName().compareTo(goods2.getName());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;类型不一致&quot;</span>);<br>    &#125;<br><br>&#125;);<br>System.out.println(Arrays.toString(goods));<br></code></pre></td></tr></table></figure><h2 id="2-枚举类"><a href="#2-枚举类" class="headerlink" title="2.枚举类"></a>2.枚举类</h2><ol><li>类的对象是有限个，且确定的</li><li>当需要定义一组常量时，可使用枚举类</li><li>当枚举类只有一个对象时，就是单例设计模式</li><li>枚举类提高了开发效率，减少了代码量</li><li>enum类提供了少量常用方法，具体使用可查看JAVA API</li></ol><h3 id="2-1-JDK5前后对比"><a href="#2-1-JDK5前后对比" class="headerlink" title="2.1 JDK5前后对比"></a>2.1 JDK5前后对比</h3><p><strong>JDK1.5前</strong><br>属性和构造器私有化<br>若有属性，对属性进行初始化<br>对外提供常量调用(单例体现)<br>根据需要可提供get方法和toString</p><p><strong>JDK1.5后</strong><br>使用enum关键词代替class<br>属性和构造器私有化<br>若有属性，对属性进行初始化<br>对外提供常量调用格式:<br>常量1,常量2,常量3;</p><h3 id="2-2代码体现"><a href="#2-2代码体现" class="headerlink" title="2.2代码体现"></a>2.2代码体现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserEnum</span> &#123;<br>    &lt;<span class="hljs-number">1</span>&gt;<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br><br>    &lt;<span class="hljs-number">2</span>&gt;<span class="hljs-keyword">private</span> <span class="hljs-title function_">UserEnum</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.seasonName = seasonName;<br>        <span class="hljs-built_in">this</span>.seasonDesc = seasonDesc;<br>    &#125;<br><br>    &lt;<span class="hljs-number">3</span>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UserEnum</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserEnum</span>(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;大地复苏&quot;</span>);<br><br>    &lt;<span class="hljs-number">4</span>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seasonDesc;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;略&#125;<br>&#125;<br><br><span class="hljs-comment">//有了enum没有属性的情况下</span><br><span class="hljs-comment">//具体体现看项目三</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Status</span>&#123;<br>    FREE,BUSY,VACATION;<br>&#125;<br></code></pre></td></tr></table></figure><p>Github Project:<a href="https://github.com/KinozHao/atguiguProject">项目三</a></p><h3 id="2-3实现接口"><a href="#2-3实现接口" class="headerlink" title="2.3实现接口"></a>2.3实现接口</h3><p>使用enum关键词的类依然可以实现接口<br>同时类中的每个常量可以分别实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">myjk</span> &#123;<br>    FREE&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;枚举类常量实现接口&quot;</span>);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-注解"><a href="#3-注解" class="headerlink" title="3.注解"></a>3.注解</h2><p>注解概述<br>JDK1.5新增一组特殊的标记，例如override、author等等<br>框架就是基于注解+反射+设计模式<br>开发中使用</p><ol><li>文档注解：author param date等等</li><li>编译时注解：Override Deprecated SuppressWaarnings等等</li><li>跟踪代码依赖性，替代了配置文件功能，如Servlet3.0中</li><li>String框架事务的管理</li><li>注解真正的意义要通过反射去实现，单独定义注解无意义</li></ol><h3 id="3-1自定义注解"><a href="#3-1自定义注解" class="headerlink" title="3.1自定义注解"></a>3.1自定义注解</h3><ol><li>注解声明为:@interface</li><li>内部定义成员，通常使用value表示</li><li>可使用default指定内部成员默认值</li><li>若自定义注解无成员，表明为一个标识</li><li>使用时，若注解有成员，需指明成员的值</li><li>自定义注意要配上信息流程(反射讲)才有意义<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-comment">//default用于指定默认值</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;我的接口&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2元注解"><a href="#3-2元注解" class="headerlink" title="3.2元注解"></a>3.2元注解</h3><p>元注解即用于修饰其他注解的注解</p><p><strong>常用元注解</strong><br>Retention：<br>用于指定Annotation的生命周期(SOURCE\CLASS\RUNTIME)<br>只有声明为RUNTIME时，才能通过反射获取</p><p>Target：<br>用于指定被修饰annotation元素能用于修饰哪些程序元素<br>同时它本省也包含了一个名为value的成员变量</p><p>Documented：<br>被修饰的注解被javadoc解析时，保留下来<br>具体体现可参考Date类的API文档</p><p>Inherited：<br>被修饰注解就具有继承性，通过反射获取信息</p><h3 id="3-3可重复注解JDK8"><a href="#3-3可重复注解JDK8" class="headerlink" title="3.3可重复注解JDK8"></a>3.3可重复注解JDK8</h3><p>在注解1上面声明Repeatable(注解2.class)<br>两个注解的Target和Retention等元注解都要相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一个注解</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Repeatable(MyAnnotationII.class)</span><br><span class="hljs-meta">@Target(&#123;TYPE, FIELD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-comment">//default用于指定默认值</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;我的接口&quot;</span>;<br>&#125;<br><span class="hljs-comment">//第二个注解</span><br><span class="hljs-meta">@Target(&#123;TYPE, FIELD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotationII &#123;<br>    MyAnnotation[] value();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4类型注解JDK8"><a href="#3-4类型注解JDK8" class="headerlink" title="3.4类型注解JDK8"></a>3.4类型注解JDK8</h3><ol><li>元注解@Target的枚举类ElementTarget中多了两个值</li><li>TYPE_PARAMETER标识该注解可写在类型变量的声明语句中</li><li>TYPE_USE可写在使用类型的任何语句中</li><li>JDK1.9又提供了MODULE,用于对模块的注解</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>常用类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用类 | 时间类</title>
    <link href="/2022/05/10/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/%E6%97%B6%E9%97%B4%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/10/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/%E6%97%B6%E9%97%B4%E7%B1%BB%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Date"><a href="#1-Date" class="headerlink" title="1.Date"></a>1.Date</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.返回当前时间</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>System.out.println(date);<br><br><span class="hljs-comment">//时间戳,输出为纳秒数</span><br>System.out.println(date.getTime());<br><br><span class="hljs-comment">//2.返回指定时间</span><br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">mydate</span> <span class="hljs-operator">=</span> newDate(<span class="hljs-number">1990</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">22</span>);<br><br><span class="hljs-comment">//与java.sql.Date的转换</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date2</span> <span class="hljs-operator">=</span> newDate(<span class="hljs-number">33232323223L</span>);<br><span class="hljs-comment">//通过getTime()</span><br>java.sql.<span class="hljs-type">Date</span> <span class="hljs-variable">sqdate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(mydate.getTime());<br>System.out.println(sqdate);<br></code></pre></td></tr></table></figure><h2 id="2-Calender"><a href="#2-Calender" class="headerlink" title="2.Calender"></a>2.Calender</h2><p><strong>实例化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar mycalendar= Calendar.getInstance();<br><span class="hljs-comment">//get方法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">days</span> <span class="hljs-operator">=</span> mycalendar.get(Calendar.DAY_OF_MONTH);<br>System.out.println(<span class="hljs-string">&quot;今天是当月的第:&quot;</span>+days+<span class="hljs-string">&quot;天&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">days2</span> <span class="hljs-operator">=</span> mycalendar.get(Calendar.DAY_OF_YEAR);<br>System.out.println(<span class="hljs-string">&quot;今天是今年的第:&quot;</span>+days2+<span class="hljs-string">&quot;天&quot;</span>);<br><br><span class="hljs-comment">//set方法</span><br><span class="hljs-comment">//指定当前时间为今年的几天</span><br>mycalendar.set(Calendar.DAY_OF_YEAR,<span class="hljs-number">1</span>);<br>days2 = mycalendar.get(Calendar.DAY_OF_YEAR);<br>System.out.println(<span class="hljs-string">&quot;今天是今年的第:&quot;</span>+days2+<span class="hljs-string">&quot;天&quot;</span>);<br><br><span class="hljs-comment">//add方法</span><br><span class="hljs-comment">//把当前时间往前增加指定天</span><br>mycalendar.add(Calendar.DAY_OF_YEAR,<span class="hljs-number">3</span>);<br>days2 = mycalendar.get(Calendar.DAY_OF_YEAR);<br>System.out.println(<span class="hljs-string">&quot;今天是今年的第:&quot;</span>+days2+<span class="hljs-string">&quot;天&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>格式化与解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">CDR</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br><span class="hljs-comment">//格式化日历类--&gt;时间类</span><br>System.out.println(CDR.getTime());<br><span class="hljs-comment">//解析时间类--&gt;日历类</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>CDR.setTime(date);<br>System.out.println(<span class="hljs-string">&quot;今年的第:&quot;</span>+CDR.get(Calendar.DAY_OF_YEAR)+<span class="hljs-string">&quot;天&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="3-SimpleDateFormat"><a href="#3-SimpleDateFormat" class="headerlink" title="3.SimpleDateFormat"></a>3.SimpleDateFormat</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认格式</span><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br><span class="hljs-type">Date</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">//格式化dt原本数据</span><br>System.out.println(sdf.format(dt));<br><br><span class="hljs-comment">//解析回Date原本的格式</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">dt2</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2022/5/7下午10:49&quot;</span>);<br>System.out.println(dt2);<br><br><span class="hljs-comment">//自定义格式</span><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;GGyyyy-MM-ddhh:mm:ss&quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">//格式化dt到我们自定义格式</span><br>System.out.println(sdf.format(dt));<br><br><span class="hljs-comment">//解析回Date原本的格式(parse里数据必须和我们自定义格式相同)</span><br><span class="hljs-comment">//否则报ParseException</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">dt2</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;公元2022-05-0710:53:29&quot;</span>);<br>System.out.println(dt2);<br></code></pre></td></tr></table></figure><p><strong>与java.sql.Date的转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2020-09-08&quot;</span>;<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">dt</span> <span class="hljs-operator">=</span> sdf.parse(birth);<br>java.sql.<span class="hljs-type">Date</span> <span class="hljs-variable">birthDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date(dt.getTime());<br>System.out.println(birthDate);<br></code></pre></td></tr></table></figure><ul><li>以上l类都是jdk1.0的产物，存在数据可变性，时间戳，等一些问题</li><li>api中可以看到很多方法以及构造器以及deprecated了开发中基本上不再使用</li><li>主要以jdk1.8重新引入的time包中的类为主，此包借鉴了joda-time</li></ul><h2 id="4-Local家族"><a href="#4-Local家族" class="headerlink" title="4.Local家族"></a>4.Local家族</h2><ul><li>Local三个类相当于Calender的升级</li><li>都具有不可变性，对数据修改相当于又造了一个</li></ul><p><strong>初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认初始化</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(localTime);<br>System.out.println(localDate);<br>System.out.println(localDateTime);<br><span class="hljs-comment">//指定初始化</span><br>System.out.println(LocalDateTime.of(<span class="hljs-number">2015</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">29</span>));<br></code></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//get()</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(ldt.getDayOfYear());<br>System.out.println(ldt.getDayOfMonth());<br>System.out.println(ldt.getMonthValue());<br><span class="hljs-comment">//withXxx : setting</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">changeyear</span> <span class="hljs-operator">=</span> ldt.withDayOfYear(<span class="hljs-number">1</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">changemonth</span> <span class="hljs-operator">=</span> ldt.withDayOfMonth(<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;init value:&quot;</span>+ldt);<br>System.out.println(<span class="hljs-string">&quot;change year:&quot;</span>+changeyear);<br>System.out.println(<span class="hljs-string">&quot;change month:&quot;</span>+changemonth);<br><span class="hljs-comment">//plusXxx : +</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">plusyear</span> <span class="hljs-operator">=</span> ldt.plusYears(<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;plus year:&quot;</span>+plusyear);<br><span class="hljs-comment">//minusXxx : -</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">minusyear</span> <span class="hljs-operator">=</span> ldt.minusYears(<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;minus year:&quot;</span>+minusyear);<br></code></pre></td></tr></table></figure><h2 id="5-Instant"><a href="#5-Instant" class="headerlink" title="5.Instant"></a>5.Instant</h2><p>Date类的升级版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Instant</span> <span class="hljs-variable">times</span> <span class="hljs-operator">=</span> Instant.now();<br><span class="hljs-comment">//default TimeZone is UTC</span><br>System.out.println(times);<br><br><span class="hljs-comment">//+8 hour is CN time (Offset)</span><br><span class="hljs-type">OffsetDateTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> times.atOffset(ZoneOffset.ofHours(<span class="hljs-number">8</span>));<br>System.out.println(localTime);<br><br><span class="hljs-comment">//from 1970-1-1-00:00:00 ---&gt; now millisecond</span><br><span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> times.toEpochMilli();<br>System.out.println(<span class="hljs-string">&quot;millisecond:&quot;</span>+i);<br><br><span class="hljs-comment">//used ofEpochMilli parse to normal format</span><br>System.out.println(Instant.ofEpochMilli(i));<br></code></pre></td></tr></table></figure><h2 id="6-DateTimeFormatter"><a href="#6-DateTimeFormatter" class="headerlink" title="6.DateTimeFormatter"></a>6.DateTimeFormatter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//.ISO_LOCAL_DATE_TIME为标准格式</span><br><span class="hljs-comment">//.ofPattern为自定义</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">ter3</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;GGG:yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-comment">//格式化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str_time</span> <span class="hljs-operator">=</span> ter3.format(LocalDateTime.now());<br>System.out.println(str_time);<br><span class="hljs-comment">//解析</span><br>System.out.println(ter3.parse(<span class="hljs-string">&quot;公元:2022-05-08 10:26:31&quot;</span>));<br><br><br><span class="hljs-comment">//jdk9往后需添加withZone(ZoneId.systemDefault())</span><br><span class="hljs-comment">//Style有四种 SHORT MEDIUM LONG FULL</span><br><br><span class="hljs-comment">//格式化</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">ter2</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).withZone(ZoneId.of(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">strsj</span> <span class="hljs-operator">=</span> ter2.format(LocalDateTime.now());<br>System.out.println(strsj);<br><span class="hljs-comment">//解析</span><br>System.out.println(ter2.parse(<span class="hljs-string">&quot;2022年5月8日 下午10:19:41&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>常用类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用类 | String类</title>
    <link href="/2022/05/04/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/String%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/04/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/String%E7%B1%BB%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-String类"><a href="#1-String类" class="headerlink" title="1.String类"></a>1.String类</h2><p>String是一个字符串对象<br>String是final的，不能被继承，被赋值不能改变<br>String对象字符内容都存放在char[] value数组中<br>String代表不可变的字符序列，称不可变性<br>实现了serializable接口，是可序列化的<br>实现了comparable接口，可以比较大小</p><h3 id="1-1不可变性"><a href="#1-1不可变性" class="headerlink" title="1.1不可变性"></a>1.1不可变性</h3><p>由字面量对比可得知，两个String对象地址值是相同的<br>常量池中不会存储相同内容字符串</p><p>对字符串重新赋值，拼接，使用replace替换<br>都不可在原有的位置赋值，要重新指定内存区域</p><h2 id="2-构造器-方法"><a href="#2-构造器-方法" class="headerlink" title="2.构造器|方法"></a>2.构造器|方法</h2><h3 id="2-1常用构造器"><a href="#2-1常用构造器" class="headerlink" title="2.1常用构造器"></a>2.1常用构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] arr1 = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr1); <span class="hljs-comment">//解码:将计算机读懂的转换成我们能读懂的</span><br>System.out.println(s2);<br><br><span class="hljs-type">byte</span>[] arr2 = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr2,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//将arr2数组从2索引开始转换三个</span><br>System.out.println(s3);<br><br><span class="hljs-type">char</span>[] arr3 = &#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;P&#x27;</span>,<span class="hljs-string">&#x27;H&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr3); <span class="hljs-comment">//将字符数字转换成字符串</span><br>System.out.println(s4);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr3,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">//将arr3字符数组,从1索引开始,转换三个</span><br>System.out.println(s5);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Java&quot;</span>);<br>System.out.println(s6);<br><br></code></pre></td></tr></table></figure><h3 id="2-2方法一"><a href="#2-2方法一" class="headerlink" title="2.2方法一"></a>2.2方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">character</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;technology&quot;</span>;<br><span class="hljs-comment">//1.获取索引</span><br>System.out.println(character.length());<br><span class="hljs-comment">//2.截取指定字符</span><br>System.out.println(character.charAt(<span class="hljs-number">3</span>));<br><span class="hljs-comment">//StringIndexOutOfBoundsException</span><br><span class="hljs-comment">//System.out.println(character.charAt(10));</span><br><span class="hljs-comment">//3.判断是否为空</span><br>System.out.println(character.isEmpty());<br><br><span class="hljs-comment">//4.转换大小写</span><br>System.out.println(character.toUpperCase());<br>System.out.println(character.toLowerCase());<br><br><span class="hljs-comment">//5.忽略首尾空格</span><br><span class="hljs-type">String</span> <span class="hljs-variable">fruit</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;  a ppl e  &quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">afterfruit</span> <span class="hljs-operator">=</span> fruit.trim();<br>System.out.println(<span class="hljs-string">&quot;-&quot;</span>+afterfruit+<span class="hljs-string">&quot;-&quot;</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//IgnoreCase即不区分大小写</span><br><span class="hljs-type">String</span> <span class="hljs-variable">character1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">character2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HellO&quot;</span>;<br><span class="hljs-comment">//6.比较方法</span><br>System.out.println(character1.equals(character2));<br>System.out.println(character1.equalsIgnoreCase(character2));<br><br><span class="hljs-comment">//7.涉及字符串排序，不考虑堆和常量池，只比较结果(输出为0表示相同)</span><br>System.out.println(character1.compareTo(character2));<br>System.out.println(character1.compareToIgnoreCase(character2));<br><br><span class="hljs-comment">//8.取出指定索引字符串，左闭右开</span><br><span class="hljs-type">String</span> <span class="hljs-variable">character3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GermanyScotland&quot;</span>;<br>System.out.println(character3.substring(<span class="hljs-number">7</span>));<br>System.out.println(character3.substring(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>));<br><br><span class="hljs-comment">//9.连接,用的少一半用+</span><br><span class="hljs-type">String</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> character2.concat(<span class="hljs-string">&quot;world&quot;</span>);<br>System.out.println(world);<br></code></pre></td></tr></table></figure><h3 id="2-3方法二"><a href="#2-3方法二" class="headerlink" title="2.3方法二"></a>2.3方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br><span class="hljs-comment">//1.测试是不是以指定字符串开始或结尾</span><br>System.out.println(s1.endsWith(<span class="hljs-string">&quot;ld&quot;</span>));<br>System.out.println(s1.startsWith(<span class="hljs-string">&quot;ld&quot;</span>));<br><span class="hljs-comment">//2.判断指定字符串是不是以指定索引开始的</span><br>System.out.println(s1.startsWith(<span class="hljs-string">&quot;ll&quot;</span>,<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">//3.一个字符串是否包含另外一个字符串内容</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span>;<br>System.out.println(s1.contains(s2));<br><br><span class="hljs-comment">//4.获取指定字符串索引位置(若此字符串不存在返回-1)</span><br>System.out.println(s2.indexOf(<span class="hljs-string">&quot;ld&quot;</span>));<br><span class="hljs-comment">//5.指定索引开始找指定字符串</span><br>System.out.println(s2.indexOf(<span class="hljs-string">&quot;ld&quot;</span>,<span class="hljs-number">5</span>));<br><span class="hljs-comment">//6.和indexOf操作方式刚好相反</span><br>System.out.println(s2.lastIndexOf(<span class="hljs-string">&quot;wo&quot;</span>));<br>System.out.println(s2.lastIndexOf(<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><h3 id="2-4方法三"><a href="#2-4方法三" class="headerlink" title="2.4方法三"></a>2.4方法三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.替换方法</span><br><span class="hljs-comment">//1.1替换指定所有一样字符串</span><br>String s1=<span class="hljs-string">&quot;NanKingg&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1.replace(<span class="hljs-string">&quot;King&quot;</span>,<span class="hljs-string">&quot; Company&quot;</span>);<br><span class="hljs-comment">//1.2替换指定所有一样char字符</span><br>System.out.println(s2);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s1.replace(<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>);<br>System.out.println(s3);<br><br><span class="hljs-comment">//2.全部替换，把数字替换为,牵扯正则表达式</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nan23zhong32song32&quot;</span>;<br>System.out.println(str.replaceAll(<span class="hljs-string">&quot;\\d+&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>));<br><span class="hljs-comment">//2.1判断方法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;123242&quot;</span>;<br><span class="hljs-comment">//2.2判断此字符串是不是全部由数字组成</span><br>System.out.println(str.matches(<span class="hljs-string">&quot;\\d+&quot;</span>));<br><br><span class="hljs-comment">//2.3判断电话号码区号，和后面位数对不对</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0571-4518716&quot;</span>;<br>System.out.println(str2.matches(<span class="hljs-string">&quot;0571-\\d&#123;7,8&#125;&quot;</span>));<br><br><span class="hljs-comment">//3.切割方法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello|world|us&quot;</span>;<br><span class="hljs-comment">//对字符串以|为根据进行切割遍历</span><br>String[] split = str.split(<span class="hljs-string">&quot;\\|&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>System.out.print(split[i]+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3.类型转换"></a>3.类型转换</h2><h3 id="3-1与char-和包装类"><a href="#3-1与char-和包装类" class="headerlink" title="3.1与char[]和包装类"></a>3.1与char[]和包装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//把int类型的数据转成字符串</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> String.valueOf(a);<br>System.out.println(s5);<br><br><span class="hljs-comment">//String转成int</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1548&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str);<br>System.out.println(num);<br><br><br><span class="hljs-comment">//char[]组转换为String</span><br><span class="hljs-type">char</span>[] arr = &#123;<span class="hljs-string">&#x27;J&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr));<br><br><br><span class="hljs-comment">//String转换为char[]</span><br>String s3=<span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">char</span>[] arr4 = s3.toCharArray();<br>System.out.println(Arrays.toString(arr4));<br></code></pre></td></tr></table></figure><h3 id="3-2与字节数组"><a href="#3-2与字节数组" class="headerlink" title="3.2与字节数组"></a>3.2与字节数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编码: String转换为Byte[]</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc淮信&quot;</span>;<br><span class="hljs-type">byte</span>[] arr = str.getBytes();<br><br><span class="hljs-comment">//遍历字节数组(默认字节为UTF-8一个汉字三个字节)</span><br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">//使用指定编码集输出</span><br>String s2=<span class="hljs-string">&quot;机蜂程序员&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">byte</span>[] arr2=s2.getBytes(<span class="hljs-string">&quot;UTF-16&quot;</span>);<br>    System.out.println(Arrays.toString(arr2));<br>&#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>    e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">//解码: Byte[]转换为String</span><br><span class="hljs-type">byte</span>[] s3 = &#123;<span class="hljs-string">&#x27;J&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(s3));<br><br><span class="hljs-comment">//转码编码格式不一样，会乱码</span><br><span class="hljs-keyword">try</span> &#123;<br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(s3,<span class="hljs-string">&quot;UTF-16&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Buffer-Builder"><a href="#4-Buffer-Builder" class="headerlink" title="4.Buffer|Builder"></a>4.Buffer|Builder</h2><p>这两个类都是jdk1.5后新增的，常用方法相似<br>Buffer相对线程安全，开发根据需求使用</p><h3 id="4-1常用方法"><a href="#4-1常用方法" class="headerlink" title="4.1常用方法"></a>4.1常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">添加区:<br><span class="hljs-comment">//在末尾添加字符串</span><br>append(<span class="hljs-type">char</span> c)<br><span class="hljs-comment">//在指定的位置插入字符串</span><br>insert(offset,str)<br><br>删除区:<br><span class="hljs-comment">//指定范围删除</span><br>delete(<span class="hljs-type">int</span> star,<span class="hljs-type">int</span> end)<br><span class="hljs-comment">//指定位置删除</span><br>deleteCharAt(<span class="hljs-type">int</span> index)<br><span class="hljs-comment">//清空缓冲区</span><br>delete(<span class="hljs-number">0</span>,参数名.length())<br><br>修改区:<br>setCharAt(<span class="hljs-type">int</span> index,<span class="hljs-type">char</span> ch)<span class="hljs-comment">//修改指定位置字符</span><br>replace(<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end,Stirng s)<span class="hljs-comment">//替换指定位置字符串或者字符</span><br>reverse()<span class="hljs-comment">//字符串翻转</span><br><br>截取区:<br>substring(star)<span class="hljs-comment">//从指定索引截取到末尾</span><br>substring(star,end)<span class="hljs-comment">//从指定索引范围截取(包含开始的位置,不包含结尾的位置)</span><br><br></code></pre></td></tr></table></figure><h3 id="4-2类型转换方法"><a href="#4-2类型转换方法" class="headerlink" title="4.2类型转换方法"></a>4.2类型转换方法</h3><p><strong>String转换SB</strong></p><ol><li>通过SB的构造方法实现</li><li>通过SB的append方法实现</li></ol><p><strong>SB转换String</strong></p><ol><li>通过String的构造方法</li><li>通过String的ToString()</li><li>通过substring()实现</li></ol><h2 id="5-面试题"><a href="#5-面试题" class="headerlink" title="5.面试题"></a>5.面试题</h2><h3 id="5-1为什么new两个对象"><a href="#5-1为什么new两个对象" class="headerlink" title="5.1为什么new两个对象"></a>5.1为什么new两个对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String a= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;中国&quot;</span>);<br></code></pre></td></tr></table></figure><p>相当于new了两个一个在堆中，一个在常量池中</p><p>常量与常量拼接在常量池中，常量池不会存在相同常量<br>只要其中有一个变量，结果就在堆中<br>使用intern方法后，此对象一定实在常量池声明的</p><h3 id="5-2三String的区别"><a href="#5-2三String的区别" class="headerlink" title="5.2三String的区别"></a>5.2三String的区别</h3><p>StringBuffer 线程安全 可变字符序列 效率低 底层char[] Jdk1.5</p><p>StringBuilder 线程不安全 可变字符序列 效率高 底层char[] Jdk1.5</p><p>String 线程安全 不可变的字符序列 效率低 底层char[] Jdk1.0</p><p><strong>通过底层源码理解</strong></p><ul><li>String底层创建char[]为空或指定元素的索引长度</li><li>StringBuffer和StringBuilder底层创建了索引为16的char[]</li><li>当数据长度超过底层索引16长度，默认扩容为原来容量二倍+2</li><li>同时把原有数组元素复制到新的数组中</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>常用类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | Multithread</title>
    <link href="/2022/05/01/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/Multithread/"/>
    <url>/2022/05/01/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/SEImprove/Multithread/</url>
    
    <content type="html"><![CDATA[<h2 id="1-多线程概述"><a href="#1-多线程概述" class="headerlink" title="1.多线程概述"></a>1.多线程概述</h2><p>程序需要多个任务时候<br>程序需要实现一些需等待的任务[用户输入][文件读写]等等<br>需要一些后台运行的程序时<br>start方法作用，启动当前线程，调用当前线程的run()方法</p><p><strong>优点</strong></p><p>提高应用程序响应，增强用户体验，提高电脑CPU的利用率</p><p>改善程序结构，把复杂的进程改为多个线程，独立运行便于理解和修改</p><h2 id="2-程序-进程-线程"><a href="#2-程序-进程-线程" class="headerlink" title="2.程序|进程|线程"></a>2.程序|进程|线程</h2><p><strong>程序</strong><br>是用某种语言编写的一组指令集合<br>即一段静态的代码，静态对象</p><p><strong>进程</strong><br>程序的一次执行过程&#x2F;一个正在运行的程序即是一个动态的过程<br>有它自身产生、存在和消亡的过程[生命周期]<br>电脑上的任务管理器中的一个程序就代表一个进程</p><p><strong>线程</strong><br>进程再进行细化就是线程，即一个程序内一条执行路径<br>若一个进程在同一时间并行执行多个线程[多线程]<br>例:360卫士中的每一个清理选项，就是一个线程<br>多个清理选项同时进行，就是多线程了</p><h2 id="3-并发并行"><a href="#3-并发并行" class="headerlink" title="3.并发并行"></a>3.并发并行</h2><p><strong>并发concurrency</strong><br>一个CPU同时处理多个任务，每个任务相当一个线程<br>给每一个线程分配一点时间，时间一到到切换另外一个线程</p><p><strong>并行parallelism</strong><br>多个CPU同时处理多个任务</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fblog.wingflare.com%2Fwp-content%2Fuploads%2F2020%2F01%2Fdf30458e6ca90311507612.png&refer=http%3A%2F%2Fblog.wingflare.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1653997671&t=18ec54013d0e7a611e47efbaea6ff8d3"></p><h2 id="4-线程声明周期"><a href="#4-线程声明周期" class="headerlink" title="4.线程声明周期"></a>4.线程声明周期</h2><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/threadlife.png"></p><h2 id="5-创建线程方式"><a href="#5-创建线程方式" class="headerlink" title="5.创建线程方式"></a>5.创建线程方式</h2><h3 id="5-1继承Thread类"><a href="#5-1继承Thread类" class="headerlink" title="5.1继承Thread类"></a>5.1继承Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1:继承Thread类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadBasic</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String...args)</span>&#123;<br>        <span class="hljs-type">ThreadBasic</span> <span class="hljs-variable">tbc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadBasic</span>();<br>        <span class="hljs-comment">//3:开启此线程</span><br>        tbc.start();<br>    &#125;<br><br>    <span class="hljs-comment">//2:重写Thread方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Test extends Thread!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2实现Runnable接口"><a href="#5-2实现Runnable接口" class="headerlink" title="5.2实现Runnable接口"></a>5.2实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//3.创建实例类对象</span><br>        <span class="hljs-type">MyTD</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTD</span>();<br>        <span class="hljs-comment">//4.因为Runnable是实现的不是继承所以要写一个Thread对象用来开启线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mt);<br>        <span class="hljs-comment">//5.开启线程  </span><br>        tr.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">40</span>; j++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;PHP not liked everything&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//1.实现Runnable</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTD</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-comment">//2.重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;             <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Java first at world&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3实现Callable接口"><a href="#5-3实现Callable接口" class="headerlink" title="5.3实现Callable接口"></a>5.3实现Callable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.实现Callable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableBasic</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span> &#123;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//2.重写call方法</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span> ;i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                <span class="hljs-comment">//1-100总和</span><br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//sum为int类型 自动封箱成为integer integer又是object的子类 故不会报错</span><br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">normalCallable</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//3.实例化Callable对象</span><br>    <span class="hljs-type">CallableBasic</span> <span class="hljs-variable">callableBasic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CallableBasic</span>();<br><br>    <span class="hljs-comment">//4.实例化FutureTask对象把callable对象传入FutureTask构造器</span><br>    <span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(callableBasic);<br><br>    <span class="hljs-comment">//5.传入futureTask对象，并调用start方法开启线程</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><br>    <span class="hljs-comment">//6/get方法用于获取call方法的返回值</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//回调方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> futureTask.get();<br>        System.out.println(<span class="hljs-string">&quot;总和为:&quot;</span>+sum);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4使用Excutor线程池"><a href="#5-4使用Excutor线程池" class="headerlink" title="5.4使用Excutor线程池"></a>5.4使用Excutor线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-comment">//存放指定数量线程</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">poor</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//存放单条线程</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">poor2</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><br>        <span class="hljs-comment">//execute适用于runnable submit适用于callable</span><br>        poor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BubbleThread</span>());<br>        <span class="hljs-comment">//FutureTask Sum = new FutureTask(new SumThread());</span><br>        <span class="hljs-comment">//匿名写法</span><br>        poor.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SumThread</span>()));<br>        <span class="hljs-comment">//关闭池子</span><br>        poor.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-线程安全问题"><a href="#6-线程安全问题" class="headerlink" title="6.线程安全问题"></a>6.线程安全问题</h2><p>同时满足两个条件时<br>1.多个线程执行的不确定性引起执行结果的不稳定性<br>2.多个线程在操作共享数据，会造成系统操作的不完整性，会破坏数据<br>3.解决方案使用synchronized关键词或lock接口</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fuploadfiles.nowcoder.com%2Ffiles%2F20210709%2F7841133_1625799302960%2F07.png&refer=http%3A%2F%2Fuploadfiles.nowcoder.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1653998226&t=56e205d693c0008521e9d321c2a8c0f0"></p><h3 id="6-1同步代码块"><a href="#6-1同步代码块" class="headerlink" title="6.1同步代码块"></a>6.1同步代码块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">sychronized(同步监视器)&#123;<br>需同步代码(即操作共享数据的代码)<br>包多了包少了都会出现一定的问题<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>共享数据:多个线程都要操作的变量</li><li>同步监视器:就是锁,任意对象都可充当锁</li><li>多个线程必须使用同一把锁</li><li>实现Runnable接口<br>Sychronized(this)或Sychronized(new的对象名)</li><li>继承Thread类<br>Sychronized(当前类名.class)或Sychronized(new的对象名)<br>Sychronized(this)慎用充当同步监视器</li></ol><p><strong>好处</strong><br>解决了线程安全的问题<br><strong>弊端</strong><br>操作同步代码时，只能一个线程执行，其余等待<br>就相当于单线程了，效率变低了(jdk1.5以后lock接口解决了此问题)</p><h3 id="6-2同步方法"><a href="#6-2同步方法" class="headerlink" title="6.2同步方法"></a>6.2同步方法</h3><p><strong>前提条件</strong><br>共享数据:多个线程都要操作的变量</p><p>同步监视器:就是锁,任意对象都可充当锁</p><p>如果操作共享数据的代码刚好在一个方法里面，把此方法声明为同步的即可</p><ol><li>同步方法仍然涉及到同步监视器,不需要我们声明</li><li>非静态同步方法默认为this </li><li>静态同步方法默认为当前类本事</li></ol><h3 id="6-3Lock接口"><a href="#6-3Lock接口" class="headerlink" title="6.3Lock接口"></a>6.3Lock接口</h3><p>Jdk1.5开始java提供了锁对象来同步问题<br>同步锁使用Lock对象充当<br>Lock锁本身是一个接口，无法进行实例化<br>通常使用reentrantlock进行实例化</p><h3 id="6-4Synchronized和Lock的区别"><a href="#6-4Synchronized和Lock的区别" class="headerlink" title="6.4Synchronized和Lock的区别"></a>6.4Synchronized和Lock的区别</h3><p><strong>Synchronized</strong></p><p>是关键字,在jvm层面，无法判断是否获取锁的状态</p><p>会自动释放锁<br>a 线程执行完同步代码会释放锁<br>b 线程执行过程中发生异常会释放锁</p><p>线程1和线程2<br>如果当前线程1获得锁，线程2等待<br>如果线程1阻塞<br>线程2则会一直等待下去</p><p>锁可重入、不可中断、非公平，适合代码少量的同步问题</p><p><strong>Lock</strong></p><p>是接口由ReentrantLock类实现，可以判断是否获取到锁</p><p>Lock需在finally中手工释放锁（unlock方法）<br>否则容易造成线程死锁</p><p>线程1和线程2<br>Lock锁就不一定会等待下去<br>如果尝试获取不到锁<br>线程可以不用一直等待就结束了</p><p>锁可重入、可中断、可公平，适合大量同步的代码的同步问题</p><h2 id="7-线程的通讯"><a href="#7-线程的通讯" class="headerlink" title="7.线程的通讯"></a>7.线程的通讯</h2><p>即线程在运行中遇到的一些状态，需要通过一些方法去解决</p><p><strong>notify()</strong><br>唤醒正在等待的单个线程(优先级高的优先)<br><strong>notifyAll()</strong><br>唤醒正在等待的所有线程<br><strong>wait()</strong><br>使得当前线程等待,直到另一个线程调用该对象notify或者notifyAll方法</p><p><strong>sleep与wait的区别</strong></p><ul><li>sleep方法必须传入参数，参数是时间，时间到了自动醒来</li><li>可以在任何需要场景下去调用</li><li>sleep定义在thread类，不释放锁</li></ul><p></p><hr><ul><li>wait方法可以传入参数，也可以不传入参数</li><li>只能在同步方法或者同步代码块中</li><li>wait定义在Object类，释放锁</li></ul><h2 id="8-线程的调度"><a href="#8-线程的调度" class="headerlink" title="8.线程的调度"></a>8.线程的调度</h2><p><strong>Sleep</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">让当前线程<span class="hljs-string">&quot;睡眠&quot;</span>指定毫秒<br>指定时间内当前线程是阻塞的<br>过了这个时间之后，线程重新执行<br><span class="hljs-meta">CPU</span>再进行资源的分配<br></code></pre></td></tr></table></figure><p><strong>Yield</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">释放当前线程对<span class="hljs-meta">CPU</span>的执行权<br>暂停当前正在执行的线程对象，<br>把执行机会让给相同或者更高优先级的线程<br></code></pre></td></tr></table></figure><p><strong>Daemon</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">自定义对象调用setDaemon方法传入ture参数就意味着设置为守护线程<br>线程是程序中执行的线程，JVM允许应用程序同时执行多个执行线程。<br>每个线程都有优先权,优先权高的线程先执行。 <br>每个线程可能也可能不会被标记为守护程序。<br> <br>当在某个线程中运行的代码创建一个新的<span class="hljs-keyword">Thread</span>对象时<br>新线程的优先级最初设置为等于创建线程的优先级<br>并且当且仅当创建线程是守护进程时才是守护线程。<br></code></pre></td></tr></table></figure><p><strong>Join</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">线程<span class="hljs-selector-tag">a</span>在线程<span class="hljs-selector-tag">b</span>中调用Join方法，此时线程<span class="hljs-selector-tag">b</span>就进入堵塞状态<br>直至线程<span class="hljs-selector-tag">a</span>加载完，线程<span class="hljs-selector-tag">b</span>再进行加载<br><br>注:匿名内部在使用他所在方法中局部变量的时候必须用final修饰<br>join中可以写时间参数 指定的时间 <br>时间过后 两条线程交替执行<br></code></pre></td></tr></table></figure><p><strong>Priority</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">一个线程即使优先级为MAX_PRIORITY<br>并不代表等它执行完了，才会执行另外一个线程<br>在运行的中间还是会出现交互的情况<br>setPriority方法用于设置优先继<br>getPriority方法用于获取优先继<br>设置优先级常量<br>MAX_PRIORITY <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>MIN_PRIORITY <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">; </span><br>NORM_PRIORITY <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><h2 id="9-四种方式对比"><a href="#9-四种方式对比" class="headerlink" title="9.四种方式对比"></a>9.四种方式对比</h2><p><strong>Thread类</strong></p><ol><li>Thread类创建线程不适合资源共享</li><li>Thread类本事自己也实现了Runnable接口</li></ol><p><strong>Runnable接口</strong></p><ol><li>避免了Java中单继承的局限性</li><li>适合多条线程去处理同个资源</li><li>增强程序的健壮性，代码可被多条线程共享</li><li>代码和数据之间彼此独立</li><li>线程池中只能放入runnable或callable类线程</li></ol><p><strong>Callable接口(JDK1.5)</strong></p><ol><li>可以使用泛型</li><li>可以使用带泛型的返回值</li><li>可以抛出异常</li><li>具体实现需要借助FutureTask类</li></ol><p><strong>Future接口</strong></p><ol><li>可以对具体Runnable、Callable任务的执行结果</li><li>进行取消、查询是否、获取结果等等</li><li>Futuretask是Future接口的唯一实现类</li><li>FutureTask同时实现Runnable和future接口</li><li>可作为runnable被线程执行</li><li>也可作为future来获取callable的返回值使用get()方法</li></ol><p><strong>Excutor线程池(JDK1.5)</strong></p><ol><li>开发中常用，多条线程存放在Excutor中</li><li>使用时候通过方法调用，不用时候释放</li><li>提高响应速度，降低资源消耗，便于线程管理</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | 异常处理</title>
    <link href="/2022/04/23/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2022/04/23/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-异常概述"><a href="#1-异常概述" class="headerlink" title="1.异常概述"></a>1.异常概述</h2><p>写代码时候，程序执行中发生的的错误或不正常清空都统称为”异常”。<br>又根据错误的不同分为error和exception两种异常</p><h3 id="1-1Error异常"><a href="#1-1Error异常" class="headerlink" title="1.1Error异常"></a>1.1Error异常</h3><ol><li><p>JVM都无法解决的异常</p></li><li><p>具体体现，JVM内部资源耗尽，系统内部错误</p></li><li><p>比如OOM StackOverFlowError等等</p></li><li><p>不编写针对性代码进行处理</p></li></ol><h3 id="1-2Exception异常"><a href="#1-2Exception异常" class="headerlink" title="1.2Exception异常"></a>1.2Exception异常</h3><ol><li><p>此类异常常见于开发中</p></li><li><p>因为编程错误或偶然外在因素造成的一般问题</p></li><li><p>可以编写针对性代码进行处理</p></li></ol><h3 id="1-3抓抛模式"><a href="#1-3抓抛模式" class="headerlink" title="1.3抓抛模式"></a>1.3抓抛模式</h3><ul><li><p>所谓抓就是处理这些异常的方式常见的两种<br>try catch finally 与 throws</p></li><li><p>所谓抛就是程序在执行过程中一旦出现了异常<br>就会在异常代码处生成一个对应异常类的对象<br>异常抛出后，后面的代码就不会再执行</p></li></ul><h3 id="1-4Throwable接口"><a href="#1-4Throwable接口" class="headerlink" title="1.4Throwable接口"></a>1.4Throwable接口</h3><p><strong>Throwable本身是一个接口，它的实现类error和exception是开发中常用的异常类</strong><br><strong>它的内部也定义了一些常用方法去供实现类去调用，具体的用法可以查看API</strong></p><h3 id="1-5Exception异常分类"><a href="#1-5Exception异常分类" class="headerlink" title="1.5Exception异常分类"></a>1.5Exception异常分类</h3><p>所有的RuntimeExpection及其子类的实例都被称作为运行时异常<br>其他的则为编译时异常</p><p><strong>编译时异常:</strong><br>Java程序必须显示处理结果,否则程序会发生错误,无法通过编译<br>解释:编译某个程序的时候,比如文件找不着了,这样的异常就必须编译的时候处理,如果不处理编译就不会通过</p><p><strong>运行时异常:</strong><br>无需显示处理,也可以和编译时异常一样处理<br>解释:就是程序员犯的错误,需要回来修改代码</p><h3 id="1-5JVM处理异常"><a href="#1-5JVM处理异常" class="headerlink" title="1.5JVM处理异常"></a>1.5JVM处理异常</h3><p>自己解决问题,然后继续运行</p><p>没有处理方式,只能交给调用main的jvm来处理</p><p>JVM有一个默认的处理机制,就将该异常进行处理</p><p>并将该异常的名称,异常的信息,异常位置打印在控制台,然后结束程序运行</p><h3 id="1-6自定义异常"><a href="#1-6自定义异常" class="headerlink" title="1.6自定义异常"></a>1.6自定义异常</h3><p>通过自定义的名字知道到底是什么异常,有针对的解决办法<br>如果jdk没有提供对应的异常就自己自定义一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    里面写构造器并用<span class="hljs-built_in">super</span>调用父类的构造器<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7重写问题"><a href="#1-7重写问题" class="headerlink" title="1.7重写问题"></a>1.7重写问题</h3><p><strong>子类重写父类方法:</strong><br>子类抛出的异常一定不能比父类的大</p><p><strong>父如果抛多个异常:</strong><br>子类只能抛相同异常(或子集异常)</p><p><strong>若重写方法没抛异常:</strong><br>子的方法不能抛异常,若重写方法内有异常出现,<br>子只能try_catch_finally而不能throws</p><h2 id="2-Try-Catch-Finally"><a href="#2-Try-Catch-Finally" class="headerlink" title="2.Try_Catch_Finally"></a>2.Try_Catch_Finally</h2><ol><li><p>try:检查异常 catch:捕获异常 finally:释放资源</p></li><li><p>当通过try catch把问题处理后,程序会继续执行</p></li><li><p>Exception是所有异常的父类</p></li></ol><p><strong>与注释区别</strong><br>Try Catch就是进行包裹异常的<br>注释的作用是你的思路(开发中一定要写注释)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    会出异常的代码<br>&#125;<span class="hljs-keyword">catch</span> (具体异常)&#123;<br>   提示语句<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>     释放资源或者一定会执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1注意事项"><a href="#2-1注意事项" class="headerlink" title="2.1注意事项"></a>2.1注意事项</h3><ol><li><p>try用来把出异常的代码包裹起来</p></li><li><p>catch中写如异常对象，进行匹配后再运行就不报错</p></li><li><p>try匹配到catch就跳出当前结构，后面的代码可正常运行</p></li><li><p>catch中的异常如果有子父类关系，子类在上(若没有声明声明就不需要具体顺序)</p></li><li><p>getMessage()与printStackTrace()方法在catch中经常使用</p></li><li><p>try中声明好的变量，出了结构就无法调用</p></li></ol><h3 id="2-2JDK7新特征"><a href="#2-2JDK7新特征" class="headerlink" title="2.2JDK7新特征"></a>2.2JDK7新特征</h3><ol><li><p>不用写多个catch只需要在多个异常中间加 | 即可实现包裹多个异常</p></li><li><p>前期不推荐这样写，易混淆，建议一个异常对应一个catch包</p></li><li><p>后期根据需求写法:<br>安卓,客户端开发,处理异常一般用try{}catch(Exception e){}<br>EE，服务器开发,一般都是用底层开发,从底层向上抛</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    System.out.println(a/b);<br>    System.out.println(arr[<span class="hljs-number">5</span>]);<br> <span class="hljs-comment">//所有异常的父类就是Exception</span><br><span class="hljs-comment">//&#125;catch (Exception e)&#123;</span><br>&#125;<span class="hljs-keyword">catch</span> (ArithmeticException  | <br>ArrayIndexOutOfBoundsException E)&#123;<br>    System.out.println(<span class="hljs-string">&quot;Software error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3Finally关键词"><a href="#2-3Finally关键词" class="headerlink" title="2.3Finally关键词"></a>2.3Finally关键词</h3><ol><li><p>finally用于释放资源,在IO流操作和数据库操作中体会</p></li><li><p>写在finally结构里面的语句一定会被执行</p></li><li><p>特殊情况下不执行,如System.exit(0);</p></li><li><p>在return结束之前会考虑有没有其他东西需要执行</p></li><li><p>如果有就添加finally并执行后再彻底结束返回</p></li><li><p>finally关键字可有可无</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">234</span>, <span class="hljs-number">35</span>&#125;;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(arr[<span class="hljs-number">5</span>]);<br><span class="hljs-comment">//如果用了这个语句就不会出现finally语句的 直接结束jvm</span><br><span class="hljs-comment">//System.exit(0); </span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">return</span> ;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">//finally下的句子必须执行除非特殊情况</span><br>System.out.println(<span class="hljs-string">&quot;记得查看apiNaote&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="3-Throws"><a href="#3-Throws" class="headerlink" title="3.Throws"></a>3.Throws</h2><p>throws就是抓抛模式的抛<br>它本身并不能真正解决异常的实际问题<br>它只是把问题从一个方法体抛给了另外一个方法体<br>最终的处理还是需要用try_catch进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">//甩到main方法就没法甩了必须做出处理</span><br>       <span class="hljs-keyword">try</span> &#123;<br>           method2();<br>       &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>           e.printStackTrace();<br>       &#125;<span class="hljs-keyword">finally</span> &#123;<br>           System.out.println(<span class="hljs-string">&quot;可能文件的路径存在一定问题&quot;</span>);<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">//method2接盘method1发现没救继续甩锅</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>       method1();<br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException, IOException &#123;<br>     exception code<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-三T的区别"><a href="#4-三T的区别" class="headerlink" title="4.三T的区别"></a>4.三T的区别</h2><p><strong>Throw:</strong></p><ul><li>用在方法体内,跟的是异常对象名</li><li>只能抛出一个异常对象名</li><li>表示抛出异常,由方法体内的语句处理</li></ul><p><strong>Throws:</strong></p><ul><li>用在方法声明后面,跟的是异常类名</li><li>可以跟多个异常类名,用逗号隔开</li><li>表示抛出异常,由该方法的调用者来处理</li></ul><p><strong>Throwable</strong></p><ul><li>Throwable是一个接口</li><li>接口中定义了一些通用的方法</li><li>它的实例类为Error和Exception</li><li>方法一般通过实例类去调用</li></ul><h2 id="5-三F的区别"><a href="#5-三F的区别" class="headerlink" title="5.三F的区别"></a>5.三F的区别</h2><p><strong>Final:</strong></p><ul><li>修饰类，类不能被继承</li><li>修饰方法，方法不能被重写</li><li>修饰变量，只能赋值一次</li></ul><p><strong>Finally:</strong></p><ul><li>作为try catch中的语句体</li><li>不能单独使用,用来释放资源用的</li></ul><p><strong>Finalize:</strong></p><ul><li>Object类的方法</li><li>当垃圾回收器确定不存在该对象的更多引用时,由对象的垃圾回收器调用此方法。</li><li>注:不要在finalize里写return,因为finalize的作用就是为了释放资源,是肯定会执行的,若写了,try和catch就失效了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂设计模式</title>
    <link href="/2022/04/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是工厂设计模式"><a href="#1-什么是工厂设计模式" class="headerlink" title="1.什么是工厂设计模式"></a>1.什么是工厂设计模式</h2><p><strong>就是创建者与调用者的分离，把创建对象具体过程屏蔽隔离起来，最终提高了代码的灵活性</strong></p><h3 id="1-1工厂模式分类"><a href="#1-1工厂模式分类" class="headerlink" title="1.1工厂模式分类"></a>1.1工厂模式分类</h3><ul><li>简单工厂<br>生产同一等级结果中任意产品，若增加新产品需修改已有代码<br>缺点就是会违反开闭原则(对扩展开放,对修改封闭)</li><li>工厂方法<br>生产同一等级结果中固定产品，支持增加任意产品</li><li>抽象工厂<br>生产不同产品族的全部产品，不支持增加新产品，支持增加产品组</li></ul><h2 id="2-简单工厂案例"><a href="#2-简单工厂案例" class="headerlink" title="2.简单工厂案例"></a>2.简单工厂案例</h2><h3 id="2-1测试类"><a href="#2-1测试类" class="headerlink" title="2.1测试类"></a>2.1测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//直接类名.调用AnimalsFactory里面的方法即可</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Dog) AnimalsFactory.createAnimal(<span class="hljs-string">&quot;dog&quot;</span>);      <br>        d.eat();<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (Cat) AnimalsFactory.createAnimal(<span class="hljs-string">&quot;cat&quot;</span>);<br>        c.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2动物类与子类"><a href="#2-2动物类与子类" class="headerlink" title="2.2动物类与子类"></a>2.2动物类与子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animals</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animals</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗吃肉&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-造动物的类"><a href="#2-2-造动物的类" class="headerlink" title="2.2 造动物的类"></a>2.2 造动物的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalsFactory</span> &#123;<br><span class="hljs-comment">//如果使用方法需要定于很多方法，复用写太差</span><br>    <span class="hljs-comment">/*public static Dog createDog()&#123;</span><br><span class="hljs-comment">        return new Dog();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    public static Cat createCat()&#123;</span><br><span class="hljs-comment">        return new Cat();</span><br><span class="hljs-comment">    &#125;*/</span><br>    <br><br>    <span class="hljs-comment">//改进直接做一个返回值为Animals的方法，内部进行判断，提高复用性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Animals <span class="hljs-title function_">createAnimal</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-comment">//判断条件 满足条件时候 返回对应参数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;dog&quot;</span>.equals(name)) &#123;       <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;cat&quot;</span>.equals(name))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板设计模式</title>
    <link href="/2022/04/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是模板设计模式"><a href="#1-什么是模板设计模式" class="headerlink" title="1.什么是模板设计模式"></a>1.什么是模板设计模式</h2><ol><li>所学的抽象类就是此模式的体现</li><li>抽象类作为子类的模板</li><li>子类在这个模板上进行修改</li><li>但抽象类的行为方式子类是要保持的</li></ol><p><strong>Java角度来看，功能内部一部分东西是确定的就写到抽象类中，一部分不确定的暴漏出去，让子类去实现</strong></p><h2 id="2-通过抽象案例体现"><a href="#2-通过抽象案例体现" class="headerlink" title="2.通过抽象案例体现"></a>2.通过抽象案例体现</h2><h3 id="2-1测试类"><a href="#2-1测试类" class="headerlink" title="2.1测试类"></a>2.1测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplateTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubTemplate</span>();<br>        template.Code();<br>        template.spendTime();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span>&#123;<br>    <span class="hljs-comment">//用于计算花费时间(此方法具有确定性)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">spendTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        Code();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span>+(end-start));<br>    &#125;<br><br>    <span class="hljs-comment">//此方法是不确定的具体需要子类去实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Code</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="2-2子类"><a href="#2-2子类" class="headerlink" title="2.2子类"></a>2.2子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubTemplate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Code</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//输出1000以内的质数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j&lt;Math.sqrt(i);j++)&#123;<br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>)&#123;<br>                    isFlag = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (isFlag)&#123;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理设计模式</title>
    <link href="/2022/04/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/20/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是代理设计模式"><a href="#1-什么是代理设计模式" class="headerlink" title="1.什么是代理设计模式"></a>1.什么是代理设计模式</h2><ol><li><p>抽象的来讲：为其他对象提供一种代理去控制这个对象的访问</p></li><li><p>形象的来讲：就是把你需完成的事，让别人帮你完成，你只需要告诉别人你的需求</p></li><li><p>应用场景：安全代理 远程代理 延迟代理</p></li><li><p>分类：静态代理、动态代理(JDK自带具体体现在反射)</p></li></ol><h2 id="2-案例演示"><a href="#2-案例演示" class="headerlink" title="2.案例演示"></a>2.案例演示</h2><p><strong>典型案例：你点了外卖，外卖小哥帮你送到你家，你(被代理),外卖小哥(代理人)<br>基于Java接口部分实现的一个小测试</strong></p><h3 id="2-1测试类"><a href="#2-1测试类" class="headerlink" title="2.1测试类"></a>2.1测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MeituanTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//new Horseman里面就是多态(MtDaily daily = new Customer())</span><br>        <span class="hljs-type">Horseman</span> <span class="hljs-variable">horseman</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Horseman</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>());<br>        <span class="hljs-comment">//最终输出是Customer的语句</span><br>        horseman.mtFood();<br>        <span class="hljs-comment">//骑手配送</span><br>        Horseman.HorDo();<br>        <span class="hljs-comment">//客户点评，开吃</span><br>        Customer.cusDo();<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MtDaily</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">mtFood</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2客户类"><a href="#2-2客户类" class="headerlink" title="2.2客户类"></a>2.2客户类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MtDaily</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;吕威&quot;</span>;<br>    <span class="hljs-comment">//吕威点了这些东西，它只需要等待就行了</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mtFood</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name+<span class="hljs-string">&quot;点了美团外卖&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//吕威后面要做的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cusDo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;答谢骑手5星好评&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;打开美团外卖开始吃&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3骑手类"><a href="#2-3骑手类" class="headerlink" title="2.3骑手类"></a>2.3骑手类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Horseman</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MtDaily</span> &#123;<br><br>    <span class="hljs-keyword">private</span> MtDaily daily;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Horseman</span><span class="hljs-params">(MtDaily daily)</span>&#123;<br>        <span class="hljs-built_in">this</span>.daily = daily;<br>    &#125;<br><br><br>    <span class="hljs-comment">//吕威这些需求由骑手完成</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mtFood</span><span class="hljs-params">()</span> &#123;<br>        daily.mtFood();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HorDo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;骑手已接单&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;骑手配送中&quot;</span>+<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例设计模式</title>
    <link href="/2022/04/15/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/15/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/DesignPattern/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是单列设计模式"><a href="#1-什么是单列设计模式" class="headerlink" title="1.什么是单列设计模式"></a>1.什么是单列设计模式</h2><h3 id="1-1形象理解"><a href="#1-1形象理解" class="headerlink" title="1.1形象理解"></a>1.1形象理解</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">典型的单列设计模式的应用<br><br>Windows的<span class="hljs-keyword">task</span> manager<br><br>各个exe程序要用的时候<br><br>直接去调用<span class="hljs-keyword">Task</span> manager的<span class="hljs-keyword">static</span>方法就行<br></code></pre></td></tr></table></figure><h3 id="1-2Java角度理解"><a href="#1-2Java角度理解" class="headerlink" title="1.2Java角度理解"></a>1.2Java角度理解</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">1.</span>让一个类只存在一个对象实例<br><br><span class="hljs-number">2.</span>类的构造器<span class="hljs-keyword">private</span>化,且只提供一个取得其对象实例的方法<br><br><span class="hljs-number">3.</span>在类的内部来创建类的对象，外部无法获得类的对象<br><br><span class="hljs-number">4.</span>调用该类的某个静态方法来返回类内部创建的对象<br><br><span class="hljs-number">5.</span>类内部的方法和对象都需要静态化<br></code></pre></td></tr></table></figure><h3 id="1-3优点"><a href="#1-3优点" class="headerlink" title="1.3优点"></a>1.3优点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.减少了系统性能开销<br>2.当一个对象需要过多的资源的时候，这个时候就可以提前生产<br>2.一个单列对象，让它永远驻留在内存中<br></code></pre></td></tr></table></figure><h2 id="2-两种模式"><a href="#2-两种模式" class="headerlink" title="2.两种模式"></a>2.两种模式</h2><h3 id="2-1饿汉式"><a href="#2-1饿汉式" class="headerlink" title="2.1饿汉式"></a>2.1饿汉式</h3><p>在程序启动或单件模式类被加载的时候，单件模式实例就已经被创建，空间换时间，不会创建多个对象。</p><p>代码实例化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hungry</span> &#123;<br>        <span class="hljs-comment">//1 私有类的构造器(外部就不能造对象)</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">Hungry</span><span class="hljs-params">()</span>&#123;&#125;<br><br>        <span class="hljs-comment">//2 内部创建类的对象(必须静态化)</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Hungry</span> <span class="hljs-variable">hungry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hungry</span>();<br><br>        <span class="hljs-comment">//3 对外提供public静态方法,返回类的对象</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hungry <span class="hljs-title function_">getHungry</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> hungry;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2懒汉式"><a href="#2-2懒汉式" class="headerlink" title="2.2懒汉式"></a>2.2懒汉式</h3><p>当程序第一次访问单件模式实例时才进行创建，时间换空间,有可能创建多个对象。<br>代码实例化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Lazy&#123;<br><span class="hljs-comment">//1 私有构造器</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Lazy</span><span class="hljs-params">()</span>&#123;&#125;<br><br>        <span class="hljs-comment">//2 内部创建类的对象默认赋值(必须静态化)</span><br>        priavte <span class="hljs-keyword">static</span> <span class="hljs-type">Lazy</span> <span class="hljs-variable">lazy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy <span class="hljs-title function_">getLazy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//3 判断是否为空</span><br>        <span class="hljs-keyword">if</span>(lazy == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//4 若是new一个对象</span><br>                lazy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lazy</span>();<br>            &#125;<br>            <span class="hljs-comment">//5 返回对象</span><br>            retrn lazy;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3选择对比"><a href="#2-3选择对比" class="headerlink" title="2.3选择对比"></a>2.3选择对比</h3><ul><li><p>饿汉式是线程安全的对象加载时间太长</p></li><li><p>懒汉式目前写法线程不安全(多线程调试)延迟对象的创建</p></li><li><p>如果单件模式实例经常用，饿汉式。</p></li><li><p>如果单件模式几乎不会用到饿汉式，那就选择懒汉式。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用类 | 包装类</title>
    <link href="/2022/04/11/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/%E5%8C%85%E8%A3%85%E7%B1%BB%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/11/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/NormalClass/%E5%8C%85%E8%A3%85%E7%B1%BB%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Object"><a href="#1-Object" class="headerlink" title="1.Object"></a>1.Object</h2><h3 id="1-1Object类概述"><a href="#1-1Object类概述" class="headerlink" title="1.1Object类概述"></a>1.1Object类概述</h3><ul><li>Object是类层次结构的根类</li><li>每个类都使用Object作为超类</li><li>所有对象包括数组都实现这个类的方法</li><li>只有一个空参构造器</li><li>默认每一个方法中都有一个super();用来接受这个构造方法</li></ul><h3 id="1-2API文档"><a href="#1-2API文档" class="headerlink" title="1.2API文档"></a>1.2API文档</h3><p>Object常用方法可以通过API中去查询，具体位置是lang包下的object类</p><p>URL：<a href="https://docs.oracle.com/javase/8/docs/api/">JAVA API1.8</a></p><h3 id="1-3Equals"><a href="#1-3Equals" class="headerlink" title="1.3Equals()"></a>1.3Equals()</h3><p>重写前比较地址值的(开发基本不用)</p><p>重写后比较实体内容(属性)(开发要这么用)</p><p>开发不需要手写equals但是要会写</p><p>可以使用IDEA的快捷键直接生成equals重写</p><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重写的原则:比较两个对象的实体内容是否相同(即name和age)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>&#123;<br>    <span class="hljs-comment">//比较的是地址，相同就返回true</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> StudentList) &#123;<br>        <span class="hljs-type">StudentList</span> <span class="hljs-variable">slt</span> <span class="hljs-operator">=</span> (StudentList) obj;<br>        <span class="hljs-comment">//&amp;&amp;如果a和b都是true 则返回true</span><br>        <span class="hljs-comment">//比较两个对象的属性是否都相同 前面age为基本数据类型 后面name为引用数据类型</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age == age<br>                &amp;&amp;<br>                <span class="hljs-built_in">this</span>.name.equals(slt.name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试类比较</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重写前比较两个对象的地址值</span><br><span class="hljs-comment">//重写后比较两个对象的实体内容(属性)</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isEquals</span> <span class="hljs-operator">=</span> studentList1.equals(studentList2);<br>System.out.println(<span class="hljs-string">&quot;studentlist类型比较equals:&quot;</span>+isEquals);<br><br><span class="hljs-comment">//==比较引用数据类型，比较的是地址值</span><br>System.out.println(<span class="hljs-string">&quot;studentlist类型比较==:&quot;</span>+(studentList1 == studentList2));<br><br><br><span class="hljs-comment">//==比较基本数据类型，比较的是值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>System.out.println(<span class="hljs-string">&quot;int类型比较:&quot;</span>+(a == b));<br></code></pre></td></tr></table></figure><h3 id="1-4toString"><a href="#1-4toString" class="headerlink" title="1.4toString()"></a>1.4toString()</h3><p>重写前，调用返回的是地址值</p><p>重写后，更直观的显示实体内容属性</p><p>开发不需要手写toString但是要会写</p><p>可以使用IDEA的快捷键直接生成toString重写</p><p><strong>重写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-comment">//重写toString把参数返回到ToString类中</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//在ToString类中进行打印即可</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;StudentList&#123;&quot;</span> + <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试类比较</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">StudentLists=newStudentList(<span class="hljs-string">&quot;小白&quot;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">//没用重写之前调用的是地址值</span><br><span class="hljs-comment">//重写后输出的是属性值</span><br>System.out.println(s);<br>System.out.println(s.toString());<br></code></pre></td></tr></table></figure><h3 id="1-5getClass"><a href="#1-5getClass" class="headerlink" title="1.5getClass()"></a>1.5getClass()</h3><p>具体体现在反射</p><p>返回此Object的运行类</p><p>可以通过Class类中的一个方法,获取对象真实类的全名称</p><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StudentList</span> <span class="hljs-variable">studentList</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentList</span>(<span class="hljs-string">&quot;xiaohuia&quot;</span>,<span class="hljs-number">13</span>);<br><span class="hljs-comment">//获取对象的类</span><br>System.out.println(studentList.getClass());<br><span class="hljs-comment">//获取对象的父类</span><br>System.out.println(studentList.getClass().getSuperclass());<br></code></pre></td></tr></table></figure><h3 id="1-6hashCode"><a href="#1-6hashCode" class="headerlink" title="1.6hashCode()"></a>1.6hashCode()</h3><p>具体使用在反射部分讲解<br><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Object ob=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">int</span> hashCode=ob.hashCode();<br>System.out.println(hashCode);<br>返回该对象的哈希码值 类型为<span class="hljs-type">int</span>类型<br></code></pre></td></tr></table></figure><h3 id="1-7-x3D-x3D-和Equals-的区别"><a href="#1-7-x3D-x3D-和Equals-的区别" class="headerlink" title="1.7&#x3D;&#x3D;和Equals()的区别"></a>1.7&#x3D;&#x3D;和Equals()的区别</h3><p><strong>经典面试题</strong></p><p><strong>共同点</strong><br>都可以做比较<br>返回值类型都是boolean</p><p><strong>不同点</strong></p><ol><li><p>&#x3D;&#x3D;是运算符,基本数据类型&#x2F;比较引用数据类型都可以比较</p></li><li><p>基本数据类型比较的是数据值(类型可以不相同&#x2F;除boolean)</p></li><li><p>引用数据类型是地址值，即两个对象是否指向同一个对象实体</p></li><li><p>equals是方法,只能比较引用数据类型(底层依赖是&#x3D;&#x3D;)</p></li><li><p>重写前，比较的是地址值&lt;—&gt;重写后，比较对象中的实体内容(属性)<br>(后面的常用类基本上都重写了equlas方法,例如String、Date等)</p></li></ol><p><em><strong>注:比较地址值是没有意义的</strong></em></p><h2 id="2-包装类"><a href="#2-包装类" class="headerlink" title="2.包装类"></a>2.包装类</h2><h3 id="2-1包装类概述"><a href="#2-1包装类概述" class="headerlink" title="2.1包装类概述"></a>2.1包装类概述</h3><ol><li>针对基本数据类型定义的相对应引用数据类型</li><li>int写为Integer char写为Character 其他六种首字母大写(父类为Number)</li><li>有了类的特点，就可以调用类的方法，才是真正意义的面向对象</li><li>核心点就是基本数据类型、包装类、String三者的转换</li></ol><h3 id="2-2类型转换"><a href="#2-2类型转换" class="headerlink" title="2.2类型转换"></a>2.2类型转换</h3><h4 id="2-2-1基本数据类型—-gt-包装类"><a href="#2-2-1基本数据类型—-gt-包装类" class="headerlink" title="2.2.1基本数据类型—&gt;包装类"></a>2.2.1基本数据类型—&gt;包装类</h4><ol><li>调用包装类构造器传参即可</li><li>如果传的是String就要保持是这个类型的格式</li><li>Boolean对象的形参只要不是true，返回的就是false</li><li>包装类在不赋值默认输出为null(因为它是引用数据类型)</li></ol><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">     <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">300</span>);<br>     System.out.println(i1.toString());<br><br>     <span class="hljs-comment">//传参为String时，之能为纯数字，否则就会报错</span><br>     <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;300&quot;</span>);<br>     System.out.println(i2.toString());<br><br>     <span class="hljs-comment">//String状态下不是true这个词，返回就是false</span><br>     <span class="hljs-type">Boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&quot;trdue&quot;</span>);<br>     <span class="hljs-type">Boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&quot;false&quot;</span>);<br>     System.out.println(b1);<br>     System.out.println(b2);<br><br>     <span class="hljs-type">oreder</span> <span class="hljs-variable">or</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">oreder</span>();<br><span class="hljs-comment">//boolean默认返回false</span><br>     System.out.println(or.isFlag);<br><span class="hljs-comment">//包装类，不赋值，默认输出null</span><br>     System.out.println(or.isFLAG);<br></code></pre></td></tr></table></figure><h4 id="2-2-2包装类—-gt-基本数据类型"><a href="#2-2-2包装类—-gt-基本数据类型" class="headerlink" title="2.2.2包装类—&gt;基本数据类型"></a>2.2.2包装类—&gt;基本数据类型</h4><ul><li>直接使用包装类的xxxValue()方法就可以了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-comment">//Junit单元测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">revereTest</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">Float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float</span>(<span class="hljs-number">13.2</span>);<br><br>    <span class="hljs-type">float</span> <span class="hljs-variable">ft2</span> <span class="hljs-operator">=</span> ft.floatValue();<br><br>    System.out.println(ft2 + <span class="hljs-number">26.9</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3自动装箱-自动拆箱"><a href="#2-3自动装箱-自动拆箱" class="headerlink" title="2.3自动装箱 自动拆箱"></a>2.3自动装箱 自动拆箱</h3><ul><li>JDK的新特性，1.5版本以后，取代了上面的两种方法</li></ul><p><strong>自动装箱</strong></p><ol><li>不需要去new一个对象</li><li>直接 包装类型 类型 &#x3D; 基本数据类型名称 就可以了</li><li>相当于之前的转换方法被替代掉了</li></ol><p><strong>自动拆箱</strong></p><ul><li>把包装类直接赋值给基本数据类型即可(除String)</li></ul><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">Interger</span> <span class="hljs-variable">it0</span> <span class="hljs-operator">=</span> num1;<br><br><br><span class="hljs-comment">//自动拆箱</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">it1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">300</span>);<br><br>System.out.println(it1.toString());<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> it1;<br>System.out.println(num2 + <span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure><h3 id="2-4与String的转换"><a href="#2-4与String的转换" class="headerlink" title="2.4与String的转换"></a>2.4与String的转换</h3><p>基本数据类型&#x2F;包装类—–&gt;String<br>直接通过String的valueOf(xxx)重载方法</p><p>String—–&gt;基本数据类型&#x2F;包装类<br>直接通过包装类的parseXXX()方法</p><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReverseString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123.456232&quot;</span>;<br>    <span class="hljs-comment">//自动拆箱体现</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> Float.parseFloat(s1);<br>    System.out.println(f1);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TRUE&quot;</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(s2);<br>    System.out.println(b1);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5面试题"><a href="#2-5面试题" class="headerlink" title="2.5面试题"></a>2.5面试题</h3><p><strong>Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReverseString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123.456232&quot;</span>;<br>    <span class="hljs-comment">//自动拆箱体现</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> Float.parseFloat(s1);<br>    System.out.println(f1);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TRUE&quot;</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(s2);<br>    System.out.println(b1);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解释</strong></p><ol><li>返回为false具体看Integer源码的IntegerCache结构的的Integer[]</li><li>Integer[]保存了-128~127的整数</li><li>在此范围内,直接使用此数字元素,无需再new,提高开发效率</li></ol><p><strong>判断输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interviewTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//引用数据类型比较的地址值</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        System.out.println(i1 == i2);<br><br>        <span class="hljs-comment">//自动拆箱比较的是值</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        System.out.println(a == b);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>常用类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Polymorphism[JAVA]</title>
    <link href="/2022/04/08/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/OOP/Polymorphism/"/>
    <url>/2022/04/08/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/OOP/Polymorphism/</url>
    
    <content type="html"><![CDATA[<h2 id="1-多态性"><a href="#1-多态性" class="headerlink" title="1.多态性"></a>1.多态性</h2><h3 id="1-0个人理解"><a href="#1-0个人理解" class="headerlink" title="1.0个人理解"></a>1.0个人理解</h3><ul><li>面向对象多态这个点其实是比较难理解的，但是结合封装和继承的角度去看的话，其实不难，多态性只是概念上比较难懂，更多时候是需要去多写代码去理解它的性质。</li><li>多态的前提是要有继承和重写的，举个例子来说吧，</li><li>每一个动物都会叫，但是每种动物的叫声可能就不一样了，这个时候我们定义一个动物类写一个叫声方法，</li><li>然后猪类、猫类、狗类这些类继承了动物类就获得了(重写)动物类的叫声方法，</li><li>我们在这个方法里定义每种动物自己特定的叫声(方法体),当调用的时候有动物类的引用就可以，然后造猪类、猫类、狗类的对象就行了(父类引用指向子类对象)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">animals</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">voice</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物都可以叫&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">animals</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">voice</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;汪汪汪&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">animals</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">voice</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;喵喵喵&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">text</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>        <span class="hljs-comment">//1多态的体现(直接调用)</span><br>        <span class="hljs-type">animals</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span>();<br>        a.voice();<br>        <span class="hljs-type">animals</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>();<br>        a1.voice();<br>        <br>        <span class="hljs-comment">//2多态的体现(传参方式)</span><br>        <span class="hljs-type">text</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">text</span>();<br>        t.method(<span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span>());<br>        t.method(<span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>());<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(animals als)</span>&#123;<br>        als.voice();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1多态核心"><a href="#1-1多态核心" class="headerlink" title="1.1多态核心"></a>1.1多态核心</h3><p>简单来说就是事物存在的多种形态</p><p>多态前提：要有继承关系，要有方法重写，要有父类引用指向子类对象</p><p>父类引用指向子类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Father</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br></code></pre></td></tr></table></figure><h3 id="1-2多态弊利"><a href="#1-2多态弊利" class="headerlink" title="1.2多态弊利"></a>1.2多态弊利</h3><p><strong>利处</strong><br>提高了代码的维护性(继承保证)</p><p>提高了代码的扩展性(由多态保证)</p><p><strong>弊端</strong><br>不能使用子类的特有属性和方法</p><p>关键字instanceof 判断前面的引用是否是后面的数据类型</p><h3 id="1-3成员访问特点"><a href="#1-3成员访问特点" class="headerlink" title="1.3成员访问特点"></a>1.3成员访问特点</h3><ul><li><p>成员变量<br>编译看左边(父类),运行看左边(父类)</p></li><li><p>成员方法<br>编译看左边(父类),运行看右边(子类){动态绑定}</p></li><li><p>静态方法<br>编译看左边(父类),运行看左边(父类)<br>静态和类相关,算不上重写,所以,访问还是左边的<br>只有非静态的成员方法,编译看左边,运行看右边</p></li><li><p>CODE</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编译左，运行右</span><br><span class="hljs-type">ainmals</span> <span class="hljs-variable">als</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>(); <span class="hljs-comment">//父类引用指向子类对象</span><br>als.eat();<br><br><span class="hljs-comment">//遍历和运行都是左</span><br>System.out.println(als.leg);<br><br></code></pre></td></tr></table></figure><h3 id="1-4虚拟方法调用"><a href="#1-4虚拟方法调用" class="headerlink" title="1.4虚拟方法调用"></a>1.4虚拟方法调用</h3><p><strong>虚拟方法调用(多态情况下)</strong></p><ol><li>调用子父类同名同参的方法时，在多态的情况下，父类的方法就称为虚拟方法</li><li>父类根据赋给它不同的子类，动态调用属于子类自己的该方法</li><li>这样的方法在编译期间，是无法确定的</li></ol><p><strong>动态绑定</strong></p><p>ainmals als &#x3D; new cat();&#x2F;&#x2F;父类引用指向子类对象<br>als.eat();</p><p>编译时为父类类型，但是方法调用是在运行才知道<br>所以调用的子类的方法</p><h3 id="1-5上下转型"><a href="#1-5上下转型" class="headerlink" title="1.5上下转型"></a>1.5上下转型</h3><p><strong>向上转型(就是多态)</strong><br>向上转型(父类引用指向子类对象)<br>父类名称 父类变量名&#x3D;new 子类名称();<br>Person p&#x3D;new superman();</p><p><strong>向下转型 (需用instanceof判断)</strong><br>强制类型转换<br>子类名称 子类变量名 &#x3D; (子类名称)父类变量名<br>superman s&#x3D;（superman）p;</p><h2 id="2-instanceof关键词"><a href="#2-instanceof关键词" class="headerlink" title="2.instanceof关键词"></a>2.instanceof关键词</h2><h3 id="2-1instanceof用法"><a href="#2-1instanceof用法" class="headerlink" title="2.1instanceof用法"></a>2.1instanceof用法</h3><p>常用于多态向下转型时<br>为避免出现classcast异常，向下转型前先使用它进行判断<br>判断格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">If(a <span class="hljs-keyword">instanceof</span> A)<br></code></pre></td></tr></table></figure><p>判断对象a是否是类A的实例<br>是返回true 不是返回false</p><p>如此格式返回true如下格式也返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">If(b <span class="hljs-keyword">instanceof</span> B)<br></code></pre></td></tr></table></figure><h3 id="2-2代码体现"><a href="#2-2代码体现" class="headerlink" title="2.2代码体现"></a>2.2代码体现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Watch</span> <span class="hljs-variable">watch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TraditionWatch</span>(); <span class="hljs-comment">//父类引用指向子类对象</span><br>watch.seeTime();<br>watch.collect();<br><span class="hljs-keyword">if</span> (watch <span class="hljs-keyword">instanceof</span> TraditionWatch)&#123; <span class="hljs-comment">//判断watch是不是TraditionWatch的实例</span><br>        <span class="hljs-type">TraditionWatch</span> <span class="hljs-variable">tdw</span> <span class="hljs-operator">=</span>(TraditionWatch) watch;<br>        tdw.crafts();        <span class="hljs-comment">//子类调用自己特有的方法</span><br>&#125;<br><span class="hljs-keyword">if</span> (watch <span class="hljs-keyword">instanceof</span> SmartWatch)&#123;<br>        <span class="hljs-type">SmartWatch</span> <span class="hljs-variable">swh</span> <span class="hljs-operator">=</span> (SmartWatch) watch;<br>        swh.fashion();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-面试题"><a href="#3-面试题" class="headerlink" title="3.面试题"></a>3.面试题</h2><h3 id="3-1如下代码输出？"><a href="#3-1如下代码输出？" class="headerlink" title="3.1如下代码输出？"></a>3.1如下代码输出？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterviewTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">faze</span> <span class="hljs-variable">fe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">zil</span>();<br>        fe.add(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">//结果:zil</span><br><br>        <span class="hljs-keyword">if</span> (fe <span class="hljs-keyword">instanceof</span>  zil) &#123;<br>            <span class="hljs-type">zil</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> (zil) fe;<br>            z.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);     <span class="hljs-comment">//结果:zil222</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//构成方法的重写 可变形参讲过这个问题 ...和[]是一个意思</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">faze</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> ... arr)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;faze&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">zil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">faze</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>[] arr)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;zil&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//对于本类来说构成重载 对于父类来说不构成重写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;zil222&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-抽象-abstract"><a href="#4-抽象-abstract" class="headerlink" title="4.抽象(abstract)"></a>4.抽象(abstract)</h2><h3 id="4-1理解抽象"><a href="#4-1理解抽象" class="headerlink" title="4.1理解抽象"></a>4.1理解抽象</h3><ol><li>抽象可以理解为关键词，也可以理解为面向对象的一种性质</li><li>抽象可以修饰类和方法，抽象方法没有方法体</li><li>抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者接口</li><li>抽象类不能实例化，要实例化只能通过子类(抽象多态)</li><li>抽象类子类要么是抽象类，要么实现所有所有父类的抽象方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CLASS_NAME</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">METHOD_NAME</span><span class="hljs-params">( )</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2关键词冲突"><a href="#4-2关键词冲突" class="headerlink" title="4.2关键词冲突"></a>4.2关键词冲突</h3><p><strong>static</strong></p><ul><li>被abstract修饰的方法没有方法体</li><li>被static修饰的方法可以用类名调用，抽象方法没有方法体没意义</li></ul><p><strong>final</strong></p><ul><li>final修饰的方法体不能被重写，abstract则是子类必须重写</li></ul><p><strong>private</strong></p><ul><li>被abstract修饰是为了让子类看到并强制重写</li><li>被private修饰不让子类访问,所以两者也是矛盾的</li></ul><h3 id="4-3匿名抽象"><a href="#4-3匿名抽象" class="headerlink" title="4.3匿名抽象"></a>4.3匿名抽象</h3><p><strong>对象不匿名，类匿名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">anonymousUs</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//匿名类的使用</span><br>    <span class="hljs-type">aHuman</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">aHuman</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;建筑工人多吃肉有力气干活&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learn</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;建筑工人学习土木知识&quot;</span>);<br>        &#125;<br>    &#125;;<br>    anony(aa);<br></code></pre></td></tr></table></figure><p><strong>对象，类都匿名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">anony(<span class="hljs-keyword">new</span> <span class="hljs-title class_">aHuman</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电器工人多吃肉有力气干活&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;电器工人学习CAD和工业知识&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="5-接口-Interface"><a href="#5-接口-Interface" class="headerlink" title="5.接口(Interface)"></a>5.接口(Interface)</h2><h3 id="5-1理解接口"><a href="#5-1理解接口" class="headerlink" title="5.1理解接口"></a>5.1理解接口</h3><ol><li>从狭窄的角度来讲就是指Java中的interface</li><li>从广义的角度来讲就是对外提供规则的都是接口</li><li>接口就是一种规范(开发中会体现面向接口编程)</li><li>极大意义上弥补Java的单继承性</li><li>接口的使用充分的体现了多态性</li></ol><h3 id="5-2接口特点"><a href="#5-2接口特点" class="headerlink" title="5.2接口特点"></a>5.2接口特点</h3><ol><li>接口中没有构造器(无法实例化)</li><li>接口实例化通过实现类来实例化(多态体现)</li><li>接口中的方法都是抽象的(JDK1.8前)</li><li>实现接口的类,如果没有实现全部接口的方法,必须加上abstract</li><li>如果此类实现了接口的所有方法,就没必要加上abstract</li></ol><h3 id="5-3JDK8新特征"><a href="#5-3JDK8新特征" class="headerlink" title="5.3JDK8新特征"></a>5.3JDK8新特征</h3><p><strong>成员特点</strong></p><p>变量:只能是常量,并且是static和public的<br>方法:只能是抽象方法(1.8以后还可以定义静态方法，default方法)<br>注:静态方法和default方法有方法体，抽象方法没有方法体</p><p><strong>注意事项</strong></p><ol><li>接口中的静态方法只能通过接口.方法名调用</li><li>接口中的default方法类可以实现，也可以不实现</li><li>当实例类继承的两个接口中出现同名的方法后，需要通过接口名.super.方法名调用</li><li>若上述两个接口的参数也一样的情况下会报错(接口冲突)</li><li>实际开发中不会这么无聊的去写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">See</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">final</span> <span class="hljs-variable">MAX_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">996</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methdo1</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span>&#123;&#125;;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method3</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4匿名接口"><a href="#5-4匿名接口" class="headerlink" title="5.4匿名接口"></a>5.4匿名接口</h3><ol><li>非匿名实现类的匿名对象(多态写法)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    Computer.transferData(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flash</span>());<br>````<br><br><span class="hljs-number">2.</span> 接口匿名 类非匿名<br><br>```java<br>    <span class="hljs-type">USB</span> <span class="hljs-variable">mp3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">USB</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;mp3工作&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;mp3停止工作&quot;</span>);<br>        &#125;<br>    &#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>接口匿名 类也匿名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Computer.transferData(<span class="hljs-keyword">new</span> <span class="hljs-title class_">USB</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;游戏机工作&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;游戏机停止工作&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="6-两者区别"><a href="#6-两者区别" class="headerlink" title="6.两者区别"></a>6.两者区别</h2><ol><li>抽象类中定义的是该继承体系的共性功能，被继承体现的是”is a”的关系</li><li>接口中定义的是该继承体系的拓展功能，被实现体现的是”like a”的关系</li><li>其实接口也在逐渐的类化，例如JDK8加入了静态方法和默认方法</li><li>JDK11又加入了私有方法,基本上实在向抽象类的意义靠拢拉近的</li></ol><p><strong>内部定义要求</strong></p><p>Abstract：变量&#x2F;常量谐可 抽象&#x2F;非抽象方法谐可 有构造方法<br>Interface：常量    只能抽象方法  没有构造方法</p><p><strong>关系区别</strong></p><p>类与类：继承、单继承<br>类与接口：实现、单实现、多实现<br>接口与接口：继承、单继承、多继承</p><h2 id="7-代码块"><a href="#7-代码块" class="headerlink" title="7.代码块"></a>7.代码块</h2><h3 id="7-1非静态代码块"><a href="#7-1非静态代码块" class="headerlink" title="7.1非静态代码块"></a>7.1非静态代码块</h3><p>随着对象的创建而创建，每创建一个对象执行一次</p><p>可在创建对象时，对对象属性进行初始化</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    里面写代码</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="7-2静态代码块"><a href="#7-2静态代码块" class="headerlink" title="7.2静态代码块"></a>7.2静态代码块</h3><p>随着类的加载就执行,并且只执行一次</p><p>用于初始化类的信息,优先于主方法执行,一般用于加载驱动</p><p><em><strong>注:内部书写要求依据static使用来写</strong></em></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">static</span>&#123;<br>    里面写代码<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3题目"><a href="#7-3题目" class="headerlink" title="7.3题目"></a>7.3题目</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">看代码想结果<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">mst</span> &#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>         System.out.println(<span class="hljs-string">&quot;static code area&quot;</span>);<span class="hljs-comment">//静态代码块优先于主方法执行</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>         System.out.println(<span class="hljs-string">&quot;我是main方法&quot;</span>);<br>         studentss s1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">studentss</span>();<br>         studentss s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">studentss</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">studentss</span>&#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>         System.out.println(<span class="hljs-string">&quot;Students 静态代码块&quot;</span>);<br>    &#125;<br><br>    &#123;<br>         System.out.println(<span class="hljs-string">&quot;Students 构造代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">studentss</span><span class="hljs-params">()</span>&#123;<br>         System.out.println(<span class="hljs-string">&quot;Students 构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">运行结果<br><span class="hljs-keyword">static</span> code area<br>我是main方法<br>Students 静态代码块<br>Students 构造代码块<br>Students 构造方法<br>Students 构造代码块<br>Students 构造方法<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inheritance[JAVA]</title>
    <link href="/2022/04/05/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/OOP/Inheritance/"/>
    <url>/2022/04/05/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/OOP/Inheritance/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是继承性"><a href="#1-什么是继承性" class="headerlink" title="1.什么是继承性"></a>1.什么是继承性</h2><h3 id="1-1继承体现"><a href="#1-1继承体现" class="headerlink" title="1.1继承体现"></a>1.1继承体现</h3><ol><li>继承(extends)让类与类之间产生关系,子父类关系</li><li>Animal是父类，cat和dog都是子类</li><li>书写格式 class cat extends Animal{}</li></ol><h3 id="1-2代码体现"><a href="#1-2代码体现" class="headerlink" title="1.2代码体现"></a>1.2代码体现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">主类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span>();<br>        d.color = <span class="hljs-string">&quot;black&quot;</span>;<br>        d.leg = <span class="hljs-number">4</span> ;<br>        d.eat();<br>        d.sleep();<br>    &#125;<br>&#125;<br><br>动物类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">animals</span>&#123;<br>    String color;    <span class="hljs-comment">//动物的颜色</span><br>    <span class="hljs-type">int</span> leg; <span class="hljs-comment">//动物腿的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">//吃饭的功能</span><br>         System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">//睡觉的功能</span><br>         System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br>&#125;<br><br>狗类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">animals</span>&#123;<br>    String color;<br>    <span class="hljs-type">int</span> leg;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>         System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>         System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-3继承核心"><a href="#1-3继承核心" class="headerlink" title="1.3继承核心"></a>1.3继承核心</h3><ol><li>Java只支持单继承,不支持多继承</li><li>Java支持多层继承(继承体系)</li><li>子类继承父类就获得了父类所有的属性与方法</li><li>父类的私有结构，子类依然可以继承，只是因为封装性的影响，不能直接调用父类的结构而已</li><li>如果要看这个体系的所有功能用最底层的类创建对象</li><li>如果想看这个体系的共性功能,看最顶层的类</li></ol><h3 id="1-3继承利弊"><a href="#1-3继承利弊" class="headerlink" title="1.3继承利弊"></a>1.3继承利弊</h3><p><strong>好处</strong><br>提高了代码的复用性以及维护性，并且让类于类之间产生了关系(多态的前提)</p><p><strong>弊端</strong><br>开发追求高内聚 低耦合，所以类的耦合性增强了<br><strong>耦合:</strong> 类于类的关系<strong>内聚:</strong> 就是自己完成某件事情的能力</p><h2 id="2-Object类"><a href="#2-Object类" class="headerlink" title="2.Object类"></a>2.Object类</h2><ol><li><p>一个类若没有声明它的父类，它默认的父类是object类</p></li><li><p>所有的java类的默认父类都是object类或间接继承object类</p></li><li><p>所有的java类都具有object类中的功能</p></li></ol><h2 id="3-方法重写"><a href="#3-方法重写" class="headerlink" title="3.方法重写"></a>3.方法重写</h2><h3 id="3-1核心意义"><a href="#3-1核心意义" class="headerlink" title="3.1核心意义"></a>3.1核心意义</h3><ol><li><p>子父类出现相同的方法(注意:返回值类型可以是子父类)</p></li><li><p>应用:当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法.</p></li></ol><h3 id="3-2注意事项"><a href="#3-2注意事项" class="headerlink" title="3.2注意事项"></a>3.2注意事项</h3><p><strong>方法本身</strong></p><ul><li>父类中private方法不能被重写</li><li>方法的形参列表要一致</li><li>子类重写父类方法时，访问权限比父类高&#x2F;一致</li></ul><p><strong>返回值类型</strong></p><ul><li>父类方法为void或基本数据类型，子重写方法一样</li><li>父类方法为引用数据类型时候，子重写方法一样&#x2F;这个引用数据类型的子类</li></ul><p><strong>后续</strong></p><ul><li>子类重写的方法抛出的异常类型，不能大于父类被重写的异常类型</li><li>子父类的同名同参数方法，要么声明static的(不是重写)，要么声明非static的(考虑重写</li></ul><h2 id="4-super关键词"><a href="#4-super关键词" class="headerlink" title="4.super关键词"></a>4.super关键词</h2><h3 id="4-1理解"><a href="#4-1理解" class="headerlink" title="4.1理解"></a>4.1理解</h3><p>super可以理解为:父类的<br>super可以调用:属性、方法、构造器</p><h3 id="4-2调用属性方法"><a href="#4-2调用属性方法" class="headerlink" title="4.2调用属性方法"></a>4.2调用属性方法</h3><ol><li><p>在子类的属性或方法中，通常使用super.属性&#x2F;方法，来显示父类中声明的属性&#x2F;方法(通常省略不写)</p></li><li><p>子类和父类定义同名属性时，需使用super.属性做区分</p></li><li><p>子类重写父类中的方法后,如果还想用父类被重写的方法，通过super.方法名调用重写前的方法</p></li></ol><font color = 'red'>注:子类继承父类就是为了使用父类属性，如果定义了同名属性是无意义的</font><h3 id="4-3调用构造器"><a href="#4-3调用构造器" class="headerlink" title="4.3调用构造器"></a>4.3调用构造器</h3><ol><li>子类构造器通过super(形参列表)的方式,调用父类声明的指定构造器</li><li>构造器的第一句必须是super(形参列表 )</li><li>this(形参列表)或super(形参列表)，在构造器中只能二选一</li><li>构造器的首行没有写的话，默认是父类的空参构造器:super()</li><li>类多多个构造器中，至少有一个构造器使用了”super(形参列表)”，去调用父类的构造器</li></ol><h2 id="5-子类对象实例化"><a href="#5-子类对象实例化" class="headerlink" title="5.子类对象实例化"></a>5.子类对象实例化</h2><p><strong>从结果上来看：(继承性)</strong></p><ul><li><p>子类继承了父类之后，就获得了父类中的属性和方法</p></li><li><p>创建子类的对象，在堆空间中，就会加载父类中声明的属性</p></li></ul><p><strong>从过程上来看</strong></p><ul><li><p>当我们通过子类的构造器去创建对象地时候，我们一定会直接或简介地去调用父类地构造器，进而调用父类地父类地构造器。。。，直到object类空参构造器为止。</p></li><li><p>正因为加载了父类地所有结构，所以才可以在内存中有父类地结构，子类对象才能去调用</p></li></ul><font color = 'red'>注:虽然创建子类对象时，调用了父类的构造器，但是自始至终只创建了一个对象，即为new的子类对象。</font>]]></content>
    
    
    <categories>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git部署常见问题</title>
    <link href="/2022/04/04/Git%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Git%E9%83%A8%E7%BD%B2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/04/Git%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Git%E9%83%A8%E7%BD%B2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>git在部署中经常莫名其妙出现一些问题，明明环境什么都设置的好好的，但是就是push不上，所以做个合集来总计一下目前遇到的问题,以及网上能搜到的有效的解决方案。</p><h2 id="2-问题及解决"><a href="#2-问题及解决" class="headerlink" title="2.问题及解决"></a>2.问题及解决</h2><h3 id="2-1README-MD"><a href="#2-1README-MD" class="headerlink" title="2.1README.MD"></a>2.1README.MD</h3><p><strong>错误代码:</strong><br><font color= red><br>! [rejected] master -&gt; master (fetch first) error: failed to push some refs to ‘ 。。。’ </font></p><p><strong>原因:</strong><br>github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并</p><p><strong>解决办法:</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin master</span><br></code></pre></td></tr></table></figure><h3 id="2-2remote-rejected"><a href="#2-2remote-rejected" class="headerlink" title="2.2remote rejected"></a>2.2remote rejected</h3><p><strong>错误代码:</strong><br><font color= red><br>! [remote rejected] master -&gt; master (pre-receive hook declined)<br></font></p><p><strong>原因:</strong><br>项目的setting中master是受保护的项目，所以无法推送，</p><p><strong>解决办法:</strong><br>修改protected的设置，或新建一个分支，推送到自己的分支上<br><a href="https://www.cnblogs.com/cppeterpan/p/7289266.html">关于此问题的具体解决办法</a></p><h3 id="2-3everything-up-to-date"><a href="#2-3everything-up-to-date" class="headerlink" title="2.3everything up-to-date"></a>2.3everything up-to-date</h3><p><strong>错误代码:</strong><br><font color= red>everything up-to-date</font></p><p><strong>原因:</strong><br>git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。那么我们就需要新建分支提交改动然后合并分支。</p><p><strong>解决办法:</strong></p><ol><li>新建一个分支</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch newbranch</span><br></code></pre></td></tr></table></figure><ol start="2"><li>检查这条命令是否创建成功</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">newbranch<br><br>*<span class="hljs-keyword">master</span><br><br><span class="hljs-title">这样就创建成功了，前面的*代表当前分支。</span><br></code></pre></td></tr></table></figure><ol start="3"><li>切换分支</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout newbranch</span><br></code></pre></td></tr></table></figure><ol start="4"><li>改动提交新的分支</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br><br>git <span class="hljs-keyword">commit</span> -m &quot;备注&quot;<br></code></pre></td></tr></table></figure><ol start="5"><li>检查提交情况</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure><ol start="6"><li>切换到主分支</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><ol start="5"><li>合并分支</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">git merge <span class="hljs-keyword">new</span><span class="hljs-type">branch</span><br><br>合并分支可能产生冲突这是正常的，虽然我们这是新建的分支不会产生冲突，但还是在这里记录下。可以用<br><br>git diff<br><br>来查看产生冲突的文件，然后做对应的修改再提交一次就可以了。<br></code></pre></td></tr></table></figure><ol start="6"><li>Push到GitHub</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><ol start="7"><li>删除创建的分支</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -D newbranch</span><br></code></pre></td></tr></table></figure><h2 id="3-参考文章"><a href="#3-参考文章" class="headerlink" title="3.参考文章"></a>3.参考文章</h2><p><a href="https://blog.csdn.net/weixin_43264399/article/details/87350219">CSDN-way-up博主文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建博客</title>
    <link href="/2022/04/01/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/04/01/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol><li><p>很早之前就有搭建自己博客的想法，奈何之前太懒每次都拖延没去搞，最近突然悟出了什么开始恶补编程基础知识，逛B站时候无意间看到了Codesheep的视频，搞了7个小时终于是搭建起来了。</p></li><li><p>搭建的过程肯定是不会一番风顺的,我自己都搞了那么久,如果搭建过程中遇到任何困难，建议先自己用CSDN，GitHub，百度，Google各大平台区解决，如果实在无法解决可以CSDN私信我，我有空看到会第一时间回复。</p></li></ol><h2 id="2搭建工具"><a href="#2搭建工具" class="headerlink" title="2搭建工具"></a>2搭建工具</h2><p><a href="https://git-scm.com/">Git工具</a><br><a href="https://nodejs.org/zh-cn/">Nodejs</a><br><a href="https://github.com/github">Github仓库</a></p><h2 id="3-本地部署"><a href="#3-本地部署" class="headerlink" title="3.本地部署"></a>3.本地部署</h2><p><strong>本地部署步骤均基于CMD，建议用管理员模式运行，减少出错</strong></p><h3 id="3-1检查版本号，确保安装成功"><a href="#3-1检查版本号，确保安装成功" class="headerlink" title="3.1检查版本号，确保安装成功"></a>3.1检查版本号，确保安装成功</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h3 id="3-2安装cnpm管理器"><a href="#3-2安装cnpm管理器" class="headerlink" title="3.2安装cnpm管理器"></a>3.2安装cnpm管理器</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install -g cnpm --registry=http://registry.npm.taobao.org<br>cnpm -v<br></code></pre></td></tr></table></figure><h3 id="3-3安装hexo框架"><a href="#3-3安装hexo框架" class="headerlink" title="3.3安装hexo框架"></a>3.3安装hexo框架</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cnpm install -g hexo-cli<br>hexo -v<br></code></pre></td></tr></table></figure><h3 id="3-4创建博客目录-blog"><a href="#3-4创建博客目录-blog" class="headerlink" title="3.4创建博客目录:blog"></a>3.4创建博客目录:blog</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">E: #进入<span class="hljs-title">E</span>盘</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">mkdir</span> <span class="hljs-title">blog</span> #创建<span class="hljs-title">blog</span>目录</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">CD</span> <span class="hljs-title">E:blog</span> #进入<span class="hljs-title">blog</span>文件夹</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h3 id="3-5-初始化博客"><a href="#3-5-初始化博客" class="headerlink" title="3.5 初始化博客"></a>3.5 初始化博客</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">sudo hexo init<br></code></pre></td></tr></table></figure><h3 id="3-6-hexo基本命令"><a href="#3-6-hexo基本命令" class="headerlink" title="3.6 hexo基本命令"></a>3.6 hexo基本命令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo s<br><br>hexo n &quot;这里输入一篇博客的名字&quot;<br><br>hexo clean<br><br>hexo g<br><span class="hljs-function"></span><br><span class="hljs-function">https://<span class="hljs-title">localhost</span>:4000 # 博客本地地址</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Ctrl</span>+<span class="hljs-title">C</span># 控制台停止博客服务器</span><br></code></pre></td></tr></table></figure><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/hexo%E6%90%AD%E5%BB%BAs.png" alt="通过localhost:4000访问,我是加了主题和你们不一样，只要能进去就可以"></p><h2 id="4-Github部署"><a href="#4-Github部署" class="headerlink" title="4.Github部署"></a>4.Github部署</h2><p><strong>仓库部署均基于GitBash管理员模式，减少出错</strong></p><h3 id="4-1创建GitHub仓库"><a href="#4-1创建GitHub仓库" class="headerlink" title="4.1创建GitHub仓库"></a>4.1创建GitHub仓库</h3><p>你github的名称.github.io</p><h3 id="4-2安装git部署插件"><a href="#4-2安装git部署插件" class="headerlink" title="4.2安装git部署插件"></a>4.2安装git部署插件</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">CD <span class="hljs-string">/E</span>:<span class="hljs-string">/blog</span><span class="hljs-comment">#进入E盘blog文件夹</span><br><br>cnpm install <span class="hljs-params">--save</span> hexo-deployer-git<br></code></pre></td></tr></table></figure><h3 id="4-3配置config-xml"><a href="#4-3配置config-xml" class="headerlink" title="4.3配置config.xml"></a>4.3配置config.xml</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <br>  <span class="hljs-attribute">repo</span><span class="hljs-punctuation">:</span> <span class="hljs-string">你github的名称.github.io</span><br>  <br>  <span class="hljs-attribute">branch</span><span class="hljs-punctuation">:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h3 id="4-4上传到Github"><a href="#4-4上传到Github" class="headerlink" title="4.4上传到Github"></a>4.4上传到Github</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h3 id="4-5联机访问"><a href="#4-5联机访问" class="headerlink" title="4.5联机访问"></a>4.5联机访问</h3><p>浏览器输入:你github的名称.github.io 即可访问你的博客</p><h2 id="5-主题配置"><a href="#5-主题配置" class="headerlink" title="5.主题配置"></a>5.主题配置</h2><ol><li><p>以fluid主题为例子，gibash输入以下命令到blog文件夹</p></li><li><p>clone后的链接可以是你自己找的github项目，可以在hexo官网文档查看其他主题</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git clone https://github.com/fluid-dev/hexo-theme-fluid<br></code></pre></td></tr></table></figure></li><li><p>修改blog目录下的config.xml文件: theme: landscape换为theme: fluid</p></li><li><p>hexo clean hexo g hexo d 三连部署即可</p></li><li><p>然后就可以通过https:&#x2F;&#x2F;你github的名称.github.io 去访问你的博客了</p></li></ol><h2 id="6-命令解释"><a href="#6-命令解释" class="headerlink" title="6.命令解释"></a>6.命令解释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">hexo n <span class="hljs-string">&quot;&quot;</span><br><br>hexo s <span class="hljs-comment">//启动hexo本地预览</span><br><br>hexo clean <span class="hljs-comment">//清除缓存</span><br><br>hexo g<span class="hljs-comment">//部署文件</span><br><br>hexo d<span class="hljs-comment">//推送到github</span><br><br>-v<span class="hljs-comment">//查看软件版本号</span><br><br>Ctrl+c<span class="hljs-comment">//当你hexo s预览过你的网页后，在命令台输入退出</span><br><br>git clone 链接 <span class="hljs-comment">//克隆github文件到你本地</span><br></code></pre></td></tr></table></figure><h2 id="7-搭建文档"><a href="#7-搭建文档" class="headerlink" title="7.搭建文档"></a>7.搭建文档</h2><p><a href="https://hexo.fluid-dev.com/">Fluid博客</a><br><a href="https://github.com/fluid-dev/hexo-theme-fluid">FluidGithub</a><br><a href="https://hexo.fluid-dev.com/docs/">Fluid官方文档</a><br><a href="https://hexo.io/zh-cn/">HEXO官方文档</a><br><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click">CodeSheep视频文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PicGo搭建图床</title>
    <link href="/2022/03/31/Hexo%E5%8D%9A%E5%AE%A2/PicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/03/31/Hexo%E5%8D%9A%E5%AE%A2/PicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>博客搭建好了，但是写文章一直用本地存图片不是个很好的办法<br>免费的图床延迟太高，信息安全也是个问题，准备自己搞个图床。<br>网上搜了搜发现开源项目PicGo不错，覆盖了常见的对象存储的几个平台。<br>下面以腾讯云COS为例</p><h2 id="2-搭建工具"><a href="#2-搭建工具" class="headerlink" title="2.搭建工具"></a>2.搭建工具</h2><p><a href="https://cloud.tencent.com/">腾讯云COS</a><br><a href="https://github.com/Molunerfinn/PicGo">开源项目PicGo</a><br>具体查看README.MD，可以用山东大学的镜像去下载</p><h2 id="3-腾讯云配置"><a href="#3-腾讯云配置" class="headerlink" title="3.腾讯云配置"></a>3.腾讯云配置</h2><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/%E6%8E%A7%E5%88%B6%E5%8F%B0.png" alt="1 在控制台中找到对象存储选项点进去进到控制台"></p><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E6%A1%B6.png" alt="2 点击左边的存储桶列表进到具体页面点击创建存储桶"></p><p><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/%E5%88%9B%E5%BB%BA.png" alt="3 名称栏取个名字，访问权限选择公有读私有写，下面一路无脑下一步就行这样就创建好了一个存储桶"></p><h2 id="4-PicGo部署"><a href="#4-PicGo部署" class="headerlink" title="4.PicGo部署"></a>4.PicGo部署</h2><ol><li><p>打开PicGo选择图床设置里面的腾讯云COS,COS版本选择V5<br><img src="https://blogpic-1310626923.cos.ap-nanjing.myqcloud.com/img/picgoset.png" alt="PICGo界面"></p></li><li><p>secretld和secreKey去腾讯云对象存储的控制台左边翻到最下面，有一个密钥管理点开会提示你去去访问密钥点进去，然后新建一个密钥会有对应的secretld和secreKey赋值粘贴到PicGo就行了</p></li><li><p>APPID：创建的存储桶名称后面的那串数字</p></li><li><p>存储空间名：就是存储桶名</p></li><li><p>存储区域：所属区域()里面的字母</p></li><li><p>指定存储路径：随便填就行</p></li><li><p>设置自定义域名：可有可无没有不填就行</p></li><li><p>确定后点到上传区选腾讯COS托一张图片进去试试提示上传成功就好了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Encapsulation[JAVA]</title>
    <link href="/2022/03/28/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/OOP/Encapsulation/"/>
    <url>/2022/03/28/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/OOP/Encapsulation/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是封装性"><a href="#1-什么是封装性" class="headerlink" title="1.什么是封装性"></a>1.什么是封装性</h2><h3 id="1-1封装核心"><a href="#1-1封装核心" class="headerlink" title="1.1封装核心"></a>1.1封装核心</h3><ol><li>是指隐藏对象的属性和实现细节,仅对外提供公共访问方式</li><li>打个比喻来说，一个手电筒，用户只需要知道开关和充电的功能即可</li><li>内部的电路板，元器件需要进行封装隐藏起来</li></ol><h3 id="1-2封装原则"><a href="#1-2封装原则" class="headerlink" title="1.2封装原则"></a>1.2封装原则</h3><ol><li>将不需要对外提供的内容都隐藏起来</li><li>把属性隐藏,提供公共方法对其访问</li></ol><h3 id="1-3封装的好处"><a href="#1-3封装的好处" class="headerlink" title="1.3封装的好处"></a>1.3封装的好处</h3><ol><li>隐藏实现细节，提供公共的访问方式</li><li>提高了代码的复用性，提高安全性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//修饰属性</span><br><span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//修饰构造器</span><br>    <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//修饰方法</span><br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-4高内聚-低耦合"><a href="#1-4高内聚-低耦合" class="headerlink" title="1.4高内聚 低耦合"></a>1.4高内聚 低耦合</h3><p>高内聚:类的内部数据操作细节自己完成，不允许外部干涉<br>低耦合:仅对外暴漏少量的方法用于使用</p><h3 id="1-5属性的获取"><a href="#1-5属性的获取" class="headerlink" title="1.5属性的获取"></a>1.5属性的获取</h3><p>在对一个属性私有化的同时，除了提供公共的设置方法外，还需要提供获取方法<br>即 set方法与get方法<br>两种方法共同构成了属性的获取<br>注：这只是封装性的一种体现，并不能完全代表封装性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setage</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getage</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-权限修饰符"><a href="#2-权限修饰符" class="headerlink" title="2.权限修饰符"></a>2.权限修饰符</h2><p>|  类型   | 本类  | 同一个包下  | 不同包下 | 同一个工程下  |<br>|  —-  | —-  | —-  | —-  | —-  | —-  |<br>| private  | √ | x | x | x |<br>| 缺省  | √ | √ | x | x |<br>| protected  | √ | √ | √ | x |<br>| public  | √ | √ | √ | √ |</p><h3 id="2-1用法"><a href="#2-1用法" class="headerlink" title="2.1用法"></a>2.1用法</h3><ul><li>封装的体现需要权限修饰符配合</li><li>四种权限修饰符都可以修饰类及类的内部结构：属性、方法、构造器、内部类</li><li>修饰类的话只能用：pulibc或者缺省</li></ul><h2 id="3-再谈封装性"><a href="#3-再谈封装性" class="headerlink" title="3.再谈封装性"></a>3.再谈封装性</h2><p><em><strong>Java提供了四种不同的权限修饰符来修饰类及其类的内部结构<br>体现了类和类的内部结构在被调用时候的可见性大小</strong></em></p><h2 id="4-构造器"><a href="#4-构造器" class="headerlink" title="4.构造器"></a>4.构造器</h2><h3 id="4-1构造器核心"><a href="#4-1构造器核心" class="headerlink" title="4.1构造器核心"></a>4.1构造器核心</h3><ol><li>就是用来造对象的,就是在你创建对象时候new后面就是</li><li>若我们没有去定义类的构造器,系统会默认创造一个空参的构造器</li><li>若我们给出了构造方法,系统将不再提供默认的无参构造器</li><li>如果我们还想使用无参构造方法,就必须自己给出,建议永远自己给出无参构造方法</li><li>一个类中可以定于多个构造器，就构成了构造器的重载</li></ol><h4 id="4-1-1作用"><a href="#4-1-1作用" class="headerlink" title="4.1.1作用"></a>4.1.1作用</h4><ul><li>创建对象</li><li>初始化对象信息</li></ul><h3 id="4-2格式特点"><a href="#4-2格式特点" class="headerlink" title="4.2格式特点"></a>4.2格式特点</h3><ol><li>方法名和类名相等</li><li>没有返回值类型</li><li>没有具体的返回值，但是可以写return\也可以不写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">主类:<br><span class="hljs-type">Person</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//new后面的就是构造器</span><br><span class="hljs-comment">//c.Person();  构造方法不能用对象调用</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>name=<span class="hljs-string">&quot;小明&quot;</span>;<br>age=<span class="hljs-number">21</span>;<br><span class="hljs-comment">//有return语句，但可不写</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3属性赋值"><a href="#4-3属性赋值" class="headerlink" title="4.3属性赋值"></a>4.3属性赋值</h3><p>属性赋值的先后顺序:<br>默认初始化&gt;显示初始化&gt;构造器初始化&gt;开发常用的</p><p>通过对象.方法或对象.属性的方式赋值<br>开发常用比较灵活</p><h3 id="4-3JavaBean了解"><a href="#4-3JavaBean了解" class="headerlink" title="4.3JavaBean了解"></a>4.3JavaBean了解</h3><p>符合如下标准的Java类:</p><ol><li>类是pulic的</li><li>有一个空参的public构造器</li><li>有属性，且对应的get、set方法</li></ol><h2 id="5-this关键词"><a href="#5-this关键词" class="headerlink" title="5.this关键词"></a>5.this关键词</h2><h3 id="5-1this的作用"><a href="#5-1this的作用" class="headerlink" title="5.1this的作用"></a>5.1this的作用</h3><ol><li>this可以修饰或调用 属性 方法 构造器</li><li>this修饰属性和方法时 this可以理解为当前对象 或当前正在创建的对象</li><li>主要是为了区分属性和局部变量，当两者相同时候属性前加上this即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">thistest</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//this区分属性和形参</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2this调用构造器"><a href="#5-2this调用构造器" class="headerlink" title="5.2this调用构造器"></a>5.2this调用构造器</h3><ol><li>类的构造器中，可以以this(形参列表)的方式，调用本类中指定的其他构造器</li><li>构造器不可以以this(形参列表)方式去调用自己</li><li>this(形参列表)必须写在构造器的第一行</li><li>最多只能声明一个this(形参列表)，用来调用其他构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">thistest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.info();    <span class="hljs-comment">//方法调用方法 this可不写</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">thistest</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>(); <span class="hljs-comment">//this调用构造器</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">thistest</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>();<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span> <span class="hljs-params">( <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span> <span class="hljs-params">( )</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> vod <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git部署代码步骤</title>
    <link href="/2022/03/26/Git%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Git%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E6%AD%A5%E9%AA%A4/"/>
    <url>/2022/03/26/Git%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Git%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前提条件"><a href="#1-前提条件" class="headerlink" title="1.前提条件"></a>1.前提条件</h3><ul><li><a href="https://github.com/github">注册Github</a></li><li><a href="https://git-scm.com/">下载GIT工具</a></li></ul><h3 id="2-创建Github仓库"><a href="#2-创建Github仓库" class="headerlink" title="2.创建Github仓库"></a>2.创建Github仓库</h3><p><img src="https://s1.ax1x.com/2022/03/27/q0YAij.png" alt="创建一个仓库"><br><img src="https://s1.ax1x.com/2022/03/27/q0YEJs.png" alt="输入仓库的名字,点击creat repository即可"><br><img src="https://s1.ax1x.com/2022/03/27/q0YFoQ.png" alt="仓库地址"></p><h3 id="3-开始部署"><a href="#3-开始部署" class="headerlink" title="3.开始部署"></a>3.开始部署</h3><p>以管理员命令打开git窗口<br>可预防后期一些错误,但是需要手动输入路径<br>也可以在文件夹中右击选择git bash here<br><img src="https://s1.ax1x.com/2022/03/27/q0t5DK.png" alt="管理员打开"><br><img src="https://s1.ax1x.com/2022/03/27/q0t4u6.png" alt="文件夹内打开"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">获取磁盘位置<br>cd /D:/phpdoc<br><br>初始化git工具<br>git init<br><br>本地文件添加到Git<br>git add .<br><br>文件备注<br>git commit -m <span class="hljs-string">&#x27;这里写备注&#x27;</span><br><br>上传仓库<br>git remote add origin 你的仓库地址<br><br>开始上传<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>最后可能会提示输入GitHub账号和密码,输入即可<br>也可以提前输入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">git config --global user.name <span class="hljs-string">&quot;你的GitHub名称&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;注册时候的email&quot;</span><br></code></pre></td></tr></table></figure><p>更新仓库至需要执行第3&#x2F;4&#x2F;6的代码即可</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | 方法总结</title>
    <link href="/2022/03/26/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/26/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1-方法核心"><a href="#1-方法核心" class="headerlink" title="1.方法核心"></a>1.方法核心</h2><ol><li>方法一般由权限修饰符,返回值类型,方法名,形参,方法体组成<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">书写格式</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">权限修饰符  返回值类型  方法名(形参(即局部变量))&#123;</span><br><span class="hljs-template-variable">方法体</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure></li><li>形参与返回值类型可有可无根据经验或者题目要求</li><li>有返回值的情况下需要使用return关键词</li><li>写好的方法通过类创建对象去调用使用即可</li></ol><h3 id="1-1代码实现"><a href="#1-1代码实现" class="headerlink" title="1.1代码实现"></a>1.1代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//无形参</span><br>System.out.println(<span class="hljs-string">&quot;justdoit.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">int</span> time)</span>&#123;<span class="hljs-comment">//有形参 无返回值</span><br>System.out.println(<span class="hljs-string">&quot;sleep&quot;</span>+time+<span class="hljs-string">&quot;minutes&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//有返回值 需要return</span><br><span class="hljs-keyword">return</span>  color;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNation</span><span class="hljs-params">(String nation)</span>&#123; <span class="hljs-comment">//有返回值且有形参 需要return</span><br>String infos=<span class="hljs-string">&quot;Tomnationis:&quot;</span>+nation;<br><span class="hljs-keyword">return</span>  infos;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1注意事项"><a href="#1-1注意事项" class="headerlink" title="1.1注意事项"></a>1.1注意事项</h3><ul><li>方法使用中，可以调用当前类的属性或方法</li><li>特殊：方法自己调用自己：递归方法</li><li>方法中不可再定义其他方法</li></ul><h2 id="2-方法重载"><a href="#2-方法重载" class="headerlink" title="2.方法重载"></a>2.方法重载</h2><p>方法名相同,与返回值类型无关(构造方法没有返回值),参数个数和参数类型不同即可</p><h3 id="2-1注意事项"><a href="#2-1注意事项" class="headerlink" title="2.1注意事项"></a>2.1注意事项</h3><ol><li>如果我们没有给出构造方法,系统将会自动一共一个无参构造方法</li><li>如果我们给出了构造方法,系统将不再提供默认的无参构造方法</li><li>注意:这个时候,如果我们还想使用无参构造方法,就必须自己给出,建议永远自己给出无参构造方法</li></ol><h3 id="2-2varargs机制"><a href="#2-2varargs机制" class="headerlink" title="2.2varargs机制"></a>2.2varargs机制</h3><p>就是可变个数形参的方法</p><ul><li>允许直接定义能和多个实参相匹配的形参</li><li>Void show(形参类型 形参名称) &#x2F;&#x2F;前</li><li>Void show(形参类型[ ]形参名称) &#x2F;&#x2F;前</li><li>Void show(形参类型…形参名称) &#x2F;&#x2F;后</li></ul><h3 id="2-3varags注意事项"><a href="#2-3varags注意事项" class="headerlink" title="2.3varags注意事项"></a>2.3varags注意事项</h3><ol><li>方法里只能写一个varargs机制的形参</li><li>若存在两个形参varargs机制形参要写到后面</li><li>书写格式中形参类型…形参名称和形参类型[ ]形参名称功能一样只能存在一个</li></ol><h3 id="2-4代码实现"><a href="#2-4代码实现" class="headerlink" title="2.4代码实现"></a>2.4代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Void <span class="hljs-title function_">show</span><span class="hljs-params">(String b,String...aaa)</span>&#123;&#125;<span class="hljs-comment">//正确写法，varargs机制必须在最后</span><br>Void <span class="hljs-title function_">show</span><span class="hljs-params">(String...b,String...aaa)</span>&#123;&#125;<span class="hljs-comment">//错误写法只能写一个varargs机制</span><br></code></pre></td></tr></table></figure><h2 id="3-值传递机制"><a href="#3-值传递机制" class="headerlink" title="3.值传递机制"></a>3.值传递机制</h2><p><strong>变量的值传递</strong></p><ul><li>基本数据类型：赋值的为变量保存的数据值</li><li>引用数据类型：赋值的为变量保存的地址值</li></ul><p><strong>方法的值传递</strong></p><ul><li>形参，方法定义时，声明在()里面的</li><li>实参，方法调用时，实际传递给形参的数据</li></ul><p><strong>值传递机制</strong></p><ul><li>如果参数为基本数据类型，此时实参给形参的是实参真实存储的数据值</li><li>如果参数为引用数据类型，此时实参赋值给形参的是实参真实存储的地址值</li></ul><h2 id="4-递归方法"><a href="#4-递归方法" class="headerlink" title="4.递归方法"></a>4.递归方法</h2><ul><li>即方法调用自己本身</li><li>递归方法包含了一种隐式的循环，可以重复的去执行代码,但这种重复不需要循环控制<br>递归方法一定是向已知的方向递归，否则的话就会变成了无穷递归，类似于死循环</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">求<span class="hljs-number">100</span>以内数的和<br>Public <span class="hljs-type">int</span> <span class="hljs-title function_">dgsum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>   <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>   return1;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-keyword">return</span> n + dgsum(n-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 | 类与对象</title>
    <link href="/2022/03/26/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/03/26/Java%E5%88%9D%E7%BA%A7%E9%83%A8%E5%88%86/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-核心思想"><a href="#1-核心思想" class="headerlink" title="1.核心思想"></a>1.核心思想</h2><ol><li>类及类的成员：属性、方法、构造器；代码块、内部类</li><li>三大特征：封装性(encapsulation) 继承性(inheritance) 多态性(polymorphism)  抽象性(abstract)</li><li>关键词：static this super final interface package import sychronized等等</li></ol><h3 id="1-1思想特点"><a href="#1-1思想特点" class="headerlink" title="1.1思想特点"></a>1.1思想特点</h3><ol><li>是一种更符合我们习惯思想的思想可以将复杂的事情简单化<br>  把我们从执行者变成了指挥者（角色发生了转换）</li><li>开发：就是不断地创建对象，使用对象，指挥对象做事情</li><li>设计：其实就是在管理和维护对象之间的关系</li></ol><h3 id="1-2万事万物皆对象"><a href="#1-2万事万物皆对象" class="headerlink" title="1.2万事万物皆对象"></a>1.2万事万物皆对象</h3><ul><li>Java语言范畴中，把功能，结构等等封装到类里面，再通过类的实例化，来调用具体的功能或者结构。</li><li>涉及到Java和前端html，和后端数据库交互时，前后端的结构再Java层面交互时，都体现为类或对象。</li></ul><h2 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2.类与对象"></a>2.类与对象</h2><ol><li>首先通过写一个类，然后在类里面不断地去增加属性和方法，并不断的去完善它。</li><li>然后需要用这个类的时候只需去创建它的对象，然后调用里面写好的方法和属性即可。</li></ol><ul><li>属性&#x3D;成员变量&#x3D;field&#x3D;域</li><li>方法&#x3D;成员方法&#x3D;函数&#x3D;method</li><li>创建类的对象&#x3D;类的实例化</li></ul><h3 id="2-1代码使用体现"><a href="#2-1代码使用体现" class="headerlink" title="2.1代码使用体现"></a>2.1代码使用体现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>&#123;<br>  <span class="hljs-comment">//2.设计类的成员</span><br>  <span class="hljs-type">int</span> age;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;study happy&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>  <span class="hljs-comment">//3.创建类对象</span><br>  <span class="hljs-type">student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">student</span>();<br>  <span class="hljs-comment">//4. 通过对象.属性/对象.方法调用对象的结构</span><br>  stu.age=<span class="hljs-number">17</span>;<br>  stu.study();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-2-匿名对象"><a href="#2-2-匿名对象" class="headerlink" title="2.2.匿名对象"></a>2.2.匿名对象</h3><ul><li>调用方法仅仅是调用一次的时候</li><li>好处：节省代码</li><li>调用多次不适合.匿名对象调用完毕就是垃圾.可以被垃圾回收器回收。</li><li>匿名对象可以作为实际参数传递。</li><li>匿名对象可以调用属性，但是没有意义，应为调用后就变成垃圾</li><li>如果有需要还是用有名对象</li><li>方法，循环，判断语句同样使用在面向对象中</li></ul><h2 id="3-变量对比"><a href="#3-变量对比" class="headerlink" title="3.变量对比"></a>3.变量对比</h2><h3 id="3-1局部-成员"><a href="#3-1局部-成员" class="headerlink" title="3.1局部|成员"></a>3.1局部|成员</h3><ol><li>在类中声明的位置不同<ul><li>成:声明在在类中{}内</li><li>局:声明在方法内、方法形参、代码块、构造器形参、构造器内部的变量</li></ul></li><li>权限修饰不同(public,protected,private,缺省(即默认))<ul><li>成:可使用权限修饰符</li><li>局:不可用权限修饰符</li></ul></li><li>初始化不同<ul><li>成:有默认初始化值</li><li>局:没有默认初始化值,必须定义 赋值 然后才能使用</li></ul></li><li>在内存中的位置不同<ul><li>成:在堆内存(成员变量属于对象,对象进堆内存)</li><li>局:在栈内存(局部变量属于方法,方法进栈内存)</li></ul></li><li>生命周期不同<ul><li>成:随着对象的创建而存在,对象的消失而消失</li><li>局:随着方法的调用而存在,方法的调用完毕而消失</li></ul></li></ol><h3 id="3-2静态-成员"><a href="#3-2静态-成员" class="headerlink" title="3.2静态|成员"></a>3.2静态|成员</h3><ol><li>所属不同<ul><li>静:属于类,所以也称类变量</li><li>成:属于对象,所以也称(实例&#x2F;对象变量)</li></ul></li><li>内存中位置不同<ul><li>静:方法区的静态区.</li><li>成:堆内存.</li></ul></li><li>内存出现时间不同<ul><li>静:随着类的加载而加载,随着类的消失而消失</li><li>成:随着对象的创立而存在,随着对象的消失而消失</li></ul></li><li>调用不同<ul><li>静:可以通过类名调用,也可以通过对象调用</li><li>成:只能通过对象名调用</li></ul></li></ol><h2 id="4-static关键词"><a href="#4-static关键词" class="headerlink" title="4.static关键词"></a>4.static关键词</h2><p>每个中国人的国籍都是中国,那么中国这个属性就可以定义为静态的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">可以用来修饰属性 方法 内部类 代码块<br><br>静态变量优先于对象的创建<br><br>静态是随着类的加载而加载，可以使用类名调用(<span class="hljs-keyword">class</span>.param)<br><br>类只加载一次，所以静态变量只存在一份(在方法去的静态域中)<br><br>静态方法中没有<span class="hljs-keyword">this</span>和<span class="hljs-keyword">super</span>，因为他们是随着对象的创建而存在<br><br>静态方法和属性的使用，可以从生命周期的角度去逻辑<br></code></pre></td></tr></table></figure><h3 id="4-1使用场景"><a href="#4-1使用场景" class="headerlink" title="4.1使用场景"></a>4.1使用场景</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">静态属性:</span><br>一个属性需要被多个对象共享时<br>这样就不会随着对象的不同而不同<br>类中的常量也常常是static的<br><br><span class="hljs-section">静态方法:</span><br>操控静态属性的方法，<br>工具类中的方法<br></code></pre></td></tr></table></figure><h3 id="4-2修饰属性与方法"><a href="#4-2修饰属性与方法" class="headerlink" title="4.2修饰属性与方法"></a>4.2修饰属性与方法</h3><h4 id="4-2-1修饰属性"><a href="#4-2-1修饰属性" class="headerlink" title="4.2.1修饰属性"></a>4.2.1修饰属性</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">修饰的变量叫静态变量<br><br>实例变量:创建类的多个对象，每个对象都有一套自己的非静态属性，和其他对象属性不冲突<br><br>静态变量:创建类的多个对象，共享一个静态变量，某个对象如果把它修改了，别的对象调也是修改过的<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> name;<br></code></pre></td></tr></table></figure><h4 id="4-2-2修饰方法"><a href="#4-2-2修饰方法" class="headerlink" title="4.2.2修饰方法"></a>4.2.2修饰方法</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">随着类的加载而加载，可以通过类名.方法名调用<br><br>静态方法中:只能调用静态的方法或属性<br><br>非静态方法中:成员变量/成员方法:可以是静态的/非静态的<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-keyword">method</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="5-final关键词"><a href="#5-final关键词" class="headerlink" title="5.final关键词"></a>5.final关键词</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gcode">修饰类 ：类不能被继承<span class="hljs-comment">(比如String System等)</span><br><br>修饰变量 ：变量就变成了常量 只能被赋值一次<br><br>修饰局部变量：例:形参，表示此形参是一个常量<span class="hljs-comment">(已经传了实参)</span><br><br>修饰方法：法不能被重写<span class="hljs-comment">(比如object中的getclass()</span>)<br><br>修饰属性初始化位置：显式初始化、代码块中初始化、构造器中初始化<br></code></pre></td></tr></table></figure><h3 id="5-1常量概述"><a href="#5-1常量概述" class="headerlink" title="5.1常量概述"></a>5.1常量概述</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">常量是标记为<span class="hljs-keyword">final</span>关键字的类变量<br><br>常量必须赋值，赋值后不能改变。<br><br>常量名称都需要大写。<br><br>如果常量又加上了<span class="hljs-keyword">static</span>修饰就是全局常量<br><br>类变量的特性常量均有<br><br>类变量被存储在常量存储器中。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
